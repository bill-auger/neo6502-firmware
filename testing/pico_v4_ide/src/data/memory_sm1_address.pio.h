// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// address //
// ------- //

#define address_wrap_target 0
#define address_wrap 12

static const uint16_t address_program_instructions[] = {
            //     .wrap_target
    0xff06, //  0: set    pins, 6         side 1 [7] 
    0x4008, //  1: in     pins, 8                    
    0xe505, //  2: set    pins, 5                [5] 
    0x4008, //  3: in     pins, 8                    
    0xe503, //  4: set    pins, 3                [5] 
    0x400c, //  5: in     pins, 12                   
    0x4064, //  6: in     null, 4                    
    0xa0eb, //  7: mov    osr, !null                 
    0x6088, //  8: out    pindirs, 8                 
    0x80a0, //  9: pull   block                      
    0x6008, // 10: out    pins, 8                    
    0xa0e3, // 11: mov    osr, null                  
    0x7788, // 12: out    pindirs, 8      side 0 [7] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program address_program = {
    .instructions = address_program_instructions,
    .length = 13,
    .origin = -1,
};

static inline pio_sm_config address_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + address_wrap_target, offset + address_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}

// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
void address_program_init(PIO pio, uint sm, uint offset) {
   pio_gpio_init(pio, 0);
   pio_gpio_init(pio, 1);
   pio_gpio_init(pio, 2);
   pio_gpio_init(pio, 3);
   pio_gpio_init(pio, 4);
   pio_gpio_init(pio, 5);
   pio_gpio_init(pio, 6);
   pio_gpio_init(pio, 7);
   pio_gpio_init(pio, 8);
   pio_gpio_init(pio, 9);
   pio_gpio_init(pio, 10);
   pio_gpio_init(pio, 21);
   pio_sm_set_consecutive_pindirs(pio, sm, 0, 8, false);
   pio_sm_set_consecutive_pindirs(pio, sm, 8, 3, true);
   pio_sm_set_consecutive_pindirs(pio, sm, 21, 1, true);
   pio_sm_config c = address_program_get_default_config(offset);
   sm_config_set_set_pins(&c, 8, 3);
   sm_config_set_in_pins(&c, 0);
   sm_config_set_out_pins(&c, 0, 8);
   sm_config_set_sideset_pins(&c, 21);
   sm_config_set_in_shift(&c, true, true, 32);		
   pio_sm_init(pio, sm, offset, &c);
}

#endif

