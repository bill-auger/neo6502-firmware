// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----- //
// clock //
// ----- //

#define clock_wrap_target 0
#define clock_wrap 2

static const uint16_t clock_program_instructions[] = {
            //     .wrap_target
    0xe001, //  0: set    pins, 1                    
    0x20c3, //  1: wait   1 irq, 3                   
    0xe200, //  2: set    pins, 0                [2] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program clock_program = {
    .instructions = clock_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config clock_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + clock_wrap_target, offset + clock_wrap);
    return c;
}

// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin
void clock_program_init(PIO pio, uint sm, uint offset, uint pin) {
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
   pio_sm_config c = clock_program_get_default_config(offset);
   sm_config_set_set_pins(&c, pin, 1);
   pio_sm_init(pio, sm, offset, &c);
}

#endif

