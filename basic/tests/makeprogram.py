# *******************************************************************************************
# *******************************************************************************************
#
#		Name : 		makeprogram.py
#		Purpose :	Generate test program.
#		Date :		16th December 2023
#		Author : 	Paul Robson (paul@robsons.org.uk)
#
# *******************************************************************************************
# *******************************************************************************************

import os,sys,math,re,random
from tokens import *
from tokeniser import *

class TestProgram(object):
	def __init__(self):
		self.variables = {}
		self.identStore = IdentifierStore()
		for c in ["A","O","P","X","Y"]:
			self.identStore.add(c)
			self.variables[c] = True
		self.tokenSet = TokenSet()
		self.tokenNames = self.tokenSet.getAllTokenNames()
		self.tokenWorker = Tokeniser(self.identStore)
		self.tokeniser = []
		self.sourceLines = []
		self.program = {}
		lineCount = 200

		for i in range(0,max(10,lineCount >> 3)):
			vName = ""
			for c in range(0,random.randint(1,11)):
				vName = vName + (chr(random.randint(97,120)) if c % 2 == 0 else chr(random.randint(48,57)))
			if random.randint(0,2) == 0:
				vName += "$"
			if random.randint(0,2) == 0:
				vName += "("
			self.variables[vName] = True
		self.variables = [x for x in self.variables.keys()]
		for i in range(0,lineCount):
			ln = i * 10 + 1000
			line = ""
			for e in range(0,random.randint(1,10)):
				line += " " + self.createElement()
			self.addLine(ln,line.strip())
	#
	def createElement(self):
		n = random.randint(0,5)
		if n == 0:
			return str(random.randint(-320000,320000))
		elif n == 1:
			return str(random.randint(-999999,999999)/10)
		elif n == 2:
			return "${0:X}".format(random.randint(0,123456))
		elif n == 3:
			return '"'+"".join([chr(random.randint(65,90)) for i in range(0,random.randint(0,7))])+'"'
		elif n == 4:
			return self.variables[random.randint(0,len(self.variables)-1)]
		elif n == 5:
			s = self.tokenNames[random.randint(0,len(self.tokenNames)-1)]
			if s.startswith("!!") or s == "'" or s == '$':
				s = self.createElement()
			return s
		else:
			assert False
		return str(n)	
	#
	def addLine(self,lineNumber,code):
		self.sourceLines.append("{0} {1}".format(lineNumber,code))
		if code != "":
			self.program[lineNumber] = self.tokenWorker.tokenise(code)
		else:
			del self.program[lineNumber]
	#
	def renderInput(self,h):
		h.write(";\n;\tThis file is automatically generated.\n;\n")
		for l in self.sourceLines:
			h.write("\t.text\t{0},'{1}'\n".format(len(l),l))
		h.write("\t.byte\t0\n")
	#
	def renderTokenised(self,h):
		h.write(bytes(self.identStore.render()))
		lNo = [x for x in self.program.keys()]
		lNo.sort()
		for l in lNo:
			line = [0,l & 0xFF,l >> 8] + self.program[l] + [self.tokenSet.getByName("!!end").getID()]
			line[0] = len(line)
			h.write(bytes(line))
		h.write(bytes([0]))

prg = TestProgram()
prg.renderInput(open("sources/generated/inputtoken.dat","w"))
prg.renderTokenised(open("build/token_test.dat","wb"))
