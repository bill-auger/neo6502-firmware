
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -b --mr65c02 -Wall -L build/basic.lst -o build/basic.bin basic.asm
; Wed Nov 29 08:19:57 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

.c000	4c 03 c0	jmp $c003	boot:	jmp 	cold
.c003					cold:
.c003	a9 00		lda #$00			lda 	#(Program & $FF)
.c005	85 3a		sta $3a				sta 	codePtr
.c007	a9 c2		lda #$c2			lda 	#(Program >> 8)+1
.c009	85 3b		sta $3b				sta 	codePtr+1
.c00b	a2 ff		ldx #$ff			ldx 	#$FF
.c00d	a0 04		ldy #$04			ldy 	#4
.c00f	20 15 c0	jsr $c015			jsr 	EvaluateTerm
.c012	80 fe		bra $c012	h1:		bra 	h1

;******  Processing file: _include.inc


;******  Processing file: sources/00data/00data_config.inc


;******  Return to file: _include.inc


;******  Processing file: sources/00data/01data.inc

=8					StackSize = 8
.0010					XSStack:
.0010					XSControl:
>0010							.fill 	StackSize
.0018					XSNumber0:
>0018							.fill 	StackSize
.0020					XSNumber1:
>0020							.fill 	StackSize
.0028					XSNumber2:
>0028							.fill 	StackSize
.0030					XSNumber3:
>0030							.fill 	StackSize
.0038					zTemp0:
>0038							.fill 	2
.003a					CodePtr:
>003a							.fill 	2

;******  Return to file: _include.inc


;******  Processing file: sources/generated/kwdconst.inc

=$20					KWD_PLUS                           = $20 ; +
=$21					KWD_MINUS                          = $21 ; -
=$22					KWD_ASTERISK                       = $22 ; *
=$23					KWD_SLASH                          = $23 ; /
=$24					KWD_GREATERGREATER                 = $24 ; >>
=$25					KWD_LESSLESS                       = $25 ; <<
=$26					KWD_PERCENT                        = $26 ; %
=$27					KWD_BACKSLASH                      = $27 ; \
=$28					KWD_AMPERSAND                      = $28 ; &
=$29					KWD_VBAR                           = $29 ; |
=$2a					KWD_HAT                            = $2a ; ^
=$2b					KWD_GREATER                        = $2b ; >
=$2c					KWD_GREATEREQUAL                   = $2c ; >=
=$2d					KWD_LESS                           = $2d ; <
=$2e					KWD_LESSEQUAL                      = $2e ; <=
=$2f					KWD_LESSGREATER                    = $2f ; <>
=$30					KWD_EQUAL                          = $30 ; =
=$31					KWD_PLING                          = $31 ; !
=$32					KWD_QMARK                          = $32 ; ?
=$80					KWD_SYS_STR                        = $80 ; !!str
=$81					KWD_DOLLAR                         = $81 ; $
=$82					KWD_LPAREN                         = $82 ; (
=$83					KWD_RANDLPAREN                     = $83 ; rand(
=$84					KWD_RNDLPAREN                      = $84 ; rnd(
=$85					KWD_ISVALLPAREN                    = $85 ; isval(
=$86					KWD_FRACLPAREN                     = $86 ; frac(
=$87					KWD_INTLPAREN                      = $87 ; int(
=$88					KWD_TIME                           = $88 ; time
=$89					KWD_EVENTLPAREN                    = $89 ; event(
=$8a					KWD_INKEYDOLLARLPAREN              = $8a ; inkey$(
=$8b					KWD_ASCLPAREN                      = $8b ; asc(
=$8c					KWD_CHRDOLLARLPAREN                = $8c ; chr$(
=$8d					KWD_SQRLPAREN                      = $8d ; sqr(
=$8e					KWD_LENLPAREN                      = $8e ; len(
=$8f					KWD_ABSLPAREN                      = $8f ; abs(
=$90					KWD_SGNLPAREN                      = $90 ; sgn(
=$91					KWD_VALLPAREN                      = $91 ; val(
=$92					KWD_STRDOLLARLPAREN                = $92 ; str$(
=$93					KWD_MIDDOLLARLPAREN                = $93 ; mid$(
=$94					KWD_LEFTDOLLARLPAREN               = $94 ; left$(
=$95					KWD_RIGHTDOLLARLPAREN              = $95 ; right$(
=$96					KWD_SINLPAREN                      = $96 ; sin(
=$97					KWD_COSLPAREN                      = $97 ; cos(
=$98					KWD_TANLPAREN                      = $98 ; tan(
=$99					KWD_ATANLPAREN                     = $99 ; atan(
=$9a					KWD_SQRTLPAREN                     = $9a ; sqrt(
=$9b					KWD_LOGLPAREN                      = $9b ; log(
=$9c					KWD_EXPLPAREN                      = $9c ; exp(
=$9d					KWD_KEYLPAREN                      = $9d ; key(
=$b0					KWD_WHILE                          = $b0 ; while
=$b1					KWD_WEND                           = $b1 ; wend
=$b2					KWD_IF                             = $b2 ; if
=$b3					KWD_ENDIF                          = $b3 ; endif
=$b4					KWD_DO                             = $b4 ; do
=$b5					KWD_LOOP                           = $b5 ; loop
=$b6					KWD_REPEAT                         = $b6 ; repeat
=$b7					KWD_UNTIL                          = $b7 ; until
=$b8					KWD_PROC                           = $b8 ; proc
=$b9					KWD_ENDPROC                        = $b9 ; endproc
=$ba					KWD_FOR                            = $ba ; for
=$bb					KWD_NEXT                           = $bb ; next
=$bc					KWD_CASE                           = $bc ; case
=$bd					KWD_ENDCASE                        = $bd ; endcase
=$be					KWD_SYS_UN1                        = $be ; !!un1
=$bf					KWD_THEN                           = $bf ; then
=$c0					KWD_SYS_END                        = $c0 ; !!end
=$c1					KWD_SYS_SH1                        = $c1 ; !!sh1
=$c2					KWD_SYS_SH2                        = $c2 ; !!sh2
=$c3					KWD_SYS_DEC                        = $c3 ; !!dec
=$c4					KWD_TO                             = $c4 ; to
=$c5					KWD_LET                            = $c5 ; let
=$c6					KWD_PRINT                          = $c6 ; print
=$c7					KWD_INPUT                          = $c7 ; input
=$c8					KWD_CALL                           = $c8 ; call
=$c9					KWD_SYS                            = $c9 ; sys
=$ca					KWD_EXIT                           = $ca ; exit
=$cb					KWD_COMMA                          = $cb ; ,
=$cc					KWD_SEMICOLON                      = $cc ; ;
=$cd					KWD_COLON                          = $cd ; :
=$ce					KWD_SQUOTE                         = $ce ; '
=$cf					KWD_RPAREN                         = $cf ; )
=$d0					KWD_READ                           = $d0 ; read
=$d1					KWD_DATA                           = $d1 ; data
=$d2					KWD_LSQ                            = $d2 ; [
=$d3					KWD_RSQ                            = $d3 ; ]
=$d4					KWD_HASH                           = $d4 ; #
=$d5					KWD_PERIOD                         = $d5 ; .
=$d6					KWD_ELSE                           = $d6 ; else
=$d7					KWD_WHEN                           = $d7 ; when
=$d8					KWD_DOWNTO                         = $d8 ; downto
=$100					KWD_CLEAR                          = $100 ; clear
=$101					KWD_NEW                            = $101 ; new
=$102					KWD_RUN                            = $102 ; run
=$103					KWD_STOP                           = $103 ; stop
=$104					KWD_END                            = $104 ; end
=$105					KWD_ASSERT                         = $105 ; assert
=$106					KWD_LIST                           = $106 ; list
=$107					KWD_SAVE                           = $107 ; save
=$108					KWD_LOAD                           = $108 ; load
=$109					KWD_GOSUB                          = $109 ; gosub
=$10a					KWD_GOTO                           = $10a ; goto
=$10b					KWD_RETURN                         = $10b ; return
=$10c					KWD_RESTORE                        = $10c ; restore
=$10d					KWD_DIM                            = $10d ; dim

;******  Return to file: _include.inc


;******  Processing file: sources/generated/neo6502.inc

=$ff00					ControlPort = $ff00
=$ffee					ReadCharacter = $ffee
=$fff1					WriteCharacter = $fff1
=$fff4					WaitMessage = $fff4
=$fff7					SendMessage = $fff7

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/dereference.asm

.c014					DereferenceTerm:
.c014	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/term.asm

.c015					EvaluateTerm:
.c015	e8		inx				inx 								; new slot on stack
.c016	b1 3a		lda ($3a),y			lda 	(CodePtr),y 				; get next token
.c018	30 0a		bmi $c024			bmi 	_ETKeyword 					; is it a keyword (80-FF) ?
.c01a	0a		asl a				asl		a							; is it a number (40-7F)
.c01b	10 08		bpl $c025			bpl		_ETIdentifierOrSpecial 		; if 00-3F then it is an identifier, or a multi purpose unary ! ? -
.c01d	20 5e c0	jsr $c05e			jsr 	ExtractTokenisedInteger
.c020	20 a4 c0	jsr $c0a4			jsr 	CheckFollowingDecimal
.c023	60		rts				rts
.c024					_ETKeyword:
>c024	03						.byte 	3
.c025					_ETIdentifierOrSpecial:
.c025	0a		asl a			 	asl 	a 							; bit 5 now in sign slot
.c026	10 14		bpl $c03c		 	bpl 	_ETIsIdentifier  			; 0 it is 00-1F e.g. identifier
.c028	b1 3a		lda ($3a),y		 	lda 	(codePtr),y 				; get and consume. clearer than reuse
.c02a	c8		iny			 	iny
.c02b	c9 21		cmp #$21		 	cmp 	#KWD_MINUS 					; negation.
.c02d	d0 0c		bne $c03b		 	bne 	_ETCheckReference
.c02f	20 15 c0	jsr $c015		 	jsr 	EvaluateTerm 				; it's minus *something*.
.c032	20 14 c0	jsr $c014		 	jsr 	DereferenceTerm 			; dereference it.
.c035	a9 10		lda #$10		 	lda 	#16 						; negation function - needs optimising for ints
.c037	20 bf c0	jsr $c0bf		 	jsr 	DoMathCommand 				; work it out
.c03a	60		rts			 	rts
.c03b					_ETCheckReference:
>c03b	03						.byte 	3
.c03c					_ETIsIdentifier:
>c03c	03						.byte 	3
.c03d	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get the MSB of the identifier address.
.c03f	c8		iny				iny
.c040	18		clc				clc
.c041	69 c1		adc #$c1			adc 	#Program >> 8 				; convert to a real address.
.c043	95 20		sta $20,x			sta 	XSNumber1,x
.c045	85 39		sta $39				sta 	zTemp0+1
.c047	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; LSB - on a page boundary
.c049	95 18		sta $18,x			sta 	XSNumber0,x
.c04b	85 38		sta $38				sta 	zTemp0
.c04d	74 28		stz $28,x			stz 	XSNumber2,x 				; neatness
.c04f	74 30		stz $30,x			stz 	XSNumber3,x
.c051	5a		phy				phy 								; read and update the type/control
.c052	a0 04		ldy #$04			ldy 	#4
.c054	b1 38		lda ($38),y			lda 	(zTemp0),y
.c056	29 c0		and #$c0			and 	#$C0 						; type info
.c058	09 40		ora #$40			ora 	#$40 						; set reference bit.
.c05a	7a		ply				ply
.c05b	95 10		sta $10,x			sta 	XSControl,x
.c05d	60		rts				rts
.c05e					ExtractTokenisedInteger:
.c05e	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get first token, known to be 40-7F
.c060	29 3f		and #$3f			and 	#$3F 						; mask off upper bits
.c062	95 18		sta $18,x			sta 	XSNumber0,x 				; initial value.
.c064	74 20		stz $20,x			stz 	XSNumber1,x
.c066	74 28		stz $28,x			stz 	XSNumber2,x
.c068	74 30		stz $30,x			stz 	XSNumber3,x
.c06a	74 10		stz $10,x			stz 	XSControl,x 				; integer constant
.c06c					_ETConstant:
.c06c	c8		iny				iny 								; look at next
.c06d	b1 3a		lda ($3a),y			lda 	(CodePtr),y
.c06f	29 c0		and #$c0			and 	#$C0 						; is it $40..$7F
.c071	c9 40		cmp #$40			cmp 	#$40
.c073	d0 2e		bne $c0a3			bne 	_ETExit
.c075	b5 30		lda $30,x			lda 	XSNumber3,x 				; save the upper byte.
.c077	48		pha				pha
.c078	b5 28		lda $28,x			lda 	XSNumber2,x 				; multiply old by 256
.c07a	95 30		sta $30,x			sta 	XSNumber3,x
.c07c	b5 20		lda $20,x			lda 	XSNumber1,x
.c07e	95 28		sta $28,x			sta 	XSNumber2,x
.c080	b5 18		lda $18,x			lda 	XSNumber0,x
.c082	95 20		sta $20,x			sta 	XSNumber1,x
.c084	74 18		stz $18,x			stz 	XSNumber0,x
.c086	68		pla				pla 								; old MS Byte
.c087	4a		lsr a				lsr 	a 							; shift right twice
.c088	76 30		ror $30,x			ror 	XSNumber3,x
.c08a	76 28		ror $28,x			ror 	XSNumber2,x
.c08c	76 20		ror $20,x			ror 	XSNumber1,x
.c08e	76 18		ror $18,x			ror 	XSNumber0,x
.c090	4a		lsr a				lsr 	a
.c091	76 30		ror $30,x			ror 	XSNumber3,x
.c093	76 28		ror $28,x			ror 	XSNumber2,x
.c095	76 20		ror $20,x			ror 	XSNumber1,x
.c097	76 18		ror $18,x			ror 	XSNumber0,x
.c099	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; or the lower 6 bits in.
.c09b	29 3f		and #$3f			and 	#$3F
.c09d	15 18		ora $18,x			ora 	XSNumber0,x
.c09f	95 18		sta $18,x			sta 	XSNumber0,x
.c0a1	80 c9		bra $c06c			bra 	_ETConstant
.c0a3					_ETExit:
.c0a3	60		rts				rts
.c0a4					CheckFollowingDecimal:
.c0a4	b1 3a		lda ($3a),y			lda 	(CodePtr),y 				; what follows ?
.c0a6	c9 c3		cmp #$c3			cmp 	#KWD_SYS_DEC 				; decimal ?
.c0a8	d0 14		bne $c0be			bne 	_CFDExit
.c0aa	98		tya				tya
.c0ab	1a		inc a				inc 	a
.c0ac	38		sec				sec
.c0ad	65 3a		adc $3a				adc 	CodePtr
.c0af	8d 08 ff	sta $ff08			sta 	ControlPort+8 				; param slot 2 = address of decimal data.
.c0b2	a5 3b		lda $3b				lda 	CodePtr+1
.c0b4	69 00		adc #$00			adc 	#0
.c0b6	8d 09 ff	sta $ff09			sta 	ControlPort+9
.c0b9	a9 20		lda #$20			lda 	#32 						; decimal expand code.
.c0bb	20 bf c0	jsr $c0bf			jsr 	DoMathCommand
.c0be					_CFDExit:
.c0be	60		rts				rts
.c0bf					DoMathCommand:
.c0bf	48		pha				pha
.c0c0	20 f4 ff	jsr $fff4		jsr 	WaitMessage
.c0c3	8d 01 ff	sta $ff01			sta 	ControlPort+1
.c0c6	8a		txa				txa
.c0c7	18		clc				clc
.c0c8	69 10		adc #$10			adc 	#XSStack & $FF
.c0ca	8d 04 ff	sta $ff04			sta 	ControlPort+4
.c0cd	a9 00		lda #$00			lda 	#XSStack >> 8
.c0cf	69 00		adc #$00			adc 	#0
.c0d1	8d 05 ff	sta $ff05			sta 	ControlPort+5
.c0d4	a9 08		lda #$08			lda 	#8
.c0d6	8d 06 ff	sta $ff06			sta 	ControlPort+6
.c0d9	a9 04		lda #$04			lda 	#4
.c0db	8d 00 ff	sta $ff00			sta 	ControlPort 				; do command
.c0de	20 f4 ff	jsr $fff4		jsr 	WaitMessage
.c0e1	68		pla				pla				; wait for result.
.c0e2	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/generated/kwdtext.asm

.c208					BinaryTokenText:
>c208	01 ab					.byte	$01,$ab                       	; $ 20 +
>c20a	01 ad					.byte	$01,$ad                       	; $ 21 -
>c20c	01 aa					.byte	$01,$aa                       	; $ 22 *
>c20e	01 af					.byte	$01,$af                       	; $ 23 /
>c210	02 3e be				.byte	$02,$3e,$be                   	; $ 24 >>
>c213	02 3c bc				.byte	$02,$3c,$bc                   	; $ 25 <<
>c216	01 a5					.byte	$01,$a5                       	; $ 26 %
>c218	01 dc					.byte	$01,$dc                       	; $ 27 \
>c21a	01 a6					.byte	$01,$a6                       	; $ 28 &
>c21c	01 fc					.byte	$01,$fc                       	; $ 29 |
>c21e	01 de					.byte	$01,$de                       	; $ 2a ^
>c220	01 be					.byte	$01,$be                       	; $ 2b >
>c222	02 3e bd				.byte	$02,$3e,$bd                   	; $ 2c >=
>c225	01 bc					.byte	$01,$bc                       	; $ 2d <
>c227	02 3c bd				.byte	$02,$3c,$bd                   	; $ 2e <=
>c22a	02 3c be				.byte	$02,$3c,$be                   	; $ 2f <>
>c22d	01 bd					.byte	$01,$bd                       	; $ 30 =
>c22f	01 a1					.byte	$01,$a1                       	; $ 31 !
>c231	01 bf					.byte	$01,$bf                       	; $ 32 ?
>c233	ff					.byte	$FF
.c234					BaseTokenText:
>c234	00					.byte	$00                           	; $ 80
>c235	01 a4					.byte	$01,$a4                       	; $ 81 $
>c237	01 a8					.byte	$01,$a8                       	; $ 82 (
>c239	05 52 41 4e 44 a8			.byte	$05,$52,$41,$4e,$44,$a8       	; $ 83 RAND(
>c23f	04 52 4e 44 a8				.byte	$04,$52,$4e,$44,$a8           	; $ 84 RND(
>c244	06 49 53 56 41 4c a8			.byte	$06,$49,$53,$56,$41,$4c,$a8   	; $ 85 ISVAL(
>c24b	05 46 52 41 43 a8			.byte	$05,$46,$52,$41,$43,$a8       	; $ 86 FRAC(
>c251	04 49 4e 54 a8				.byte	$04,$49,$4e,$54,$a8           	; $ 87 INT(
>c256	04 54 49 4d c5				.byte	$04,$54,$49,$4d,$c5           	; $ 88 TIME
>c25b	06 45 56 45 4e 54 a8			.byte	$06,$45,$56,$45,$4e,$54,$a8   	; $ 89 EVENT(
>c262	07 49 4e 4b 45 59 24 a8			.byte	$07,$49,$4e,$4b,$45,$59,$24,$a8	; $ 8a INKEY$(
>c26a	04 41 53 43 a8				.byte	$04,$41,$53,$43,$a8           	; $ 8b ASC(
>c26f	05 43 48 52 24 a8			.byte	$05,$43,$48,$52,$24,$a8       	; $ 8c CHR$(
>c275	04 53 51 52 a8				.byte	$04,$53,$51,$52,$a8           	; $ 8d SQR(
>c27a	04 4c 45 4e a8				.byte	$04,$4c,$45,$4e,$a8           	; $ 8e LEN(
>c27f	04 41 42 53 a8				.byte	$04,$41,$42,$53,$a8           	; $ 8f ABS(
>c284	04 53 47 4e a8				.byte	$04,$53,$47,$4e,$a8           	; $ 90 SGN(
>c289	04 56 41 4c a8				.byte	$04,$56,$41,$4c,$a8           	; $ 91 VAL(
>c28e	05 53 54 52 24 a8			.byte	$05,$53,$54,$52,$24,$a8       	; $ 92 STR$(
>c294	05 4d 49 44 24 a8			.byte	$05,$4d,$49,$44,$24,$a8       	; $ 93 MID$(
>c29a	06 4c 45 46 54 24 a8			.byte	$06,$4c,$45,$46,$54,$24,$a8   	; $ 94 LEFT$(
>c2a1	07 52 49 47 48 54 24 a8			.byte	$07,$52,$49,$47,$48,$54,$24,$a8	; $ 95 RIGHT$(
>c2a9	04 53 49 4e a8				.byte	$04,$53,$49,$4e,$a8           	; $ 96 SIN(
>c2ae	04 43 4f 53 a8				.byte	$04,$43,$4f,$53,$a8           	; $ 97 COS(
>c2b3	04 54 41 4e a8				.byte	$04,$54,$41,$4e,$a8           	; $ 98 TAN(
>c2b8	05 41 54 41 4e a8			.byte	$05,$41,$54,$41,$4e,$a8       	; $ 99 ATAN(
>c2be	05 53 51 52 54 a8			.byte	$05,$53,$51,$52,$54,$a8       	; $ 9a SQRT(
>c2c4	04 4c 4f 47 a8				.byte	$04,$4c,$4f,$47,$a8           	; $ 9b LOG(
>c2c9	04 45 58 50 a8				.byte	$04,$45,$58,$50,$a8           	; $ 9c EXP(
>c2ce	04 4b 45 59 a8				.byte	$04,$4b,$45,$59,$a8           	; $ 9d KEY(
>c2d3	00					.byte	$00                           	; $ 9e
>c2d4	00					.byte	$00                           	; $ 9f
>c2d5	00					.byte	$00                           	; $ a0
>c2d6	00					.byte	$00                           	; $ a1
>c2d7	00					.byte	$00                           	; $ a2
>c2d8	00					.byte	$00                           	; $ a3
>c2d9	00					.byte	$00                           	; $ a4
>c2da	00					.byte	$00                           	; $ a5
>c2db	00					.byte	$00                           	; $ a6
>c2dc	00					.byte	$00                           	; $ a7
>c2dd	00					.byte	$00                           	; $ a8
>c2de	00					.byte	$00                           	; $ a9
>c2df	00					.byte	$00                           	; $ aa
>c2e0	00					.byte	$00                           	; $ ab
>c2e1	00					.byte	$00                           	; $ ac
>c2e2	00					.byte	$00                           	; $ ad
>c2e3	00					.byte	$00                           	; $ ae
>c2e4	00					.byte	$00                           	; $ af
>c2e5	05 57 48 49 4c c5			.byte	$05,$57,$48,$49,$4c,$c5       	; $ b0 WHILE
>c2eb	04 57 45 4e c4				.byte	$04,$57,$45,$4e,$c4           	; $ b1 WEND
>c2f0	02 49 c6				.byte	$02,$49,$c6                   	; $ b2 IF
>c2f3	05 45 4e 44 49 c6			.byte	$05,$45,$4e,$44,$49,$c6       	; $ b3 ENDIF
>c2f9	02 44 cf				.byte	$02,$44,$cf                   	; $ b4 DO
>c2fc	04 4c 4f 4f d0				.byte	$04,$4c,$4f,$4f,$d0           	; $ b5 LOOP
>c301	06 52 45 50 45 41 d4			.byte	$06,$52,$45,$50,$45,$41,$d4   	; $ b6 REPEAT
>c308	05 55 4e 54 49 cc			.byte	$05,$55,$4e,$54,$49,$cc       	; $ b7 UNTIL
>c30e	04 50 52 4f c3				.byte	$04,$50,$52,$4f,$c3           	; $ b8 PROC
>c313	07 45 4e 44 50 52 4f c3			.byte	$07,$45,$4e,$44,$50,$52,$4f,$c3	; $ b9 ENDPROC
>c31b	03 46 4f d2				.byte	$03,$46,$4f,$d2               	; $ ba FOR
>c31f	04 4e 45 58 d4				.byte	$04,$4e,$45,$58,$d4           	; $ bb NEXT
>c324	04 43 41 53 c5				.byte	$04,$43,$41,$53,$c5           	; $ bc CASE
>c329	07 45 4e 44 43 41 53 c5			.byte	$07,$45,$4e,$44,$43,$41,$53,$c5	; $ bd ENDCASE
>c331	00					.byte	$00                           	; $ be
>c332	04 54 48 45 ce				.byte	$04,$54,$48,$45,$ce           	; $ bf THEN
>c337	00					.byte	$00                           	; $ c0
>c338	00					.byte	$00                           	; $ c1
>c339	00					.byte	$00                           	; $ c2
>c33a	00					.byte	$00                           	; $ c3
>c33b	02 54 cf				.byte	$02,$54,$cf                   	; $ c4 TO
>c33e	03 4c 45 d4				.byte	$03,$4c,$45,$d4               	; $ c5 LET
>c342	05 50 52 49 4e d4			.byte	$05,$50,$52,$49,$4e,$d4       	; $ c6 PRINT
>c348	05 49 4e 50 55 d4			.byte	$05,$49,$4e,$50,$55,$d4       	; $ c7 INPUT
>c34e	04 43 41 4c cc				.byte	$04,$43,$41,$4c,$cc           	; $ c8 CALL
>c353	03 53 59 d3				.byte	$03,$53,$59,$d3               	; $ c9 SYS
>c357	04 45 58 49 d4				.byte	$04,$45,$58,$49,$d4           	; $ ca EXIT
>c35c	01 ac					.byte	$01,$ac                       	; $ cb ,
>c35e	01 bb					.byte	$01,$bb                       	; $ cc ;
>c360	01 ba					.byte	$01,$ba                       	; $ cd :
>c362	01 a7					.byte	$01,$a7                       	; $ ce '
>c364	01 a9					.byte	$01,$a9                       	; $ cf )
>c366	04 52 45 41 c4				.byte	$04,$52,$45,$41,$c4           	; $ d0 READ
>c36b	04 44 41 54 c1				.byte	$04,$44,$41,$54,$c1           	; $ d1 DATA
>c370	01 db					.byte	$01,$db                       	; $ d2 [
>c372	01 dd					.byte	$01,$dd                       	; $ d3 ]
>c374	01 a3					.byte	$01,$a3                       	; $ d4 #
>c376	01 ae					.byte	$01,$ae                       	; $ d5 .
>c378	04 45 4c 53 c5				.byte	$04,$45,$4c,$53,$c5           	; $ d6 ELSE
>c37d	04 57 48 45 ce				.byte	$04,$57,$48,$45,$ce           	; $ d7 WHEN
>c382	06 44 4f 57 4e 54 cf			.byte	$06,$44,$4f,$57,$4e,$54,$cf   	; $ d8 DOWNTO
>c389	ff					.byte	$FF
.c38a					Shift1TokenText:
>c38a	05 43 4c 45 41 d2			.byte	$05,$43,$4c,$45,$41,$d2       	; $100 CLEAR
>c390	03 4e 45 d7				.byte	$03,$4e,$45,$d7               	; $101 NEW
>c394	03 52 55 ce				.byte	$03,$52,$55,$ce               	; $102 RUN
>c398	04 53 54 4f d0				.byte	$04,$53,$54,$4f,$d0           	; $103 STOP
>c39d	03 45 4e c4				.byte	$03,$45,$4e,$c4               	; $104 END
>c3a1	06 41 53 53 45 52 d4			.byte	$06,$41,$53,$53,$45,$52,$d4   	; $105 ASSERT
>c3a8	04 4c 49 53 d4				.byte	$04,$4c,$49,$53,$d4           	; $106 LIST
>c3ad	04 53 41 56 c5				.byte	$04,$53,$41,$56,$c5           	; $107 SAVE
>c3b2	04 4c 4f 41 c4				.byte	$04,$4c,$4f,$41,$c4           	; $108 LOAD
>c3b7	05 47 4f 53 55 c2			.byte	$05,$47,$4f,$53,$55,$c2       	; $109 GOSUB
>c3bd	04 47 4f 54 cf				.byte	$04,$47,$4f,$54,$cf           	; $10a GOTO
>c3c2	06 52 45 54 55 52 ce			.byte	$06,$52,$45,$54,$55,$52,$ce   	; $10b RETURN
>c3c9	07 52 45 53 54 4f 52 c5			.byte	$07,$52,$45,$53,$54,$4f,$52,$c5	; $10c RESTORE
>c3d1	03 44 49 cd				.byte	$03,$44,$49,$cd               	; $10d DIM
>c3d5	ff					.byte	$FF
.c3d6					BinaryPrecedence:
>c3d6	03					.byte	3		; +
>c3d7	03					.byte	3		; -
>c3d8	04					.byte	4		; *
>c3d9	04					.byte	4		; /
>c3da	04					.byte	4		; >>
>c3db	04					.byte	4		; <<
>c3dc	04					.byte	4		; %
>c3dd	04					.byte	4		; \
>c3de	01					.byte	1		; &
>c3df	01					.byte	1		; |
>c3e0	01					.byte	1		; ^
>c3e1	02					.byte	2		; >
>c3e2	02					.byte	2		; >=
>c3e3	02					.byte	2		; <
>c3e4	02					.byte	2		; <=
>c3e5	02					.byte	2		; <>
>c3e6	02					.byte	2		; =
>c3e7	05					.byte	5		; !
>c3e8	05					.byte	5		; ?

;******  Return to file: _include.inc


;******  Return to file: basic.asm

>c0e3							.align 	256
.c100					Program:
>c100	01 0a 00 00 00 00 80 4e				.binary "build/tokenised.dat"
>c108	41 4d c5 00 00 00 00 00 00 00 00 00 00 00 00 00
>c118	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>c1f8	00 00 00 00 00 00 00 00 07 64 00 c6 00 02 c0 00

;******  End of listing
