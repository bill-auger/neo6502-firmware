
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -q -b --mr65c02 -Wall -L build/basic.lst -o build/basic.bin basic.asm
; Tue Dec  5 17:31:13 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

.c000	4c 03 c0	jmp $c003	boot:	jmp 	ColdStart
.c003					ColdStart:
.c003	4c 0e c5	jmp $c50e			jmp 	Command_RUN

;******  Processing file: _include.inc


;******  Processing file: sources/00data/00data_config.inc

=$c000							HIGHMEMORY = $C000
=8							STACKPAGES = 8

;******  Return to file: _include.inc


;******  Processing file: sources/00data/01data.inc

=65280					ControlCommand = ControlPort+0
=65281					ControlFunction = ControlPort+1
=65282					ControlError = ControlPort+2
=65283					ControlStatus = ControlPort+3
=8					StackSize = 8
=$c0					XS_TYPEMASK = $C0
=$80					XS_TYPEBIT = $80
=$80					XS_STRING = $80
=$20					XS_ISREFERENCE = $20
=$10					XS_ISBYTEREFERENCE = $10
.0010					XSStack:
.0010					XSControl:
>0010							.fill 	StackSize
.0018					XSNumber0:
>0018							.fill 	StackSize
.0020					XSNumber1:
>0020							.fill 	StackSize
.0028					XSNumber2:
>0028							.fill 	StackSize
.0030					XSNumber3:
>0030							.fill 	StackSize
.0038					CodePtr:
>0038							.fill 	2
.003a					basicStack:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zTemp0:
>003e							.fill 	2
.0200					ERRLine:
>0200							.fill 	2
.0202					InputFlag:
>0202							.fill 	1
.0203					stringInitialised:
>0203							.fill 	1
.0204					stringMemory:
>0204							.fill 	2
.0206					stringTempPointer:
>0206							.fill 	2
.0208					basicStackEnd:
>0208							.fill 	1

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/binary.inc


;******  Return to file: _include.inc


;******  Processing file: sources/generated/errors.inc


;******  Return to file: _include.inc


;******  Processing file: sources/generated/kwdconst.inc

=$20					KWD_PLUS                           = $20 ; +
=$21					KWD_MINUS                          = $21 ; -
=$22					KWD_ASTERISK                       = $22 ; *
=$23					KWD_SLASH                          = $23 ; /
=$24					KWD_GREATERGREATER                 = $24 ; >>
=$25					KWD_LESSLESS                       = $25 ; <<
=$26					KWD_PERCENT                        = $26 ; %
=$27					KWD_BACKSLASH                      = $27 ; \
=$28					KWD_AMPERSAND                      = $28 ; &
=$29					KWD_VBAR                           = $29 ; |
=$2a					KWD_HAT                            = $2a ; ^
=$2b					KWD_GREATER                        = $2b ; >
=$2c					KWD_GREATEREQUAL                   = $2c ; >=
=$2d					KWD_LESS                           = $2d ; <
=$2e					KWD_LESSEQUAL                      = $2e ; <=
=$2f					KWD_LESSGREATER                    = $2f ; <>
=$30					KWD_EQUAL                          = $30 ; =
=$31					KWD_PLING                          = $31 ; !
=$32					KWD_QMARK                          = $32 ; ?
=$80					KWD_SYS_STR                        = $80 ; !!str
=$81					KWD_DOLLAR                         = $81 ; $
=$82					KWD_LPAREN                         = $82 ; (
=$83					KWD_RANDLPAREN                     = $83 ; rand(
=$84					KWD_RNDLPAREN                      = $84 ; rnd(
=$85					KWD_ISVALLPAREN                    = $85 ; isval(
=$86					KWD_INTLPAREN                      = $86 ; int(
=$87					KWD_TIME                           = $87 ; time
=$88					KWD_EVENTLPAREN                    = $88 ; event(
=$89					KWD_INKEYDOLLARLPAREN              = $89 ; inkey$(
=$8a					KWD_ASCLPAREN                      = $8a ; asc(
=$8b					KWD_CHRDOLLARLPAREN                = $8b ; chr$(
=$8c					KWD_SQRLPAREN                      = $8c ; sqr(
=$8d					KWD_LENLPAREN                      = $8d ; len(
=$8e					KWD_ABSLPAREN                      = $8e ; abs(
=$8f					KWD_SGNLPAREN                      = $8f ; sgn(
=$90					KWD_VALLPAREN                      = $90 ; val(
=$91					KWD_STRDOLLARLPAREN                = $91 ; str$(
=$92					KWD_MIDDOLLARLPAREN                = $92 ; mid$(
=$93					KWD_LEFTDOLLARLPAREN               = $93 ; left$(
=$94					KWD_RIGHTDOLLARLPAREN              = $94 ; right$(
=$95					KWD_SINLPAREN                      = $95 ; sin(
=$96					KWD_COSLPAREN                      = $96 ; cos(
=$97					KWD_TANLPAREN                      = $97 ; tan(
=$98					KWD_ATANLPAREN                     = $98 ; atan(
=$99					KWD_LOGLPAREN                      = $99 ; log(
=$9a					KWD_EXPLPAREN                      = $9a ; exp(
=$9b					KWD_KEYLPAREN                      = $9b ; key(
=$b0					KWD_WHILE                          = $b0 ; while
=$b1					KWD_WEND                           = $b1 ; wend
=$b2					KWD_IF                             = $b2 ; if
=$b3					KWD_ENDIF                          = $b3 ; endif
=$b4					KWD_DO                             = $b4 ; do
=$b5					KWD_LOOP                           = $b5 ; loop
=$b6					KWD_REPEAT                         = $b6 ; repeat
=$b7					KWD_UNTIL                          = $b7 ; until
=$b8					KWD_PROC                           = $b8 ; proc
=$b9					KWD_ENDPROC                        = $b9 ; endproc
=$ba					KWD_FOR                            = $ba ; for
=$bb					KWD_NEXT                           = $bb ; next
=$bc					KWD_CASE                           = $bc ; case
=$bd					KWD_ENDCASE                        = $bd ; endcase
=$be					KWD_SYS_UN1                        = $be ; !!un1
=$bf					KWD_THEN                           = $bf ; then
=$c0					KWD_SYS_END                        = $c0 ; !!end
=$c1					KWD_SYS_SH1                        = $c1 ; !!sh1
=$c2					KWD_SYS_SH2                        = $c2 ; !!sh2
=$c3					KWD_SYS_DEC                        = $c3 ; !!dec
=$c4					KWD_TO                             = $c4 ; to
=$c5					KWD_LET                            = $c5 ; let
=$c6					KWD_PRINT                          = $c6 ; print
=$c7					KWD_INPUT                          = $c7 ; input
=$c8					KWD_CALL                           = $c8 ; call
=$c9					KWD_SYS                            = $c9 ; sys
=$ca					KWD_EXIT                           = $ca ; exit
=$cb					KWD_COMMA                          = $cb ; ,
=$cc					KWD_SEMICOLON                      = $cc ; ;
=$cd					KWD_COLON                          = $cd ; :
=$ce					KWD_SQUOTE                         = $ce ; '
=$cf					KWD_RPAREN                         = $cf ; )
=$d0					KWD_READ                           = $d0 ; read
=$d1					KWD_DATA                           = $d1 ; data
=$d2					KWD_LSQ                            = $d2 ; [
=$d3					KWD_RSQ                            = $d3 ; ]
=$d4					KWD_HASH                           = $d4 ; #
=$d5					KWD_PERIOD                         = $d5 ; .
=$d6					KWD_ELSE                           = $d6 ; else
=$d7					KWD_WHEN                           = $d7 ; when
=$d8					KWD_DOWNTO                         = $d8 ; downto
=$180					KWD_CLEAR                          = $180 ; clear
=$181					KWD_NEW                            = $181 ; new
=$182					KWD_RUN                            = $182 ; run
=$183					KWD_STOP                           = $183 ; stop
=$184					KWD_END                            = $184 ; end
=$185					KWD_ASSERT                         = $185 ; assert
=$186					KWD_LIST                           = $186 ; list
=$187					KWD_SAVE                           = $187 ; save
=$188					KWD_LOAD                           = $188 ; load
=$189					KWD_GOSUB                          = $189 ; gosub
=$18a					KWD_GOTO                           = $18a ; goto
=$18b					KWD_RETURN                         = $18b ; return
=$18c					KWD_RESTORE                        = $18c ; restore
=$18d					KWD_DIM                            = $18d ; dim

;******  Return to file: _include.inc


;******  Processing file: sources/generated/neo6502.inc

=$ff00					ControlPort = $ff00
=$ffee					ReadCharacter = $ffee
=$fff1					WriteCharacter = $fff1
=$fff4					WaitMessage = $fff4
=$fff7					SendMessage = $fff7

;******  Return to file: _include.inc


;******  Processing file: sources/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$39					STK_FOR = $39
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/compare.asm

.c006					CMPReturnTrue:
.c006	a9 ff		lda #$ff			lda 	#$FF
.c008	80 02		bra $c00c			bra 	CMPSetTOS
.c00a					CMPReturnFalse:
.c00a	a9 00		lda #$00			lda 	#0
.c00c					CMPSetTOS:
.c00c	95 30		sta $30,x			sta 	XSNumber3,x
.c00e	95 28		sta $28,x			sta 	XSNumber2,x
.c010	95 20		sta $20,x			sta 	XSNumber1,x
.c012	95 18		sta $18,x			sta 	XSNumber0,x
.c014	74 10		stz $10,x			stz 	XSControl,x
.c016	4c f2 c1	jmp $c1f2			jmp 	EXPRMainLoop
.c019					CMPCompareEqual:
.c019	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c01c	c9 00		cmp #$00			cmp 	#0
.c01e	f0 e6		beq $c006			beq 	CMPReturnTrue
.c020	80 e8		bra $c00a			bra 	CMPReturnFalse
.c022					CMPCompareLess:
.c022	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c025	c9 ff		cmp #$ff			cmp 	#$FF
.c027	f0 dd		beq $c006			beq 	CMPReturnTrue
.c029	80 df		bra $c00a			bra 	CMPReturnFalse
.c02b					CMPCompareGreater:
.c02b	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c02e	c9 01		cmp #$01			cmp 	#1
.c030	f0 d4		beq $c006			beq 	CMPReturnTrue
.c032	80 d6		bra $c00a			bra 	CMPReturnFalse
.c034					CMPCompareNotEqual:
.c034	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c037	c9 00		cmp #$00			cmp 	#0
.c039	d0 cb		bne $c006			bne 	CMPReturnTrue
.c03b	80 cd		bra $c00a			bra 	CMPReturnFalse
.c03d					CMPCompareLessEqual:
.c03d	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c040	c9 01		cmp #$01			cmp 	#1
.c042	d0 c2		bne $c006			bne 	CMPReturnTrue
.c044	80 c4		bra $c00a			bra 	CMPReturnFalse
.c046					CMPCompareGreaterEqual:
.c046	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c049	c9 ff		cmp #$ff			cmp 	#$FF
.c04b	d0 b9		bne $c006			bne 	CMPReturnTrue
.c04d	80 bb		bra $c00a			bra 	CMPReturnFalse
.c04f					CMPCompareBaseCode:
.c04f	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes 		; dereference, check types match.
.c052	30 0d		bmi $c061			bmi 	_CMPTypeError
.c054	b5 10		lda $10,x			lda 	XSControl,x
.c056	30 0e		bmi $c066			bmi 	_CMPString 					; string ?
.c058	a9 06		lda #$06			lda 	#6 							; use coprocessor to compare
.c05a	20 64 c3	jsr $c364			jsr 	DOMathCommand
.c05d	ad 03 ff	lda $ff03			lda 	ControlStatus 				; get result.
.c060	60		rts				rts
.c061					_CMPTypeError:
.c061	a9 02		lda #$02		lda	#2
.c063	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c066					_CMPString:
>c066	03						.byte 	3 			; UNIMPLEMENTED

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/mathint.asm

.c067					BinaryAnd:
.c067	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c06a	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c06d	b5 18		lda $18,x			lda 	XSNumber0,x
.c06f	35 19		and $19,x			and 		XSNumber0+1,x
.c071	95 18		sta $18,x			sta 	XSNumber0,x
.c073	b5 20		lda $20,x			lda 	XSNumber1,x
.c075	35 21		and $21,x			and 		XSNumber1+1,x
.c077	95 20		sta $20,x			sta 	XSNumber1,x
.c079	b5 28		lda $28,x			lda 	XSNumber2,x
.c07b	35 29		and $29,x			and 		XSNumber2+1,x
.c07d	95 28		sta $28,x			sta 	XSNumber2,x
.c07f	b5 30		lda $30,x			lda 	XSNumber3,x
.c081	35 31		and $31,x			and 		XSNumber3+1,x
.c083	95 30		sta $30,x			sta 	XSNumber3,x
.c085	4c f2 c1	jmp $c1f2			jmp 	EXPRMainLoop
.c088					BinaryXor:
.c088	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c08b	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c08e	b5 18		lda $18,x			lda 	XSNumber0,x
.c090	55 19		eor $19,x			eor 		XSNumber0+1,x
.c092	95 18		sta $18,x			sta 	XSNumber0,x
.c094	b5 20		lda $20,x			lda 	XSNumber1,x
.c096	55 21		eor $21,x			eor 		XSNumber1+1,x
.c098	95 20		sta $20,x			sta 	XSNumber1,x
.c09a	b5 28		lda $28,x			lda 	XSNumber2,x
.c09c	55 29		eor $29,x			eor 		XSNumber2+1,x
.c09e	95 28		sta $28,x			sta 	XSNumber2,x
.c0a0	b5 30		lda $30,x			lda 	XSNumber3,x
.c0a2	55 31		eor $31,x			eor 		XSNumber3+1,x
.c0a4	95 30		sta $30,x			sta 	XSNumber3,x
.c0a6	4c f2 c1	jmp $c1f2			jmp 	EXPRMainLoop
.c0a9					BinaryOr:
.c0a9	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c0ac	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c0af	b5 18		lda $18,x			lda 	XSNumber0,x
.c0b1	15 19		ora $19,x			ora 		XSNumber0+1,x
.c0b3	95 18		sta $18,x			sta 	XSNumber0,x
.c0b5	b5 20		lda $20,x			lda 	XSNumber1,x
.c0b7	15 21		ora $21,x			ora 		XSNumber1+1,x
.c0b9	95 20		sta $20,x			sta 	XSNumber1,x
.c0bb	b5 28		lda $28,x			lda 	XSNumber2,x
.c0bd	15 29		ora $29,x			ora 		XSNumber2+1,x
.c0bf	95 28		sta $28,x			sta 	XSNumber2,x
.c0c1	b5 30		lda $30,x			lda 	XSNumber3,x
.c0c3	15 31		ora $31,x			ora 		XSNumber3+1,x
.c0c5	95 30		sta $30,x			sta 	XSNumber3,x
.c0c7	4c f2 c1	jmp $c1f2			jmp 	EXPRMainLoop
.c0ca					BinaryShiftLeft:
.c0ca	38		sec				sec
.c0cb	80 01		bra $c0ce			bra 	BinaryShift
.c0cd					BinaryShiftRight:
.c0cd	18		clc				clc
.c0ce					BinaryShift:
.c0ce	08		php				php									; save direction, CS left CC right.
.c0cf	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c0d2	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c0d5	b5 19		lda $19,x			lda 	XSNumber0+1,x 				; if shift >=32 will be zero
.c0d7	29 e0		and #$e0			and 	#$E0
.c0d9	15 21		ora $21,x			ora 	XSNumber1+1,x
.c0db	15 22		ora $22,x			ora 	XSNumber1+2,x
.c0dd	15 23		ora $23,x			ora 	XSNumber1+3,x
.c0df	d0 20		bne $c101			bne 	_BSIsZero
.c0e1	b5 19		lda $19,x			lda 	XSNumber0+1,x 				; check zero at start
.c0e3	f0 24		beq $c109			beq 	_BSExit
.c0e5					_BSLoop:
.c0e5	28		plp				plp 								; access diection
.c0e6	08		php				php
.c0e7	b0 0a		bcs $c0f3			bcs 	_BSLeft
.c0e9	56 30		lsr $30,x			lsr 	XSNumber3,x 				; shift right
.c0eb	76 28		ror $28,x			ror 	XSNumber2,x
.c0ed	76 20		ror $20,x			ror 	XSNumber1,x
.c0ef	76 18		ror $18,x			ror 	XSNumber0,x
.c0f1	80 08		bra $c0fb			bra 	_BSExitLoop
.c0f3					_BSLeft:
.c0f3	16 18		asl $18,x			asl 	XSNumber0,x 				; shift left
.c0f5	36 20		rol $20,x			rol 	XSNumber1,x
.c0f7	36 28		rol $28,x			rol 	XSNumber2,x
.c0f9	36 30		rol $30,x			rol 	XSNumber3,x
.c0fb					_BSExitLoop:
.c0fb	d6 19		dec $19,x			dec 	XSNumber0+1,x 				; do that many times
.c0fd	d0 e6		bne $c0e5			bne 	_BSLoop
.c0ff	80 08		bra $c109			bra 	_BSExit
.c101					_BSIsZero:
.c101	74 18		stz $18,x			stz 	XSNumber0,x					; return zero.
.c103	74 20		stz $20,x			stz 	XSNumber1,x
.c105	74 28		stz $28,x			stz 	XSNumber2,x
.c107	74 30		stz $30,x			stz 	XSNumber3,x
.c109					_BSExit:
.c109	28		plp				plp 								; throw direction.
.c10a	4c f2 c1	jmp $c1f2			jmp 	EXPRMainLoop
.c10d					BinRefWord:
.c10d	a9 20		lda #$20			lda 	#XS_ISREFERENCE
.c10f	80 02		bra $c113			bra 	BinRefMain
.c111					BinRefByte:
.c111	a9 30		lda #$30			lda 	#XS_ISREFERENCE|XS_ISBYTEREFERENCE
.c113					BinRefMain:
.c113	48		pha				pha
.c114	18		clc				clc
.c115	b5 18		lda $18,x			lda 	XSNumber0,x
.c117	75 19		adc $19,x			adc 		XSNumber0+1,x
.c119	95 18		sta $18,x			sta 	XSNumber0,x
.c11b	b5 20		lda $20,x			lda 	XSNumber1,x
.c11d	75 21		adc $21,x			adc 		XSNumber1+1,x
.c11f	95 20		sta $20,x			sta 	XSNumber1,x
.c121	b5 28		lda $28,x			lda 	XSNumber2,x
.c123	75 29		adc $29,x			adc 		XSNumber2+1,x
.c125	95 28		sta $28,x			sta 	XSNumber2,x
.c127	b5 30		lda $30,x			lda 	XSNumber3,x
.c129	75 31		adc $31,x			adc 		XSNumber3+1,x
.c12b	95 30		sta $30,x			sta 	XSNumber3,x
.c12d	68		pla				pla
.c12e	95 10		sta $10,x			sta 	XSControl,x
.c130	4c f2 c1	jmp $c1f2			jmp 	EXPRMainLoop
.c133					MICheckBothInteger:
.c133	b5 10		lda $10,x			lda 	XSControl,x
.c135	15 10		ora $10,x			ora 	XSControl,x
.c137	29 c0		and #$c0			and 	#$C0
.c139	d0 01		bne $c13c			bne 	_MICBIType
.c13b	60		rts				rts
.c13c					_MICBIType:
.c13c	a9 02		lda #$02		lda	#2
.c13e	4c 20 ca	jmp $ca20		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/mathstd.asm

.c141					DereferenceCheckTypes:
.c141	20 ad c1	jsr $c1ad			jsr 	DereferenceTOS 				; dereference first
.c144	e8		inx				inx
.c145	20 ad c1	jsr $c1ad			jsr 	DereferenceTOS 				; dereference second
.c148	ca		dex				dex
.c149	b5 10		lda $10,x			lda 	XSControl,x 				; eor top bits, so non zero if different.
.c14b	55 11		eor $11,x			eor 	XSControl+1,x
.c14d	30 03		bmi $c152			bmi 	DRCType 					; type mismatch.
.c14f	34 10		bit $10,x			bit 	XSControl,x 				; and set NV from the actual type
.c151	60		rts				rts
.c152					DRCType:
.c152	a9 02		lda #$02		lda	#2
.c154	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c157					BinaryAdd:
.c157	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c15a	30 f6		bmi $c152			bmi 	DRCType
.c15c	a9 00		lda #$00			lda 	#0
.c15e	20 64 c3	jsr $c364			jsr 	DoMathCommand
.c161	4c f2 c1	jmp $c1f2			jmp 	EXPRMainLoop
.c164					BinaryMinus:
.c164	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c167	30 e9		bmi $c152			bmi 	DRCType
.c169	a9 01		lda #$01			lda 	#1
.c16b	20 64 c3	jsr $c364			jsr 	DoMathCommand
.c16e	4c f2 c1	jmp $c1f2			jmp 	EXPRMainLoop
.c171					BinaryTimes:
.c171	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c174	30 dc		bmi $c152			bmi 	DRCType
.c176	a9 02		lda #$02			lda 	#2
.c178	20 64 c3	jsr $c364			jsr 	DoMathCommand
.c17b	4c f2 c1	jmp $c1f2			jmp 	EXPRMainLoop
.c17e					BinaryFDiv:
.c17e	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c181	30 cf		bmi $c152			bmi 	DRCType
.c183	a9 03		lda #$03			lda 	#3
.c185	20 64 c3	jsr $c364			jsr 	DoMathCommand
.c188					BinaryCheckResult:
.c188	ad 02 ff	lda $ff02			lda 	ControlError
.c18b	d0 03		bne $c190			bne 	_BCRError
.c18d	4c f2 c1	jmp $c1f2			jmp 	EXPRMainLoop
.c190					_BCRError:
.c190	a9 03		lda #$03		lda	#3
.c192	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c195					BinaryUDiv:
.c195	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c198	30 b8		bmi $c152			bmi 	DRCType
.c19a	a9 04		lda #$04			lda 	#4
.c19c	20 64 c3	jsr $c364			jsr 	DoMathCommand
.c19f	80 e7		bra $c188			bra 	BinaryCheckResult
.c1a1					BinaryModulus:
.c1a1	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c1a4	30 ac		bmi $c152			bmi 	DRCType
.c1a6	a9 05		lda #$05			lda 	#5
.c1a8	20 64 c3	jsr $c364			jsr 	DoMathCommand
.c1ab	80 db		bra $c188			bra 	BinaryCheckResult

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/dereference.asm

.c1ad					DereferenceTOS:
.c1ad	b5 10		lda $10,x			lda 	XSControl,x 				; check if reference ?
.c1af	29 20		and #$20			and 	#XS_ISREFERENCE
.c1b1	f0 36		beq $c1e9			beq 	_DRTExit 					; no, exit
.c1b3	b5 18		lda $18,x			lda 	XSNumber0,x 				; copy address to zTemp0
.c1b5	85 3e		sta $3e				sta 	zTemp0
.c1b7	b5 20		lda $20,x			lda 	XSNumber1,x
.c1b9	85 3f		sta $3f				sta 	zTemp0+1
.c1bb	b5 10		lda $10,x			lda 	XSControl,x 				; clear reference bits.
.c1bd	48		pha				pha 								; preserve ref bits so we can check byte.
.c1be	29 cf		and #$cf			and 	#$FF-XS_ISREFERENCE-XS_ISBYTEREFERENCE
.c1c0	95 10		sta $10,x			sta 	XSControl,x
.c1c2	68		pla				pla
.c1c3	29 10		and #$10			and 	#XS_ISBYTEREFERENCE
.c1c5	d0 18		bne $c1df			bne 	_DRTByteRef
.c1c7	5a		phy				phy 								; word reference.
.c1c8	b2 3e		lda ($3e)			lda 	(zTemp0)
.c1ca	95 18		sta $18,x			sta 	XSNumber0,x
.c1cc	a0 01		ldy #$01			ldy 	#1
.c1ce	b1 3e		lda ($3e),y			lda 	(zTemp0),y
.c1d0	95 20		sta $20,x			sta 	XSNumber1,x
.c1d2	c8		iny				iny
.c1d3	b1 3e		lda ($3e),y			lda 	(zTemp0),y
.c1d5	95 28		sta $28,x			sta 	XSNumber2,x
.c1d7	c8		iny				iny
.c1d8	b1 3e		lda ($3e),y			lda 	(zTemp0),y
.c1da	95 30		sta $30,x			sta 	XSNumber3,x
.c1dc	7a		ply				ply
.c1dd	80 0a		bra $c1e9			bra 	_DRTExit
.c1df					_DRTByteRef:
.c1df	b2 3e		lda ($3e)			lda 	(zTemp0)
.c1e1	95 18		sta $18,x			sta 	XSNumber0,x
.c1e3	74 20		stz $20,x			stz 	XSNumber1,x
.c1e5	74 28		stz $28,x			stz 	XSNumber2,x
.c1e7	74 30		stz $30,x			stz 	XSNumber3,x
.c1e9					_DRTExit:
.c1e9	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/expression.asm

.c1ea					EXPEvaluateExpressionAt0:
.c1ea	a2 00		ldx #$00			ldx 	#0 							; start from base of stack.
.c1ec					EXPEvaluateExpressionAtX:
.c1ec	a9 00		lda #$00			lda 	#0 							; current precedence is 0.
.c1ee					EXPEvaluateExpressionPrecedenceA:
.c1ee	48		pha				pha		 							; push on stack.
.c1ef	20 73 c2	jsr $c273			jsr 	EvaluateTerm 				; evaluate term at this level.
.c1f2					EXPRMainLoop:
.c1f2	b1 38		lda ($38),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.c1f4	29 e0		and #$e0			and 	#$E0 						; is it $20-$3F, e.g. a binary operator.
.c1f6	c9 20		cmp #$20			cmp 	#$20
.c1f8	d0 2e		bne $c228			bne 	_EEExit
.c1fa	da		phx				phx 			 					; get binary precedence for current operator -> zTemp0+1
.c1fb	b1 38		lda ($38),y			lda 	(codePtr),y 				; get the operator again
.c1fd	aa		tax				tax
.c1fe	bd df c7	lda $c7df,x			lda 	BinaryPrecedence-$20,x 		; get the binary operator precedence.
.c201	85 3f		sta $3f				sta 	zTemp0+1
.c203	fa		plx				plx
.c204	68		pla				pla 								; restore current precedence.
.c205	c5 3f		cmp $3f				cmp 	zTemp0+1 					; if >= operator precedence then exit
.c207	b0 20		bcs $c229			bcs 	_EEExit2
.c209	48		pha				pha 								; save current precedence on the 6502 stack.
.c20a	b1 38		lda ($38),y			lda 	(codePtr),y 				; get the operator back.
.c20c	c8		iny				iny 								; consume operator.
.c20d	48		pha				pha 								; save the operator.
.c20e	a5 3f		lda $3f				lda 	zTemp0+1					; get precedence of operator
.c210	e8		inx				inx 								; space for it on the stack and do the RHS.
.c211	20 ee c1	jsr $c1ee			jsr 	EXPEvaluateExpressionPrecedenceA
.c214	ca		dex				dex 								; back to original value.
.c215	68		pla				pla 								; load operator
.c216	29 1f		and #$1f			and 	#$1F 						; mask out bits
.c218	0a		asl a				asl 	a 							; double as look up table, also Clear Carry
.c219	69 12		adc #$12			adc 	#(BinaryVectorTable & $FF) 	; work out the address to do the indirect jump.
.c21b	8d 26 c2	sta $c226			sta 	_EXPRIndirectJump+1
.c21e	a9 c8		lda #$c8			lda 	#(BinaryVectorTable >> 8)
.c220	69 00		adc #$00			adc 	#0
.c222	8d 27 c2	sta $c227			sta 	_EXPRIndirectJump+2
.c225					_EXPRIndirectJump:
.c225	6c ff ff	jmp ($ffff)			jmp 	($FFFF) 					; jump to the code routine, loops back to EXPRMainLoop
.c228					_EEExit:
.c228	68		pla				pla 								; throw precedence
.c229					_EEExit2:
.c229	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/exprutils.asm

.c22a					EXPEvalNumber:
.c22a	20 ec c1	jsr $c1ec			jsr 	EXPEvaluateExpressionAtX	; get a value
.c22d	20 ad c1	jsr $c1ad			jsr 	DereferenceTOS				; dereference it
.c230	34 10		bit $10,x			bit 	XSControl,x	 				; fail if string
.c232	30 01		bmi $c235			bmi 	EVUType
.c234	60		rts				rts
.c235					EVUType:
.c235	a9 02		lda #$02		lda	#2
.c237	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c23a					EXPEvalInteger:
.c23a	20 2a c2	jsr $c22a			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.c23d	34 10		bit $10,x			bit 	XSControl,x 				; integer ?
.c23f	f0 05		beq $c246			beq 	_EEIExit
.c241	a9 11		lda #$11			lda 	#17 						; no, make it integer
.c243	20 64 c3	jsr $c364			jsr 	DOMathCommand
.c246					_EEIExit:
.c246	60		rts				rts
.c247					EXPEvalInteger16:
.c247	20 3a c2	jsr $c23a			jsr 	EXPEvalInteger 				; get integer
.c24a	b5 30		lda $30,x			lda 	XSNumber3,x
.c24c	15 28		ora $28,x			ora 	XSNumber2,x
.c24e	d0 1e		bne $c26e			bne 	EVURange
.c250	60		rts				rts
.c251					EXPEvalInteger8:
.c251	20 3a c2	jsr $c23a			jsr 	EXPEvalInteger 				; get integer
.c254	b5 20		lda $20,x			lda 	XSNumber1,x 				; range 00-FF
.c256	d0 16		bne $c26e			bne 	EVURange
.c258	b5 18		lda $18,x			lda 	XSNumber0,x
.c25a	60		rts				rts
.c25b					EXPEvalString:
.c25b	20 ec c1	jsr $c1ec			jsr 	EXPEvaluateExpressionAtX 	; get a value
.c25e	20 ad c1	jsr $c1ad			jsr 	DereferenceTOS 				; dereference it
.c261	34 10		bit $10,x			bit 	XSControl,x	 				; fail if not string
.c263	10 d0		bpl $c235			bpl 	EVUType
.c265	b5 18		lda $18,x			lda 	XSNumber0,x
.c267	85 3e		sta $3e				sta 	zTemp0
.c269	b5 20		lda $20,x			lda 	XSNumber1,x
.c26b	85 3f		sta $3f				sta 	zTemp0+1
.c26d	60		rts				rts
.c26e					EVURange:
.c26e	a9 04		lda #$04		lda	#4
.c270	4c 20 ca	jmp $ca20		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/term.asm

.c273					EvaluateTerm:
.c273	b1 38		lda ($38),y			lda 	(CodePtr),y 				; get next token
.c275	30 0a		bmi $c281			bmi 	_ETKeyword 					; is it a keyword (80-FF) ?
.c277	0a		asl a				asl		a							; is it a number (40-7F)
.c278	10 1f		bpl $c299			bpl		_ETIdentifierOrSpecial 		; if 00-3F then it is an identifier, or a multi purpose unary ! ? -
.c27a	20 fd c2	jsr $c2fd			jsr 	ExtractTokenisedInteger
.c27d	20 43 c3	jsr $c343			jsr 	CheckFollowingDecimal
.c280	60		rts				rts
.c281					_ETKeyword:
.c281	c9 b0		cmp #$b0			cmp 	#$B0 						; is it a unary function ?
.c283	b0 36		bcs $c2bb			bcs 	_ETSyntax
.c285	da		phx				phx
.c286	0a		asl a				asl 	a 							; access address to jump
.c287	aa		tax				tax
.c288	bd 54 c8	lda $c854,x			lda 	StandardVectorTable,x
.c28b	8d 97 c2	sta $c297			sta 	_ETVector+1
.c28e	bd 55 c8	lda $c855,x			lda 	StandardVectorTable+1,x
.c291	8d 98 c2	sta $c298			sta 	_ETVector+2
.c294	fa		plx				plx 								; restore stack pos and go there.
.c295	c8		iny				iny 								; consume
.c296					_ETVector:
.c296	4c ff ff	jmp $ffff			jmp 	$FFFF
.c299					_ETIdentifierOrSpecial:
.c299	0a		asl a			 	asl 	a 							; bit 5 now in sign slot
.c29a	10 40		bpl $c2dc		 	bpl 	_ETIsIdentifier  			; 0 it is 00-1F e.g. identifier
.c29c	b1 38		lda ($38),y		 	lda 	(codePtr),y 				; get and consume. clearer than reuse
.c29e	c8		iny			 	iny
.c29f	c9 21		cmp #$21		 	cmp 	#KWD_MINUS 					; negation.
.c2a1	d0 10		bne $c2b3		 	bne 	_ETCheckReference
.c2a3	20 73 c2	jsr $c273		 	jsr 	EvaluateTerm 				; it's minus *something*.
.c2a6	20 ad c1	jsr $c1ad		 	jsr 	DereferenceTOS 				; dereference it.
.c2a9	b5 10		lda $10,x		 	lda 	XSControl,x 				; numeric term ?
.c2ab	30 2a		bmi $c2d7		 	bmi 	_ETBadType
.c2ad	a9 10		lda #$10		 	lda 	#16 						; negation function - needs optimising for ints
.c2af	20 64 c3	jsr $c364		 	jsr 	DoMathCommand 				; work it out
.c2b2	60		rts			 	rts
.c2b3					_ETCheckReference:
.c2b3	c9 32		cmp #$32			cmp 	#KWD_QMARK
.c2b5	f0 09		beq $c2c0			beq 	_ETHaveReference
.c2b7	49 31		eor #$31			eor 	#KWD_PLING
.c2b9	f0 05		beq $c2c0			beq 	_ETHaveReference
.c2bb					_ETSyntax:
.c2bb	a9 01		lda #$01		lda	#1
.c2bd	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c2c0					_ETHaveReference:
.c2c0	48		pha				pha 								; save type.
.c2c1	20 73 c2	jsr $c273		 	jsr 	EvaluateTerm 				; get reference address
.c2c4	20 ad c1	jsr $c1ad		 	jsr 	DereferenceTOS
.c2c7	b5 10		lda $10,x		 	lda 	XSControl,x 				; must be integer
.c2c9	29 c0		and #$c0		 	and 	#XS_TYPEMASK
.c2cb	d0 0a		bne $c2d7		 	bne 	_ETBadType
.c2cd	68		pla			 	pla 								; get type of reference back
.c2ce	f0 02		beq $c2d2		 	beq 	_ETIsWord 					; if zero, it's a word reference
.c2d0	a9 10		lda #$10		 	lda 	#XS_ISBYTEREFERENCE
.c2d2					_ETIsWord:
.c2d2	09 20		ora #$20			ora 	#XS_ISREFERENCE 			; now $20 / $30 for word/byte reference
.c2d4	95 10		sta $10,x			sta 	XSControl,x 				; update type
.c2d6	60		rts				rts
.c2d7					_ETBadType:
.c2d7	a9 02		lda #$02		lda	#2
.c2d9	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c2dc					_ETIsIdentifier:
.c2dc	b1 38		lda ($38),y			lda 	(codePtr),y 				; get the MSB of the identifier address.
.c2de	c8		iny				iny
.c2df	18		clc				clc
.c2e0	69 cb		adc #$cb			adc 	#Program >> 8 				; convert to a real address.
.c2e2	95 20		sta $20,x			sta 	XSNumber1,x
.c2e4	85 3f		sta $3f				sta 	zTemp0+1
.c2e6	b1 38		lda ($38),y			lda 	(codePtr),y 				; LSB - on a page boundary
.c2e8	95 18		sta $18,x			sta 	XSNumber0,x
.c2ea	85 3e		sta $3e				sta 	zTemp0
.c2ec	74 28		stz $28,x			stz 	XSNumber2,x 				; neatness
.c2ee	74 30		stz $30,x			stz 	XSNumber3,x
.c2f0	5a		phy				phy 								; read and update the type/control
.c2f1	a0 04		ldy #$04			ldy 	#4
.c2f3	b1 3e		lda ($3e),y			lda 	(zTemp0),y
.c2f5	29 c0		and #$c0			and 	#XS_TYPEMASK 				; type info
.c2f7	09 20		ora #$20			ora 	#XS_ISREFERENCE 			; set reference bit (is word)
.c2f9	7a		ply				ply
.c2fa	95 10		sta $10,x			sta 	XSControl,x
.c2fc	60		rts				rts
.c2fd					ExtractTokenisedInteger:
.c2fd	b1 38		lda ($38),y			lda 	(codePtr),y 				; get first token, known to be 40-7F
.c2ff	29 3f		and #$3f			and 	#$3F 						; mask off upper bits
.c301	95 18		sta $18,x			sta 	XSNumber0,x 				; initial value.
.c303	74 20		stz $20,x			stz 	XSNumber1,x
.c305	74 28		stz $28,x			stz 	XSNumber2,x
.c307	74 30		stz $30,x			stz 	XSNumber3,x
.c309	74 10		stz $10,x			stz 	XSControl,x 				; integer constant
.c30b					_ETConstant:
.c30b	c8		iny				iny 								; look at next
.c30c	b1 38		lda ($38),y			lda 	(CodePtr),y
.c30e	29 c0		and #$c0			and 	#$C0 						; is it $40..$7F
.c310	c9 40		cmp #$40			cmp 	#$40
.c312	d0 2e		bne $c342			bne 	_ETExit
.c314	b5 30		lda $30,x			lda 	XSNumber3,x 				; save the upper byte.
.c316	48		pha				pha
.c317	b5 28		lda $28,x			lda 	XSNumber2,x 				; multiply old by 256
.c319	95 30		sta $30,x			sta 	XSNumber3,x
.c31b	b5 20		lda $20,x			lda 	XSNumber1,x
.c31d	95 28		sta $28,x			sta 	XSNumber2,x
.c31f	b5 18		lda $18,x			lda 	XSNumber0,x
.c321	95 20		sta $20,x			sta 	XSNumber1,x
.c323	74 18		stz $18,x			stz 	XSNumber0,x
.c325	68		pla				pla 								; old MS Byte
.c326	4a		lsr a				lsr 	a 							; shift right twice
.c327	76 30		ror $30,x			ror 	XSNumber3,x
.c329	76 28		ror $28,x			ror 	XSNumber2,x
.c32b	76 20		ror $20,x			ror 	XSNumber1,x
.c32d	76 18		ror $18,x			ror 	XSNumber0,x
.c32f	4a		lsr a				lsr 	a
.c330	76 30		ror $30,x			ror 	XSNumber3,x
.c332	76 28		ror $28,x			ror 	XSNumber2,x
.c334	76 20		ror $20,x			ror 	XSNumber1,x
.c336	76 18		ror $18,x			ror 	XSNumber0,x
.c338	b1 38		lda ($38),y			lda 	(codePtr),y 				; or the lower 6 bits in.
.c33a	29 3f		and #$3f			and 	#$3F
.c33c	15 18		ora $18,x			ora 	XSNumber0,x
.c33e	95 18		sta $18,x			sta 	XSNumber0,x
.c340	80 c9		bra $c30b			bra 	_ETConstant
.c342					_ETExit:
.c342	60		rts				rts
.c343					CheckFollowingDecimal:
.c343	b1 38		lda ($38),y			lda 	(CodePtr),y 				; what follows ?
.c345	c9 c3		cmp #$c3			cmp 	#KWD_SYS_DEC 				; decimal ?
.c347	d0 1a		bne $c363			bne 	_CFDExit
.c349	98		tya				tya 								; get address of decimal data
.c34a	1a		inc a				inc 	a
.c34b	38		sec				sec
.c34c	65 38		adc $38				adc 	CodePtr
.c34e	8d 08 ff	sta $ff08			sta 	ControlPort+8 				; param slot 2 = address of decimal data.
.c351	a5 39		lda $39				lda 	CodePtr+1
.c353	69 00		adc #$00			adc 	#0
.c355	8d 09 ff	sta $ff09			sta 	ControlPort+9
.c358	a9 20		lda #$20			lda 	#32 						; decimal expand code.
.c35a	20 64 c3	jsr $c364			jsr 	DoMathCommand
.c35d	c8		iny				iny 								; get length and add it +1 for the length
.c35e	98		tya				tya
.c35f	38		sec				sec
.c360	71 38		adc ($38),y			adc 	(CodePtr),y
.c362	a8		tay				tay
.c363					_CFDExit:
.c363	60		rts				rts
.c364					DoMathCommand:
.c364	48		pha				pha
.c365	20 f4 ff	jsr $fff4		jsr 	WaitMessage
.c368	8d 01 ff	sta $ff01			sta 	ControlFunction
.c36b	8a		txa				txa
.c36c	18		clc				clc
.c36d	69 10		adc #$10			adc 	#XSStack & $FF
.c36f	8d 04 ff	sta $ff04			sta 	ControlPort+4
.c372	a9 00		lda #$00			lda 	#XSStack >> 8
.c374	69 00		adc #$00			adc 	#0
.c376	8d 05 ff	sta $ff05			sta 	ControlPort+5
.c379	a9 08		lda #$08			lda 	#8
.c37b	8d 06 ff	sta $ff06			sta 	ControlPort+6
.c37e	a9 04		lda #$04			lda 	#4
.c380	8d 00 ff	sta $ff00			sta 	ControlCommand 				; do command
.c383	20 f4 ff	jsr $fff4		jsr 	WaitMessage
.c386	68		pla				pla				; wait for result.
.c387	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/asc.asm

.c388					EXPUnaryAsc:
.c388	20 5b c2	jsr $c25b			jsr 	EXPEvalString 					; string to R0, zTemp0
.c38b	20 0e c9	jsr $c90e			jsr 	ERRCheckRParen 					; )
.c38e	b2 3e		lda ($3e)			lda 	(zTemp0) 						; length 0 ?
.c390	f0 06		beq $c398			beq 	_EXAZero 						; if so return 0
.c392	5a		phy				phy 									; otherwise get first character
.c393	a0 01		ldy #$01			ldy 	#1
.c395	b1 3e		lda ($3e),y			lda 	(zTemp0),y
.c397	7a		ply				ply
.c398					_EXAZero:
.c398	4c a7 c3	jmp $c3a7			jmp 	EXPUnaryReturnA

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/dollar.asm

.c39b					EXPUnaryNull:
.c39b	20 3a c2	jsr $c23a			jsr 	EXPEvalInteger 				; get a value
.c39e	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/len.asm

.c39f					EXPUnaryLen:
.c39f	20 5b c2	jsr $c25b			jsr 	EXPEvalString 					; string to R0, zTemp0
.c3a2	20 0e c9	jsr $c90e			jsr 	ERRCheckRParen 					; )
.c3a5	b2 3e		lda ($3e)			lda 	(zTemp0) 						; first byte is the length
.c3a7					EXPUnaryReturnA:
.c3a7	95 18		sta $18,x			sta 	XSNumber0,x
.c3a9	74 20		stz $20,x			stz 	XSNumber1,x
.c3ab	74 28		stz $28,x			stz 	XSNumber2,x
.c3ad	74 30		stz $30,x			stz 	XSNumber3,x
.c3af	74 10		stz $10,x			stz 	XSControl,x
.c3b1	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/simple.asm

.c3b2					UnaryParenthesis:
.c3b2	20 ec c1	jsr $c1ec			jsr 	EXPEvaluateExpressionAtX	; evaluate at stack level X
.c3b5	20 ad c1	jsr $c1ad			jsr 	DereferenceTOS 				; dereference it.
.c3b8	4c 0e c9	jmp $c90e			jmp 	ERRCheckRParen	 			; check )
.c3bb					DoUnaryFunction:
.c3bb	48		pha				pha
.c3bc	20 2a c2	jsr $c22a			jsr 	EXPEvalNumber 				; one operand
.c3bf	68		pla				pla
.c3c0	20 64 c3	jsr $c364			jsr 	DoMathCommand
.c3c3	ad 02 ff	lda $ff02			lda 	ControlError
.c3c6	d0 03		bne $c3cb			bne 	_DUFError
.c3c8	4c 0e c9	jmp $c90e			jmp 	ERRCheckRParen 				; closing )
.c3cb					_DUFError:
.c3cb	a9 04		lda #$04		lda	#4
.c3cd	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c3d0					UnaryInt:
.c3d0	a9 11		lda #$11			lda 	#17 						; do appropriate command
.c3d2	80 e7		bra $c3bb			bra 	DoUnaryFunction
.c3d4					UnarySqr:
.c3d4	a9 12		lda #$12			lda 	#18 						; do appropriate command
.c3d6	80 e3		bra $c3bb			bra 	DoUnaryFunction
.c3d8					UnarySin:
.c3d8	a9 13		lda #$13			lda 	#19 						; do appropriate command
.c3da	80 df		bra $c3bb			bra 	DoUnaryFunction
.c3dc					UnaryCos:
.c3dc	a9 14		lda #$14			lda 	#20 						; do appropriate command
.c3de	80 db		bra $c3bb			bra 	DoUnaryFunction
.c3e0					UnaryTan:
.c3e0	a9 15		lda #$15			lda 	#21 						; do appropriate command
.c3e2	80 d7		bra $c3bb			bra 	DoUnaryFunction
.c3e4					UnaryATan:
.c3e4	a9 16		lda #$16			lda 	#22 						; do appropriate command
.c3e6	80 d3		bra $c3bb			bra 	DoUnaryFunction
.c3e8					UnaryExp:
.c3e8	a9 17		lda #$17			lda 	#23 						; do appropriate command
.c3ea	80 cf		bra $c3bb			bra 	DoUnaryFunction
.c3ec					UnaryLog:
.c3ec	a9 18		lda #$18			lda 	#24 						; do appropriate command
.c3ee	80 cb		bra $c3bb			bra 	DoUnaryFunction
.c3f0					UnaryAbs:
.c3f0	a9 19		lda #$19			lda 	#25 						; do appropriate command
.c3f2	80 c7		bra $c3bb			bra 	DoUnaryFunction
.c3f4					UnarySgn:
.c3f4	a9 1a		lda #$1a			lda 	#26 						; do appropriate command
.c3f6	80 c3		bra $c3bb			bra 	DoUnaryFunction
.c3f8					UnaryRnd:
.c3f8	a9 1b		lda #$1b			lda 	#27 						; do appropriate command
.c3fa	80 bf		bra $c3bb			bra 	DoUnaryFunction
.c3fc					UnaryRand:
.c3fc	a9 1c		lda #$1c			lda 	#28 						; do appropriate command
.c3fe	80 bb		bra $c3bb			bra 	DoUnaryFunction

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/string.asm

.c400					EXPUnaryInlineString:
.c400	18		clc				clc 								; physical address -> TOS
.c401	98		tya				tya
.c402	65 38		adc $38				adc 	codePtr
.c404	95 18		sta $18,x			sta 	XSNumber0,x
.c406	a5 39		lda $39				lda 	codePtr+1
.c408	69 00		adc #$00			adc 	#0
.c40a	95 20		sta $20,x			sta 	XSNumber1,x
.c40c	74 28		stz $28,x			stz 	XSNumber2,x 				; fill in the rest & type
.c40e	74 30		stz $30,x			stz 	XSNumber3,x
.c410	a9 80		lda #$80			lda 	#XS_STRING 					; make it a string.
.c412	95 10		sta $10,x			sta 	XSControl,x
.c414	98		tya				tya	 								; skip over it.
.c415	38		sec				sec
.c416	71 38		adc ($38),y			adc 	(codePtr),y
.c418	a8		tay				tay
.c419	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/substring.asm

.c41a					EXPUnaryLeft:
.c41a					EXPUnaryRight:
.c41a					EXPUnaryMid:

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/val.asm

.c41a					EXPUnaryVal:
.c41a	20 3c c4	jsr $c43c			jsr 	EXPValBody 						; do the main bit.
.c41d	d0 01		bne $c420			bne 	_EXPUVExit 						; check error.
.c41f	60		rts				rts
.c420					_EXPUVExit:
.c420	a9 04		lda #$04		lda	#4
.c422	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c425					EXPUnaryIsVal:
.c425	20 3c c4	jsr $c43c			jsr 	EXPValBody 						; do the main bit.
.c428	f0 05		beq $c42f			beq 	EXPUnaryReturnMinus1 			; error code.
.c42a					EXPUnaryReturnZero:
.c42a	a9 00		lda #$00		 	lda 	#0 								; returns zerozero no error
.c42c	4c a7 c3	jmp $c3a7		 	jmp 	EXPUnaryReturnA
.c42f					EXPUnaryReturnMinus1:
.c42f	a9 ff		lda #$ff			lda 	#$FF 							; returns -1
.c431	95 18		sta $18,x			sta 	XSNumber0,x
.c433	95 20		sta $20,x			sta 	XSNumber1,x
.c435	95 28		sta $28,x			sta 	XSNumber2,x
.c437	95 30		sta $30,x			sta 	XSNumber3,x
.c439	74 10		stz $10,x			stz 	XSControl,x
.c43b	60		rts				rts
.c43c					EXPValBody:
.c43c	20 5b c2	jsr $c25b			jsr 	EXPEvalString 					; string to R0, zTemp0
.c43f	20 0e c9	jsr $c90e			jsr 	ERRCheckRParen 					; )
.c442	a5 3e		lda $3e				lda 	zTemp0 							; copy address to offset 8/9
.c444	8d 08 ff	sta $ff08			sta 	ControlCommand+8
.c447	a5 3f		lda $3f				lda 	zTemp0+1
.c449	8d 09 ff	sta $ff09			sta 	ControlCommand+9
.c44c	a9 21		lda #$21			lda 	#33
.c44e	20 64 c3	jsr $c364			jsr 	DoMathCommand
.c451	ad 02 ff	lda $ff02			lda 	ControlError 					; error occurred
.c454	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/assert.asm

.c455					Command_ASSERT:
.c455	a2 00		ldx #$00			ldx 	#0
.c457	20 2a c2	jsr $c22a			jsr 	EXPEvalNumber 				; get a number to assert
.c45a	20 65 c4	jsr $c465			jsr 	CheckIfZero
.c45d	f0 01		beq $c460			beq 	_CAFail 					; if so, the assert fails.
.c45f	60		rts				rts
.c460					_CAFail:
.c460	a9 05		lda #$05		lda	#5
.c462	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c465					CheckIfZero:
.c465	b5 10		lda $10,x			lda 	XSControl,x
.c467	d0 09		bne $c472			bne 	_CAType
.c469	b5 18		lda $18,x			lda 	XSNumber0,x
.c46b	15 20		ora $20,x			ora 	XSNumber1,x
.c46d	15 28		ora $28,x			ora 	XSNumber2,x
.c46f	15 30		ora $30,x			ora 	XSNumber3,x
.c471	60		rts				rts
.c472					_CAType:
.c472	a9 02		lda #$02		lda	#2
.c474	4c 20 ca	jmp $ca20		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/commands/clear.asm

.c477					Command_CLEAR:
.c477	4c 7a c4	jmp $c47a			jmp 	ClearCode
.c47a					ClearCode:
.c47a	a9 c0		lda #$c0			lda 	#HIGHMEMORY >> 8 			; reset the stack.
.c47c	20 98 c9	jsr $c998			jsr 	StackReset
.c47f	20 ac c9	jsr $c9ac			jsr 	StringSystemInitialise
.c482	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/comment.asm

.c483					Command_Comment:
.c483	b1 38		lda ($38),y			lda 	(codePtr),y 				; optional string parameter
.c485	c9 80		cmp #$80			cmp 	#KWD_SYS_STR
.c487	d0 06		bne $c48f			bne 	_CRExit
.c489	c8		iny				iny 								; skip over it, it's a comment.
.c48a	98		tya				tya
.c48b	38		sec				sec
.c48c	71 38		adc ($38),y			adc 	(codePtr),y
.c48e	a8		tay				tay
.c48f					_CRExit:
.c48f	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/inputprint.asm

.c490					Command_Input:
.c490	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.c492	8d 02 02	sta $0202			sta 	InputFlag
.c495	80 03		bra $c49a			bra 	Command_IP_Main
.c497					Command_Print:
.c497	9c 02 02	stz $0202			stz 	InputFlag
.c49a					Command_IP_Main:
.c49a	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.c49b					_CPLoop:
.c49b	08		php				php 								; save "last action" flag
.c49c	b1 38		lda ($38),y			lda 	(codePtr),y 				; get next character
.c49e	c9 c0		cmp #$c0			cmp  	#KWD_SYS_END 				; end of line or colon, exit now.
.c4a0	f0 41		beq $c4e3			beq 	_CPExit 					; without consuming
.c4a2	c9 cd		cmp #$cd			cmp 	#KWD_COLON
.c4a4	f0 3d		beq $c4e3			beq 	_CPExit
.c4a6	68		pla				pla 								; throw last action flag
.c4a7	b1 38		lda ($38),y			lda 	(codePtr),y 				; next character and consume
.c4a9	c8		iny				iny
.c4aa	c9 cc		cmp #$cc			cmp 	#KWD_SEMICOLON				; is it a semicolon (syntax seperator)
.c4ac	f0 32		beq $c4e0			beq 	_CPContinueWithSameLine
.c4ae	c9 cb		cmp #$cb			cmp 	#KWD_COMMA 					; comma (tab)
.c4b0	f0 29		beq $c4db			beq 	_CPTab
.c4b2	88		dey				dey 								; undo the get.
.c4b3	2c 02 02	bit $0202			bit 	InputFlag 					; check for Input
.c4b6	10 0b		bpl $c4c3			bpl	 	_CPNotInput
.c4b8	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.c4ba	c9 40		cmp #$40			cmp 	#$40
.c4bc	d0 05		bne $c4c3			bne 	_CPNotInput
.c4be	20 ec c4	jsr $c4ec			jsr 	_CPInputCode 				; input code
.c4c1	80 d7		bra $c49a			bra 	Command_IP_Main 			; and go round again.
.c4c3					_CPNotInput:
.c4c3	20 ea c1	jsr $c1ea			jsr 	EXPEvaluateExpressionAt0 	; evaluate expression.
.c4c6	34 10		bit $10,x			bit 	XSControl,x 				; is it a number ?
.c4c8	10 0d		bpl $c4d7			bpl 	_CPNumber
.c4ca	5a		phy				phy
.c4cb	18		clc				clc 								; string address to YA
.c4cc	b5 20		lda $20,x			lda 	XSNumber1,x
.c4ce	a8		tay				tay
.c4cf	b5 18		lda $18,x			lda 	XSNumber0,x
.c4d1	20 ec c4	jsr $c4ec			jsr 	CPPrintYA 					; print YA
.c4d4	7a		ply				ply
.c4d5	80 c3		bra $c49a			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.c4d7					_CPNumber:
.c4d7	5a		phy				phy
.c4d8	7a		ply				ply
.c4d9	80 bf		bra $c49a			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.c4db					_CPTab:
.c4db	a9 09		lda #$09			lda 	#9 							; print TAB
.c4dd	20 02 c5	jsr $c502			jsr 	CPPrintA
.c4e0					_CPContinueWithSameLine:
.c4e0	38		sec				sec 								; loop round with carry set, which
.c4e1	80 b8		bra $c49b			bra 	_CPLoop 					; will inhibit final CR
.c4e3					_CPExit:
.c4e3	28		plp				plp 								; get last action flag
.c4e4	b0 05		bcs $c4eb			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.c4e6	a9 0d		lda #$0d			lda 	#13 						; print new line
.c4e8	20 02 c5	jsr $c502			jsr 	CPPrintA
.c4eb					_CPExit2:
.c4eb	60		rts				rts
.c4ec					_CPInputCode:
.c4ec					CPPrintYA:
.c4ec	85 3e		sta $3e				sta 	zTemp0
.c4ee	84 3f		sty $3f				sty 	zTemp0+1
.c4f0	b2 3e		lda ($3e)			lda 	(zTemp0)
.c4f2	aa		tax				tax
.c4f3	f0 0b		beq $c500			beq 	_CPPrintExit
.c4f5	a0 01		ldy #$01			ldy 	#1
.c4f7					_CPPrintAYXLoop:
.c4f7	b1 3e		lda ($3e),y			lda 	(zTemp0),y
.c4f9	20 02 c5	jsr $c502			jsr 	CPPrintA
.c4fc	c8		iny				iny
.c4fd	ca		dex				dex
.c4fe	d0 f7		bne $c4f7			bne 	_CPPrintAYXLoop
.c500					_CPPrintExit:
.c500	60		rts				rts
.c501					CPInputA:
>c501	03						.byte 	3
.c502					CPPrintA:
.c502	4c f1 ff	jmp $fff1			jmp 	WriteCharacter

;******  Return to file: _include.inc


;******  Processing file: sources/commands/new.asm

.c505					Command_NEW:
.c505	9c 00 cb	stz $cb00			stz 	Program 					; Erase current program
.c508	20 7a c4	jsr $c47a			jsr 	ClearCode 					; Run CLR
.c50b	4c 61 c5	jmp $c561			jmp 	Command_END 				; Run END

;******  Return to file: _include.inc


;******  Processing file: sources/commands/run.asm

.c50e					Command_RUN:
.c50e	20 7a c4	jsr $c47a			jsr 	ClearCode					; clear everything out.
.c511	ad 00 cb	lda $cb00			lda 	Program 					; back to the program start, get the count of var pages.
.c514	18		clc				clc 								; make an actual address.
.c515	69 cb		adc #$cb			adc 	#(Program >> 8)
.c517	85 39		sta $39				sta 	codePtr+1
.c519	64 38		stz $38				stz 	codePtr
.c51b	80 0b		bra $c528			bra 	RUNNewLine
.c51d					RUNEndOfLine:
.c51d	18		clc				clc 								; advance to next line.
.c51e	b2 38		lda ($38)			lda 	(codePtr)
.c520	65 38		adc $38				adc 	codePtr
.c522	85 38		sta $38				sta 	codePtr
.c524	90 02		bcc $c528			bcc 	_RELNoCarry
.c526	e6 39		inc $39				inc 	codePtr+1
.c528					_RELNoCarry:
.c528					RUNNewLine:
.c528	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.c52a	9a		txs				txs
.c52b	b2 38		lda ($38)			lda 	(codePtr) 					; check off end of program
.c52d	f0 32		beq $c561			beq 	Command_END
.c52f	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.c531	b1 38		lda ($38),y			lda 	(codePtr),y
.c533	8d 00 02	sta $0200			sta 	ERRLine
.c536	c8		iny				iny
.c537	b1 38		lda ($38),y			lda 	(codePtr),y
.c539	8d 01 02	sta $0201			sta 	ERRLine+1
.c53c	c8		iny				iny 								; offset into codePtr for start of line.
.c53d					RUNNewCommand:
.c53d	9c 03 02	stz $0203			stz 	stringInitialised 			; reset string system flag.
.c540					_RNCNoCheck:
.c540	b1 38		lda ($38),y			lda 	(codePtr),y 				; get next token
.c542	10 1d		bpl $c561			bpl		_RUNNotToken 				; probably an identifier
.c544	c8		iny				iny 								; consume token
.c545	c9 cd		cmp #$cd			cmp 	#KWD_COLON 					; fast skip colon
.c547	f0 f4		beq $c53d			beq 	RUNNewCommand
.c549	c9 b0		cmp #$b0			cmp 	#$B0 				 		; check unary function ?
.c54b	90 0a		bcc $c557			bcc 	_RUNSyntax
.c54d	0a		asl a				asl 	a 							; double into X.
.c54e	aa		tax				tax
.c54f	20 54 c5	jsr $c554			jsr 	_RUNDispatchMain			; call the main dispatcher
.c552	80 e9		bra $c53d			bra 	RUNNewCommand
.c554					_RUNDispatchMain:
.c554	7c 54 c8	jmp ($c854,x)			jmp 	(StandardVectorTable,x)
.c557					_RUNSyntax:
.c557	a9 01		lda #$01		lda	#1
.c559	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c55c					_RUNBreak:
.c55c	a9 06		lda #$06		lda	#6
.c55e	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c561					_RUNNotToken:
.c561					Command_END:
.c561	4c 17 ca	jmp $ca17			jmp 	WarmStart
.c564					Command_Shift1_Handler:
.c564	b1 38		lda ($38),y			lda 	(codePtr),y 				; get token shifted
.c566	c8		iny				iny
.c567	0a		asl a				asl 	a 							; double into X
.c568	aa		tax				tax
.c569	7c 38 c8	jmp ($c838,x)			jmp 	(ExtendedVectorTable,x) 	; and go there.

;******  Return to file: _include.inc


;******  Processing file: sources/commands/stop.asm

.c56c					Command_STOP:
.c56c	a9 07		lda #$07		lda	#7
.c56e	4c 20 ca	jmp $ca20		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/commands/sys.asm

.c571					Command_Sys:
.c571	a2 00		ldx #$00			ldx 	#0
.c573	20 47 c2	jsr $c247			jsr 	EXPEvalInteger16 			; execution address
.c576	5a		phy				phy
.c577	b5 18		lda $18,x			lda 	XSNumber0,x 				; copy address into subroutine call.
.c579	8d 82 c5	sta $c582			sta 	_SysCall+1
.c57c	b5 20		lda $20,x			lda 	XSNumber1,x
.c57e	8d 83 c5	sta $c583			sta 	_SysCall+2
.c581					_SysCall:
.c581	20 ff ff	jsr $ffff			jsr 	$FFFF 						; call the code
.c584	7a		ply				ply
.c585	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/generated/errors.asm

.c586					ErrorMessageText:
>c586	73 79 6e 74 61 78 20 65			.text	"syntax error",0
>c58e	72 72 6f 72 00
>c593	74 79 70 65 20 6d 69 73			.text	"type mismatch error",0
>c59b	6d 61 74 63 68 20 65 72 72 6f 72 00
>c5a7	64 69 76 69 73 69 6f 6e			.text	"division by zero error",0
>c5af	20 62 79 20 7a 65 72 6f 20 65 72 72 6f 72 00
>c5be	6f 75 74 20 6f 66 20 72			.text	"out of range error",0
>c5c6	61 6e 67 65 20 65 72 72 6f 72 00
>c5d1	61 73 73 65 72 74 20 66			.text	"assert failed",0
>c5d9	61 69 6c 65 64 00
>c5df	62 72 65 61 6b 20 70 72			.text	"break pressed",0
>c5e7	65 73 73 65 64 00
>c5ed	70 72 6f 67 72 61 6d 20			.text	"program stopped",0
>c5f5	73 74 6f 70 70 65 64 00
>c5fd	73 74 72 75 63 74 75 72			.text	"structure imbalance",0
>c605	65 20 69 6d 62 61 6c 61 6e 63 65 00
>c611	6f 75 74 20 6f 66 20 73			.text	"out of stack space.",0
>c619	74 61 63 6b 20 73 70 61 63 65 2e 00
>c625	6f 75 74 20 6f 66 20 73			.text	"out of string memory.",0
>c62d	74 72 69 6e 67 20 6d 65 6d 6f 72 79 2e 00

;******  Return to file: _include.inc


;******  Processing file: sources/generated/kwdtext.asm

.c63b					BinaryTokenText:
>c63b	01 ab					.byte	$01,$ab                       	; $ 20 +
>c63d	01 ad					.byte	$01,$ad                       	; $ 21 -
>c63f	01 aa					.byte	$01,$aa                       	; $ 22 *
>c641	01 af					.byte	$01,$af                       	; $ 23 /
>c643	02 3e be				.byte	$02,$3e,$be                   	; $ 24 >>
>c646	02 3c bc				.byte	$02,$3c,$bc                   	; $ 25 <<
>c649	01 a5					.byte	$01,$a5                       	; $ 26 %
>c64b	01 dc					.byte	$01,$dc                       	; $ 27 \
>c64d	01 a6					.byte	$01,$a6                       	; $ 28 &
>c64f	01 fc					.byte	$01,$fc                       	; $ 29 |
>c651	01 de					.byte	$01,$de                       	; $ 2a ^
>c653	01 be					.byte	$01,$be                       	; $ 2b >
>c655	02 3e bd				.byte	$02,$3e,$bd                   	; $ 2c >=
>c658	01 bc					.byte	$01,$bc                       	; $ 2d <
>c65a	02 3c bd				.byte	$02,$3c,$bd                   	; $ 2e <=
>c65d	02 3c be				.byte	$02,$3c,$be                   	; $ 2f <>
>c660	01 bd					.byte	$01,$bd                       	; $ 30 =
>c662	01 a1					.byte	$01,$a1                       	; $ 31 !
>c664	01 bf					.byte	$01,$bf                       	; $ 32 ?
>c666	ff					.byte	$FF
.c667					BaseTokenText:
>c667	00					.byte	$00                           	; $ 80
>c668	01 a4					.byte	$01,$a4                       	; $ 81 $
>c66a	01 a8					.byte	$01,$a8                       	; $ 82 (
>c66c	05 52 41 4e 44 a8			.byte	$05,$52,$41,$4e,$44,$a8       	; $ 83 RAND(
>c672	04 52 4e 44 a8				.byte	$04,$52,$4e,$44,$a8           	; $ 84 RND(
>c677	06 49 53 56 41 4c a8			.byte	$06,$49,$53,$56,$41,$4c,$a8   	; $ 85 ISVAL(
>c67e	04 49 4e 54 a8				.byte	$04,$49,$4e,$54,$a8           	; $ 86 INT(
>c683	04 54 49 4d c5				.byte	$04,$54,$49,$4d,$c5           	; $ 87 TIME
>c688	06 45 56 45 4e 54 a8			.byte	$06,$45,$56,$45,$4e,$54,$a8   	; $ 88 EVENT(
>c68f	07 49 4e 4b 45 59 24 a8			.byte	$07,$49,$4e,$4b,$45,$59,$24,$a8	; $ 89 INKEY$(
>c697	04 41 53 43 a8				.byte	$04,$41,$53,$43,$a8           	; $ 8a ASC(
>c69c	05 43 48 52 24 a8			.byte	$05,$43,$48,$52,$24,$a8       	; $ 8b CHR$(
>c6a2	04 53 51 52 a8				.byte	$04,$53,$51,$52,$a8           	; $ 8c SQR(
>c6a7	04 4c 45 4e a8				.byte	$04,$4c,$45,$4e,$a8           	; $ 8d LEN(
>c6ac	04 41 42 53 a8				.byte	$04,$41,$42,$53,$a8           	; $ 8e ABS(
>c6b1	04 53 47 4e a8				.byte	$04,$53,$47,$4e,$a8           	; $ 8f SGN(
>c6b6	04 56 41 4c a8				.byte	$04,$56,$41,$4c,$a8           	; $ 90 VAL(
>c6bb	05 53 54 52 24 a8			.byte	$05,$53,$54,$52,$24,$a8       	; $ 91 STR$(
>c6c1	05 4d 49 44 24 a8			.byte	$05,$4d,$49,$44,$24,$a8       	; $ 92 MID$(
>c6c7	06 4c 45 46 54 24 a8			.byte	$06,$4c,$45,$46,$54,$24,$a8   	; $ 93 LEFT$(
>c6ce	07 52 49 47 48 54 24 a8			.byte	$07,$52,$49,$47,$48,$54,$24,$a8	; $ 94 RIGHT$(
>c6d6	04 53 49 4e a8				.byte	$04,$53,$49,$4e,$a8           	; $ 95 SIN(
>c6db	04 43 4f 53 a8				.byte	$04,$43,$4f,$53,$a8           	; $ 96 COS(
>c6e0	04 54 41 4e a8				.byte	$04,$54,$41,$4e,$a8           	; $ 97 TAN(
>c6e5	05 41 54 41 4e a8			.byte	$05,$41,$54,$41,$4e,$a8       	; $ 98 ATAN(
>c6eb	04 4c 4f 47 a8				.byte	$04,$4c,$4f,$47,$a8           	; $ 99 LOG(
>c6f0	04 45 58 50 a8				.byte	$04,$45,$58,$50,$a8           	; $ 9a EXP(
>c6f5	04 4b 45 59 a8				.byte	$04,$4b,$45,$59,$a8           	; $ 9b KEY(
>c6fa	00					.byte	$00                           	; $ 9c
>c6fb	00					.byte	$00                           	; $ 9d
>c6fc	00					.byte	$00                           	; $ 9e
>c6fd	00					.byte	$00                           	; $ 9f
>c6fe	00					.byte	$00                           	; $ a0
>c6ff	00					.byte	$00                           	; $ a1
>c700	00					.byte	$00                           	; $ a2
>c701	00					.byte	$00                           	; $ a3
>c702	00					.byte	$00                           	; $ a4
>c703	00					.byte	$00                           	; $ a5
>c704	00					.byte	$00                           	; $ a6
>c705	00					.byte	$00                           	; $ a7
>c706	00					.byte	$00                           	; $ a8
>c707	00					.byte	$00                           	; $ a9
>c708	00					.byte	$00                           	; $ aa
>c709	00					.byte	$00                           	; $ ab
>c70a	00					.byte	$00                           	; $ ac
>c70b	00					.byte	$00                           	; $ ad
>c70c	00					.byte	$00                           	; $ ae
>c70d	00					.byte	$00                           	; $ af
>c70e	05 57 48 49 4c c5			.byte	$05,$57,$48,$49,$4c,$c5       	; $ b0 WHILE
>c714	04 57 45 4e c4				.byte	$04,$57,$45,$4e,$c4           	; $ b1 WEND
>c719	02 49 c6				.byte	$02,$49,$c6                   	; $ b2 IF
>c71c	05 45 4e 44 49 c6			.byte	$05,$45,$4e,$44,$49,$c6       	; $ b3 ENDIF
>c722	02 44 cf				.byte	$02,$44,$cf                   	; $ b4 DO
>c725	04 4c 4f 4f d0				.byte	$04,$4c,$4f,$4f,$d0           	; $ b5 LOOP
>c72a	06 52 45 50 45 41 d4			.byte	$06,$52,$45,$50,$45,$41,$d4   	; $ b6 REPEAT
>c731	05 55 4e 54 49 cc			.byte	$05,$55,$4e,$54,$49,$cc       	; $ b7 UNTIL
>c737	04 50 52 4f c3				.byte	$04,$50,$52,$4f,$c3           	; $ b8 PROC
>c73c	07 45 4e 44 50 52 4f c3			.byte	$07,$45,$4e,$44,$50,$52,$4f,$c3	; $ b9 ENDPROC
>c744	03 46 4f d2				.byte	$03,$46,$4f,$d2               	; $ ba FOR
>c748	04 4e 45 58 d4				.byte	$04,$4e,$45,$58,$d4           	; $ bb NEXT
>c74d	04 43 41 53 c5				.byte	$04,$43,$41,$53,$c5           	; $ bc CASE
>c752	07 45 4e 44 43 41 53 c5			.byte	$07,$45,$4e,$44,$43,$41,$53,$c5	; $ bd ENDCASE
>c75a	00					.byte	$00                           	; $ be
>c75b	04 54 48 45 ce				.byte	$04,$54,$48,$45,$ce           	; $ bf THEN
>c760	00					.byte	$00                           	; $ c0
>c761	00					.byte	$00                           	; $ c1
>c762	00					.byte	$00                           	; $ c2
>c763	00					.byte	$00                           	; $ c3
>c764	02 54 cf				.byte	$02,$54,$cf                   	; $ c4 TO
>c767	03 4c 45 d4				.byte	$03,$4c,$45,$d4               	; $ c5 LET
>c76b	05 50 52 49 4e d4			.byte	$05,$50,$52,$49,$4e,$d4       	; $ c6 PRINT
>c771	05 49 4e 50 55 d4			.byte	$05,$49,$4e,$50,$55,$d4       	; $ c7 INPUT
>c777	04 43 41 4c cc				.byte	$04,$43,$41,$4c,$cc           	; $ c8 CALL
>c77c	03 53 59 d3				.byte	$03,$53,$59,$d3               	; $ c9 SYS
>c780	04 45 58 49 d4				.byte	$04,$45,$58,$49,$d4           	; $ ca EXIT
>c785	01 ac					.byte	$01,$ac                       	; $ cb ,
>c787	01 bb					.byte	$01,$bb                       	; $ cc ;
>c789	01 ba					.byte	$01,$ba                       	; $ cd :
>c78b	01 a7					.byte	$01,$a7                       	; $ ce '
>c78d	01 a9					.byte	$01,$a9                       	; $ cf )
>c78f	04 52 45 41 c4				.byte	$04,$52,$45,$41,$c4           	; $ d0 READ
>c794	04 44 41 54 c1				.byte	$04,$44,$41,$54,$c1           	; $ d1 DATA
>c799	01 db					.byte	$01,$db                       	; $ d2 [
>c79b	01 dd					.byte	$01,$dd                       	; $ d3 ]
>c79d	01 a3					.byte	$01,$a3                       	; $ d4 #
>c79f	01 ae					.byte	$01,$ae                       	; $ d5 .
>c7a1	04 45 4c 53 c5				.byte	$04,$45,$4c,$53,$c5           	; $ d6 ELSE
>c7a6	04 57 48 45 ce				.byte	$04,$57,$48,$45,$ce           	; $ d7 WHEN
>c7ab	06 44 4f 57 4e 54 cf			.byte	$06,$44,$4f,$57,$4e,$54,$cf   	; $ d8 DOWNTO
>c7b2	ff					.byte	$FF
.c7b3					Shift1TokenText:
>c7b3	05 43 4c 45 41 d2			.byte	$05,$43,$4c,$45,$41,$d2       	; $180 CLEAR
>c7b9	03 4e 45 d7				.byte	$03,$4e,$45,$d7               	; $181 NEW
>c7bd	03 52 55 ce				.byte	$03,$52,$55,$ce               	; $182 RUN
>c7c1	04 53 54 4f d0				.byte	$04,$53,$54,$4f,$d0           	; $183 STOP
>c7c6	03 45 4e c4				.byte	$03,$45,$4e,$c4               	; $184 END
>c7ca	06 41 53 53 45 52 d4			.byte	$06,$41,$53,$53,$45,$52,$d4   	; $185 ASSERT
>c7d1	04 4c 49 53 d4				.byte	$04,$4c,$49,$53,$d4           	; $186 LIST
>c7d6	04 53 41 56 c5				.byte	$04,$53,$41,$56,$c5           	; $187 SAVE
>c7db	04 4c 4f 41 c4				.byte	$04,$4c,$4f,$41,$c4           	; $188 LOAD
>c7e0	05 47 4f 53 55 c2			.byte	$05,$47,$4f,$53,$55,$c2       	; $189 GOSUB
>c7e6	04 47 4f 54 cf				.byte	$04,$47,$4f,$54,$cf           	; $18a GOTO
>c7eb	06 52 45 54 55 52 ce			.byte	$06,$52,$45,$54,$55,$52,$ce   	; $18b RETURN
>c7f2	07 52 45 53 54 4f 52 c5			.byte	$07,$52,$45,$53,$54,$4f,$52,$c5	; $18c RESTORE
>c7fa	03 44 49 cd				.byte	$03,$44,$49,$cd               	; $18d DIM
>c7fe	ff					.byte	$FF
.c7ff					BinaryPrecedence:
>c7ff	03					.byte	3		; +
>c800	03					.byte	3		; -
>c801	04					.byte	4		; *
>c802	04					.byte	4		; /
>c803	04					.byte	4		; >>
>c804	04					.byte	4		; <<
>c805	04					.byte	4		; %
>c806	04					.byte	4		; \
>c807	01					.byte	1		; &
>c808	01					.byte	1		; |
>c809	01					.byte	1		; ^
>c80a	02					.byte	2		; >
>c80b	02					.byte	2		; >=
>c80c	02					.byte	2		; <
>c80d	02					.byte	2		; <=
>c80e	02					.byte	2		; <>
>c80f	02					.byte	2		; =
>c810	05					.byte	5		; !
>c811	05					.byte	5		; ?

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_binary.asm

.c812					BinaryVectorTable:
>c812	57 c1					.word	BinaryAdd                ; $20 +
>c814	64 c1					.word	BinaryMinus              ; $21 -
>c816	71 c1					.word	BinaryTimes              ; $22 *
>c818	7e c1					.word	BinaryFDiv               ; $23 /
>c81a	cd c0					.word	BinaryShiftRight         ; $24 >>
>c81c	ca c0					.word	BinaryShiftLeft          ; $25 <<
>c81e	a1 c1					.word	BinaryModulus            ; $26 %
>c820	95 c1					.word	BinaryUDiv               ; $27 \
>c822	67 c0					.word	BinaryAnd                ; $28 &
>c824	a9 c0					.word	BinaryOr                 ; $29 |
>c826	88 c0					.word	BinaryXor                ; $2a ^
>c828	2b c0					.word	CMPCompareGreater        ; $2b >
>c82a	46 c0					.word	CMPCompareGreaterEqual   ; $2c >=
>c82c	22 c0					.word	CMPCompareLess           ; $2d <
>c82e	3d c0					.word	CMPCompareLessEqual      ; $2e <=
>c830	34 c0					.word	CMPCompareNotEqual       ; $2f <>
>c832	19 c0					.word	CMPCompareEqual          ; $30 =
>c834	0d c1					.word	BinRefWord               ; $31 !
>c836	11 c1					.word	BinRefByte               ; $32 ?

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_extended.asm

.c838					ExtendedVectorTable:
>c838	77 c4					.word	Command_CLEAR            ; $180 clear
>c83a	05 c5					.word	Command_NEW              ; $181 new
>c83c	0e c5					.word	Command_RUN              ; $182 run
>c83e	6c c5					.word	Command_STOP             ; $183 stop
>c840	61 c5					.word	Command_END              ; $184 end
>c842	55 c4					.word	Command_ASSERT           ; $185 assert
>c844	1e ca					.word	Unimplemented            ; $186 list
>c846	1e ca					.word	Unimplemented            ; $187 save
>c848	1e ca					.word	Unimplemented            ; $188 load
>c84a	1e ca					.word	Unimplemented            ; $189 gosub
>c84c	1e ca					.word	Unimplemented            ; $18a goto
>c84e	1e ca					.word	Unimplemented            ; $18b return
>c850	1e ca					.word	Unimplemented            ; $18c restore
>c852	1e ca					.word	Unimplemented            ; $18d dim

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_standard.asm

.c854					StandardVectorTable:
>c854	00 c4					.word	EXPUnaryInlineString     ; $80 !!str
>c856	9b c3					.word	EXPUnaryNull             ; $81 $
>c858	b2 c3					.word	UnaryParenthesis         ; $82 (
>c85a	fc c3					.word	UnaryRand                ; $83 rand(
>c85c	f8 c3					.word	UnaryRnd                 ; $84 rnd(
>c85e	25 c4					.word	EXPUnaryIsVal            ; $85 isval(
>c860	d0 c3					.word	UnaryInt                 ; $86 int(
>c862	1e ca					.word	Unimplemented            ; $87 time
>c864	1e ca					.word	Unimplemented            ; $88 event(
>c866	1e ca					.word	Unimplemented            ; $89 inkey$(
>c868	88 c3					.word	EXPUnaryAsc              ; $8a asc(
>c86a	1e ca					.word	Unimplemented            ; $8b chr$(
>c86c	d4 c3					.word	UnarySqr                 ; $8c sqr(
>c86e	9f c3					.word	EXPUnaryLen              ; $8d len(
>c870	f0 c3					.word	UnaryAbs                 ; $8e abs(
>c872	f4 c3					.word	UnarySgn                 ; $8f sgn(
>c874	1a c4					.word	EXPUnaryVal              ; $90 val(
>c876	1e ca					.word	Unimplemented            ; $91 str$(
>c878	1a c4					.word	EXPUnaryMid              ; $92 mid$(
>c87a	1a c4					.word	EXPUnaryLeft             ; $93 left$(
>c87c	1a c4					.word	EXPUnaryRight            ; $94 right$(
>c87e	d8 c3					.word	UnarySin                 ; $95 sin(
>c880	dc c3					.word	UnaryCos                 ; $96 cos(
>c882	e0 c3					.word	UnaryTan                 ; $97 tan(
>c884	e4 c3					.word	UnaryATan                ; $98 atan(
>c886	ec c3					.word	UnaryLog                 ; $99 log(
>c888	e8 c3					.word	UnaryExp                 ; $9a exp(
>c88a	1e ca					.word	Unimplemented            ; $9b key(
>c88c	1e ca					.word	Unimplemented            ; $9c
>c88e	1e ca					.word	Unimplemented            ; $9d
>c890	1e ca					.word	Unimplemented            ; $9e
>c892	1e ca					.word	Unimplemented            ; $9f
>c894	1e ca					.word	Unimplemented            ; $a0
>c896	1e ca					.word	Unimplemented            ; $a1
>c898	1e ca					.word	Unimplemented            ; $a2
>c89a	1e ca					.word	Unimplemented            ; $a3
>c89c	1e ca					.word	Unimplemented            ; $a4
>c89e	1e ca					.word	Unimplemented            ; $a5
>c8a0	1e ca					.word	Unimplemented            ; $a6
>c8a2	1e ca					.word	Unimplemented            ; $a7
>c8a4	1e ca					.word	Unimplemented            ; $a8
>c8a6	1e ca					.word	Unimplemented            ; $a9
>c8a8	1e ca					.word	Unimplemented            ; $aa
>c8aa	1e ca					.word	Unimplemented            ; $ab
>c8ac	1e ca					.word	Unimplemented            ; $ac
>c8ae	1e ca					.word	Unimplemented            ; $ad
>c8b0	1e ca					.word	Unimplemented            ; $ae
>c8b2	1e ca					.word	Unimplemented            ; $af
>c8b4	1e ca					.word	Unimplemented            ; $b0 while
>c8b6	1e ca					.word	Unimplemented            ; $b1 wend
>c8b8	1e ca					.word	Unimplemented            ; $b2 if
>c8ba	1e ca					.word	Unimplemented            ; $b3 endif
>c8bc	1e ca					.word	Unimplemented            ; $b4 do
>c8be	1e ca					.word	Unimplemented            ; $b5 loop
>c8c0	1e ca					.word	Unimplemented            ; $b6 repeat
>c8c2	1e ca					.word	Unimplemented            ; $b7 until
>c8c4	1e ca					.word	Unimplemented            ; $b8 proc
>c8c6	1e ca					.word	Unimplemented            ; $b9 endproc
>c8c8	1e ca					.word	Unimplemented            ; $ba for
>c8ca	1e ca					.word	Unimplemented            ; $bb next
>c8cc	1e ca					.word	Unimplemented            ; $bc case
>c8ce	1e ca					.word	Unimplemented            ; $bd endcase
>c8d0	1e ca					.word	Unimplemented            ; $be !!un1
>c8d2	1e ca					.word	Unimplemented            ; $bf then
>c8d4	1d c5					.word	RUNEndOfLine             ; $c0 !!end
>c8d6	64 c5					.word	Command_Shift1_Handler   ; $c1 !!sh1
>c8d8	1e ca					.word	Unimplemented            ; $c2 !!sh2
>c8da	1e ca					.word	Unimplemented            ; $c3 !!dec
>c8dc	1e ca					.word	Unimplemented            ; $c4 to
>c8de	1e ca					.word	Unimplemented            ; $c5 let
>c8e0	97 c4					.word	Command_Print            ; $c6 print
>c8e2	90 c4					.word	Command_Input            ; $c7 input
>c8e4	1e ca					.word	Unimplemented            ; $c8 call
>c8e6	71 c5					.word	Command_Sys              ; $c9 sys
>c8e8	1e ca					.word	Unimplemented            ; $ca exit
>c8ea	1e ca					.word	Unimplemented            ; $cb ,
>c8ec	1e ca					.word	Unimplemented            ; $cc ;
>c8ee	1e ca					.word	Unimplemented            ; $cd :
>c8f0	83 c4					.word	Command_Comment          ; $ce '
>c8f2	1e ca					.word	Unimplemented            ; $cf )
>c8f4	1e ca					.word	Unimplemented            ; $d0 read
>c8f6	1e ca					.word	Unimplemented            ; $d1 data
>c8f8	1e ca					.word	Unimplemented            ; $d2 [
>c8fa	1e ca					.word	Unimplemented            ; $d3 ]
>c8fc	1e ca					.word	Unimplemented            ; $d4 #
>c8fe	1e ca					.word	Unimplemented            ; $d5 .
>c900	1e ca					.word	Unimplemented            ; $d6 else
>c902	1e ca					.word	Unimplemented            ; $d7 when
>c904	1e ca					.word	Unimplemented            ; $d8 downto

;******  Return to file: _include.inc


;******  Processing file: sources/support/errors/syntax.asm

.c906					ERRCheckLParen:
.c906	b1 38		lda ($38),y			lda 	(CodePtr),y
.c908	c9 82		cmp #$82			cmp 	#KWD_LPAREN
.c90a	d0 18		bne $c924			bne 	ERRSyntaxError
.c90c	c8		iny				iny
.c90d	60		rts				rts
.c90e					ERRCheckRParen:
.c90e	b1 38		lda ($38),y			lda 	(CodePtr),y
.c910	c9 cf		cmp #$cf			cmp 	#KWD_RPAREN
.c912	d0 10		bne $c924			bne 	ERRSyntaxError
.c914	c8		iny				iny
.c915	60		rts				rts
.c916					ERRCheckComma:
.c916	b1 38		lda ($38),y			lda 	(CodePtr),y
.c918	c9 cb		cmp #$cb			cmp 	#KWD_COMMA
.c91a	d0 08		bne $c924			bne 	ERRSyntaxError
.c91c	c8		iny				iny
.c91d	60		rts				rts
.c91e					ERRCheckA:
.c91e	d1 38		cmp ($38),y			cmp 	(codePtr),y
.c920	d0 02		bne $c924			bne 	ERRSyntaxError
.c922	c8		iny				iny
.c923	60		rts				rts
.c924					ERRSyntaxError:
.c924	a9 01		lda #$01		lda	#1
.c926	4c 20 ca	jmp $ca20		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/support/stack/bytes.asm

.c929					StackPushByte:
.c929	48		pha				pha 								; save byte on stack
.c92a	a5 3a		lda $3a				lda 	basicStack 					; decrement basic stack pointer
.c92c	d0 02		bne $c930			bne 	_SPBNoBorrow
.c92e	c6 3b		dec $3b				dec 	basicStack+1 				; borrow
.c930					_SPBNoBorrow:
.c930	c6 3a		dec $3a				dec 	basicStack
.c932	68		pla				pla 								; get back and write
.c933	92 3a		sta ($3a)			sta 	(basicStack)
.c935	60		rts				rts
.c936					StackPopByte:
.c936	b2 3a		lda ($3a)			lda 	(basicStack) 				; bump the stack pointer.
.c938	e6 3a		inc $3a				inc 	basicStack
.c93a	d0 02		bne $c93e			bne 	_SPBNoCarry
.c93c	e6 3b		inc $3b				inc 	basicStack+1
.c93e					_SPBNoCarry:
.c93e	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/support/stack/frames.asm

.c93f					StackOpen:
.c93f	48		pha				pha 								; save frame byte
.c940	29 0f		and #$0f			and 	#$0F 						; shows the bytes to subtract.
.c942	0a		asl a				asl 	a 							; claim twice this for storage
.c943	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.c945	38		sec				sec 								; so basically subtracting from
.c946	65 3a		adc $3a				adc 	basicStack 	 				; basicStack
.c948	85 3a		sta $3a				sta 	basicStack
.c94a	b0 09		bcs $c955			bcs 	_SONoBorrow
.c94c	c6 3b		dec $3b				dec 	basicStack+1
.c94e	a5 3b		lda $3b				lda 	basicStack+1 				; reached the bottom ?
.c950	cd 08 02	cmp $0208			cmp 	basicStackEnd
.c953	f0 04		beq $c959			beq 	_SOMemory
.c955					_SONoBorrow:
.c955	68		pla				pla 								; get marker back and write at TOS
.c956	92 3a		sta ($3a)			sta 	(basicStack)
.c958	60		rts				rts
.c959					_SOMemory:
.c959	a9 09		lda #$09		lda	#9
.c95b	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.c95e					StackClose:
.c95e	b2 3a		lda ($3a)			lda 	(basicStack) 				; get TOS marker
.c960	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.c962	0a		asl a				asl 	a 							; claim twice this.
.c963	65 3a		adc $3a				adc 	basicStack 					; add to the stack pointer.
.c965	85 3a		sta $3a				sta 	basicStack
.c967	90 02		bcc $c96b			bcc 	_SCExit
.c969	e6 3b		inc $3b				inc 	basicStack+1
.c96b					_SCExit:
.c96b	60		rts				rts
.c96c					StackCheckFrame:
.c96c	d2 3a		cmp ($3a)			cmp		(basicStack) 				; check  frames match
.c96e	d0 01		bne $c971			bne 	_SCFError 					; different, we have structures mixed up
.c970	60		rts				rts
.c971					_SCFError:
.c971	a9 08		lda #$08		lda	#8
.c973	4c 20 ca	jmp $ca20		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/support/stack/location.asm

.c976					STKSaveCodePosition:
.c976	5a		phy				phy
.c977	98		tya				tya 								; save Y at offset 1.
.c978	a0 01		ldy #$01			ldy 	#1
.c97a	91 3a		sta ($3a),y			sta 	(basicStack),y
.c97c	a5 38		lda $38				lda 	codePtr 					; save code (low) at 2
.c97e	c8		iny				iny
.c97f	91 3a		sta ($3a),y			sta 	(basicStack),y
.c981	a5 39		lda $39				lda 	codePtr+1 					; save code (high) at 3
.c983	c8		iny				iny
.c984	91 3a		sta ($3a),y			sta 	(basicStack),y
.c986	7a		ply				ply
.c987	60		rts				rts
.c988					STKLoadCodePosition:
.c988	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.c98a	b1 3a		lda ($3a),y			lda 	(basicStack),y
.c98c	85 39		sta $39				sta 	codePtr+1
.c98e	88		dey				dey
.c98f	b1 3a		lda ($3a),y			lda 	(basicStack),y
.c991	85 38		sta $38				sta 	codePtr
.c993	88		dey				dey
.c994	b1 3a		lda ($3a),y			lda 	(basicStack),y 				; line offset to Y
.c996	a8		tay				tay
.c997	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/support/stack/setup.asm

.c998					StackReset:
.c998	48		pha				pha 								; save top of memory
.c999	3a		dec a				dec 	a  							; end of stack = previous byte
.c99a	85 3b		sta $3b				sta 	basicStack+1
.c99c	a9 ff		lda #$ff			lda 	#$FF
.c99e	85 3a		sta $3a				sta 	basicStack
.c9a0	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.c9a2	92 3a		sta ($3a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.c9a4	68		pla				pla 								; allocate pages for stack.
.c9a5	38		sec				sec
.c9a6	e9 08		sbc #$08			sbc 	#STACKPAGES
.c9a8	8d 08 02	sta $0208			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.c9ab	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/support/strings/stringalloc.asm

.c9ac					StringSystemInitialise:
.c9ac	3a		dec a				dec 	a 							; make last byte of previous page.
.c9ad	8d 05 02	sta $0205			sta 	stringMemory+1
.c9b0	85 3f		sta $3f				sta 	zTemp0+1
.c9b2	a9 ff		lda #$ff			lda 	#$FF
.c9b4	8d 04 02	sta $0204			sta 	stringMemory
.c9b7	85 3e		sta $3e				sta 	zTemp0
.c9b9	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.c9bb	92 3e		sta ($3e)			sta 	(zTemp0)
.c9bd	60		rts				rts
.c9be					StringSpaceInitialise:
.c9be	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.c9c0	8d 03 02	sta $0203			sta 	stringInitialised
.c9c3	ad 04 02	lda $0204			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.c9c6	8d 06 02	sta $0206			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.c9c9	ad 05 02	lda $0205			lda 	stringMemory+1
.c9cc	3a		dec a				dec 	a
.c9cd	8d 07 02	sta $0207			sta 	stringTempPointer+1
.c9d0	60		rts				rts
.c9d1					StringTempAllocate:
.c9d1	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.c9d3	b0 30		bcs $ca05			bcs 	_STALength
.c9d5	2c 03 02	bit $0203			bit 	stringInitialised 			; already initialised
.c9d8	30 05		bmi $c9df			bmi 	_STAAllocate 				; then don't call the temp initialise routine
.c9da	48		pha				pha 								; save value to subtract.
.c9db	20 be c9	jsr $c9be			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.c9de	68		pla				pla 								; restore it
.c9df					_STAAllocate:
.c9df	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.c9e1	18		clc				clc  								; deliberate allows one more
.c9e2	6d 06 02	adc $0206			adc 	stringTempPointer 			; subtract from temp pointer
.c9e5	8d 06 02	sta $0206			sta 	stringTempPointer
.c9e8	95 18		sta $18,x			sta 	XSNumber0,x	 				; address in mantissa too
.c9ea	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.c9ec	ad 07 02	lda $0207			lda 	stringTempPointer+1
.c9ef	69 ff		adc #$ff			adc 	#$FF
.c9f1	8d 07 02	sta $0207			sta 	stringTempPointer+1
.c9f4	85 3d		sta $3d				sta 	zsTemp+1
.c9f6	95 20		sta $20,x			sta 	XSNumber1,x
.c9f8	74 28		stz $28,x			stz 	XSNumber2,x 				; set the typing data and the upper address bytes.
.c9fa	74 30		stz $30,x			stz 	XSNumber3,x
.c9fc	a9 80		lda #$80			lda 	#XS_STRING					; it's a string.
.c9fe	95 10		sta $10,x			sta 	XSControl,x
.ca00	a9 00		lda #$00			lda 	#0 							; clear the target string
.ca02	92 3c		sta ($3c)			sta 	(zsTemp)
.ca04	60		rts				rts
.ca05					_STALength:
.ca05	a9 0a		lda #$0a		lda	#10
.ca07	4c 20 ca	jmp $ca20		jmp	ErrorHandler
.ca0a					StringTempWrite:
.ca0a	5a		phy				phy
.ca0b	48		pha				pha
.ca0c	b2 3c		lda ($3c)			lda 	(zsTemp)
.ca0e	1a		inc a				inc 	a
.ca0f	92 3c		sta ($3c)			sta 	(zsTemp)
.ca11	a8		tay				tay
.ca12	68		pla				pla
.ca13	91 3c		sta ($3c),y			sta 	(zsTemp),y
.ca15	7a		ply				ply
.ca16	60		rts				rts

;******  Return to file: _include.inc


;******  Return to file: basic.asm

.ca17					WarmStart:
.ca17	a9 00		lda #$00			lda 	#$00
.ca19	aa		tax				tax
.ca1a	a8		tay				tay
>ca1b	03						.byte 	3
.ca1c	80 f9		bra $ca17			bra 	WarmStart
.ca1e					Unimplemented:
.ca1e	a9 ff		lda #$ff			lda 	#$FF
.ca20					ErrorHandler:
.ca20	a2 ee		ldx #$ee			ldx 	#$EE
.ca22	a0 ee		ldy #$ee			ldy 	#$EE
>ca24	03						.byte 	3
.ca25					_EHLoop:
.ca25	80 fe		bra $ca25			bra 	_EHLoop
>ca27							.align 	256
.cb00					Program:
>cb00	01 07 00 00 00 00 00 c1				.binary "build/tokenised.dat"
>cb08	07 00 00 00 00 00 d8 07 00 00 00 00 00 d9 00 00
>cb18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>cbf8	00 00 00 00 00 00 00 00 18 64 00 c1 85 8e 82 8e
>cc08	21 4b 65 cf cf 21 4b 65 cf 2e 40 c3 02 00 1f c0
>cc18	1c 6e 00 c1 85 8e 82 8d 80 06 43 51 59 45 46 42
>cc28	cf cf 21 46 cf 2e 40 c3 02 00 1f c0 18 78 00 c1
>cc38	85 8e 82 8f 21 4b 65 cf cf 21 21 41 cf 2e 40 c3
>cc48	02 00 1f c0 19 82 00 c1 85 8e 82 86 21 4b 65 cf
>cc58	cf 21 21 4b 65 cf 2e 40 c3 02 00 1f c0 1f 8c 00
>cc68	c1 85 8e 82 8c 4e 66 c3 02 14 ff cf cf 21 5e c3
>cc78	03 56 37 ff cf 2e 40 c3 02 24 5f c0 1d 96 00 c1
>cc88	85 8e 82 8a 80 06 43 51 59 45 46 42 cf cf 21 41
>cc98	43 cf 2e 40 c3 02 00 1f c0 21 a0 00 c1 85 8e 82
>cca8	90 80 06 34 30 38 2e 31 34 cf cf 21 46 58 c3 02
>ccb8	14 ff cf 2e 40 c3 02 00 1f c0 17 aa 00 c1 85 8e
>ccc8	82 8e 4c 6d cf cf 21 4c 6d cf 2e 40 c3 02 00 1f
>ccd8	c0 16 b4 00 c1 85 8e 82 8d 80 00 cf cf 21 40 cf
>cce8	2e 40 c3 02 00 1f c0 16 be 00 c1 85 8e 82 8f 4c
>ccf8	6d cf cf 21 41 cf 2e 40 c3 02 00 1f c0 17 c8 00
>cd08	c1 85 8e 82 86 4c 6d cf cf 21 4c 6d cf 2e 40 c3
>cd18	02 00 1f c0 1f d2 00 c1 85 8e 82 8c 4c 54 c3 02
>cd28	86 ff cf cf 21 5c c3 03 08 67 ff cf 2e 40 c3 02
>cd38	22 5f c0 16 dc 00 c1 85 8e 82 8a 80 00 cf cf 21
>cd48	40 cf 2e 40 c3 02 00 1f c0 1c e6 00 c1 85 8e 82
>cd58	90 80 04 2d 37 38 31 cf cf 21 21 4c 4d cf 2e 40
>cd68	c3 02 00 1f c0 1f f0 00 c1 85 8e 82 8e 4e 76 c3
>cd78	02 82 ff cf cf 21 4e 76 c3 02 82 ff cf 2e 40 c3
>cd88	02 00 1f c0 1b fa 00 c1 85 8e 82 8d 80 05 49 43
>cd98	4b 53 51 cf cf 21 45 cf 2e 40 c3 02 00 1f c0 1a
>cda8	04 01 c1 85 8e 82 8f 4e 76 c3 02 82 ff cf cf 21
>cdb8	41 cf 2e 40 c3 02 00 1f c0 1b 0e 01 c1 85 8e 82
>cdc8	86 4e 76 c3 02 82 ff cf cf 21 4e 76 cf 2e 40 c3
>cdd8	02 00 1f c0 1f 18 01 c1 85 8e 82 8c 49 78 c3 02
>cde8	68 ff cf cf 21 59 c3 03 15 31 ff cf 2e 40 c3 02
>cdf8	20 1f c0 1c 22 01 c1 85 8e 82 8a 80 05 49 43 4b
>ce08	53 51 cf cf 21 41 49 cf 2e 40 c3 02 00 1f c0 21
>ce18	2c 01 c1 85 8e 82 90 80 06 31 31 30 2e 34 36 cf
>ce28	cf 21 41 6e c3 02 46 ff cf 2e 40 c3 02 00 1f c0
>ce38	17 36 01 c1 85 8e 82 8e 4a 67 cf cf 21 4a 67 cf
>ce48	2e 40 c3 02 00 1f c0 1b 40 01 c1 85 8e 82 8d 80
>ce58	05 4b 59 51 42 41 cf cf 21 45 cf 2e 40 c3 02 00
>ce68	1f c0 16 4a 01 c1 85 8e 82 8f 4a 67 cf cf 21 41
>ce78	cf 2e 40 c3 02 00 1f c0 17 54 01 c1 85 8e 82 86
>ce88	4a 67 cf cf 21 4a 67 cf 2e 40 c3 02 00 1f c0 1b
>ce98	5e 01 c1 85 8e 82 8c 4b 50 cf cf 21 5a c3 03 83
>cea8	28 ff cf 2e 40 c3 02 21 5f c0 1c 68 01 c1 85 8e
>ceb8	82 8a 80 05 4b 59 51 42 41 cf cf 21 41 4b cf 2e
>cec8	40 c3 02 00 1f c0 21 72 01 c1 85 8e 82 90 80 06
>ced8	38 36 37 2e 30 34 cf cf 21 4d 63 c3 02 04 ff cf
>cee8	2e 40 c3 02 00 1f c0 1f 7c 01 c1 85 8e 82 8e 46
>cef8	7d c3 02 42 ff cf cf 21 46 7d c3 02 42 ff cf 2e
>cf08	40 c3 02 00 1f c0 1d 86 01 c1 85 8e 82 8d 80 07
>cf18	55 50 54 54 59 41 59 cf cf 21 47 cf 2e 40 c3 02
>cf28	00 1f c0 1a 90 01 c1 85 8e 82 8f 46 7d c3 02 42
>cf38	ff cf cf 21 41 cf 2e 40 c3 02 00 1f c0 1b 9a 01
>cf48	c1 85 8e 82 86 46 7d c3 02 42 ff cf cf 21 46 7d
>cf58	cf 2e 40 c3 02 00 1f c0 1f a4 01 c1 85 8e 82 8c
>cf68	4b 7e c3 02 54 ff cf cf 21 5b c3 03 68 65 ff cf
>cf78	2e 40 c3 02 22 1f c0 1e ae 01 c1 85 8e 82 8a 80
>cf88	07 55 50 54 54 59 41 59 cf cf 21 41 55 cf 2e 40
>cf98	c3 02 00 1f c0 1c b8 01 c1 85 8e 82 90 80 04 2d
>cfa8	37 39 34 cf cf 21 21 4c 5a cf 2e 40 c3 02 00 1f
>cfb8	c0 1f c2 01 c1 85 8e 82 8e 41 77 c3 02 75 ff cf
>cfc8	cf 21 41 77 c3 02 75 ff cf 2e 40 c3 02 00 1f c0
>cfd8	1e cc 01 c1 85 8e 82 8d 80 08 59 49 41 4a 58 43
>cfe8	58 4e cf cf 21 48 cf 2e 40 c3 02 00 1f c0 1a d6
>cff8	01 c1 85 8e 82 8f 41 77 c3 02 75 ff cf cf 21 41
>d008	cf 2e 40 c3 02 00 1f c0 1b e0 01 c1 85 8e 82 86
>d018	41 77 c3 02 75 ff cf cf 21 41 77 cf 2e 40 c3 02
>d028	00 1f c0 1f ea 01 c1 85 8e 82 8c 4a 61 c3 02 65
>d038	ff cf cf 21 59 c3 03 95 48 ff cf 2e 40 c3 02 20
>d048	8f c0 1f f4 01 c1 85 8e 82 8a 80 08 59 49 41 4a
>d058	58 43 58 4e cf cf 21 41 59 cf 2e 40 c3 02 00 1f
>d068	c0 21 fe 01 c1 85 8e 82 90 80 06 37 32 39 2e 37
>d078	36 cf cf 21 4b 59 c3 02 76 ff cf 2e 40 c3 02 00
>d088	1f c0 18 08 02 c1 85 8e 82 8e 21 4f 41 cf cf 21
>d098	4f 41 cf 2e 40 c3 02 00 1f c0 1c 12 02 c1 85 8e
>d0a8	82 8d 80 06 56 48 59 49 49 4c cf cf 21 46 cf 2e
>d0b8	40 c3 02 00 1f c0 18 1c 02 c1 85 8e 82 8f 21 4f
>d0c8	41 cf cf 21 21 41 cf 2e 40 c3 02 00 1f c0 19 26
>d0d8	02 c1 85 8e 82 86 21 4f 41 cf cf 21 21 4f 41 cf
>d0e8	2e 40 c3 02 00 1f c0 1b 30 02 c1 85 8e 82 8c 4d
>d0f8	59 cf cf 21 5d c3 03 27 46 ff cf 2e 40 c3 02 23
>d108	4f c0 1d 3a 02 c1 85 8e 82 8a 80 06 56 48 59 49
>d118	49 4c cf cf 21 41 56 cf 2e 40 c3 02 00 1f c0 23
>d128	44 02 c1 85 8e 82 90 80 07 2d 31 38 36 2e 36 38
>d138	cf cf 21 21 42 7a c3 02 68 ff cf 2e 40 c3 02 00
>d148	1f c0 20 4e 02 c1 85 8e 82 8e 21 4c 47 c3 02 39
>d158	ff cf cf 21 4c 47 c3 02 39 ff cf 2e 40 c3 02 00
>d168	1f c0 18 58 02 c1 85 8e 82 8d 80 02 4d 59 cf cf
>d178	21 42 cf 2e 40 c3 02 00 1f c0 1c 62 02 c1 85 8e
>d188	82 8f 21 4c 47 c3 02 39 ff cf cf 21 21 41 cf 2e
>d198	40 c3 02 00 1f c0 1d 6c 02 c1 85 8e 82 86 21 4c
>d1a8	47 c3 02 39 ff cf cf 21 21 4c 47 cf 2e 40 c3 02
>d1b8	00 1f c0 1e 76 02 c1 85 8e 82 8c 51 c3 02 39 ff
>d1c8	cf cf 21 44 c3 03 17 01 ff cf 2e 40 c3 02 03 3f
>d1d8	c0 19 80 02 c1 85 8e 82 8a 80 02 4d 59 cf cf 21
>d1e8	41 4d cf 2e 40 c3 02 00 1f c0 21 8a 02 c1 85 8e
>d1f8	82 90 80 06 35 37 39 2e 34 36 cf cf 21 49 43 c3
>d208	02 46 ff cf 2e 40 c3 02 00 1f c0 1e 94 02 c1 85
>d218	8e 82 8e 21 4a 58 c3 01 4f cf cf 21 4a 58 c3 01
>d228	4f cf 2e 40 c3 02 00 1f c0 16 9e 02 c1 85 8e 82
>d238	8d 80 00 cf cf 21 40 cf 2e 40 c3 02 00 1f c0 1b
>d248	a8 02 c1 85 8e 82 8f 21 4a 58 c3 01 4f cf cf 21
>d258	21 41 cf 2e 40 c3 02 00 1f c0 1c b2 02 c1 85 8e
>d268	82 86 21 4a 58 c3 01 4f cf cf 21 21 4a 58 cf 2e
>d278	40 c3 02 00 1f c0 1b bc 02 c1 85 8e 82 8c 4f 65
>d288	cf cf 21 5f c3 03 57 53 ff cf 2e 40 c3 02 25 3f
>d298	c0 16 c6 02 c1 85 8e 82 8a 80 00 cf cf 21 40 cf
>d2a8	2e 40 c3 02 00 1f c0 23 d0 02 c1 85 8e 82 90 80
>d2b8	07 2d 36 38 39 2e 31 39 cf cf 21 21 4a 71 c3 02
>d2c8	19 ff cf 2e 40 c3 02 00 1f c0 20 da 02 c1 85 8e
>d2d8	82 8e 21 49 6f c3 02 22 ff cf cf 21 49 6f c3 02
>d2e8	22 ff cf 2e 40 c3 02 00 1f c0 19 e4 02 c1 85 8e
>d2f8	82 8d 80 03 41 4d 48 cf cf 21 43 cf 2e 40 c3 02
>d308	00 1f c0 1c ee 02 c1 85 8e 82 8f 21 49 6f c3 02
>d318	22 ff cf cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1d
>d328	f8 02 c1 85 8e 82 86 21 49 6f c3 02 22 ff cf cf
>d338	21 21 49 6f cf 2e 40 c3 02 00 1f c0 1a 02 03 c1
>d348	85 8e 82 8c 45 4f cf cf 21 52 c3 02 30 3f cf 2e
>d358	40 c3 02 14 6f c0 1a 0c 03 c1 85 8e 82 8a 80 03
>d368	41 4d 48 cf cf 21 41 41 cf 2e 40 c3 02 00 1f c0
>d378	1c 16 03 c1 85 8e 82 90 80 04 2d 37 38 37 cf cf
>d388	21 21 4c 53 cf 2e 40 c3 02 00 1f c0 1d 20 03 c1
>d398	85 8e 82 8e 44 6c c3 01 4f cf cf 21 44 6c c3 01
>d3a8	4f cf 2e 40 c3 02 00 1f c0 1a 2a 03 c1 85 8e 82
>d3b8	8d 80 04 4a 49 4f 5a cf cf 21 44 cf 2e 40 c3 02
>d3c8	00 1f c0 19 34 03 c1 85 8e 82 8f 44 6c c3 01 4f
>d3d8	cf cf 21 41 cf 2e 40 c3 02 00 1f c0 1a 3e 03 c1
>d3e8	85 8e 82 86 44 6c c3 01 4f cf cf 21 44 6c cf 2e
>d3f8	40 c3 02 00 1f c0 1b 48 03 c1 85 8e 82 8c 4a 4d
>d408	cf cf 21 59 c3 03 55 39 ff cf 2e 40 c3 02 20 4f
>d418	c0 1b 52 03 c1 85 8e 82 8a 80 04 4a 49 4f 5a cf
>d428	cf 21 41 4a cf 2e 40 c3 02 00 1f c0 1c 5c 03 c1
>d438	85 8e 82 90 80 04 2d 38 37 30 cf cf 21 21 4d 66
>d448	cf 2e 40 c3 02 00 1f c0 18 66 03 c1 85 8e 82 8e
>d458	21 41 4f cf cf 21 41 4f cf 2e 40 c3 02 00 1f c0
>d468	19 70 03 c1 85 8e 82 8d 80 03 59 41 4b cf cf 21
>d478	43 cf 2e 40 c3 02 00 1f c0 18 7a 03 c1 85 8e 82
>d488	8f 21 41 4f cf cf 21 21 41 cf 2e 40 c3 02 00 1f
>d498	c0 19 84 03 c1 85 8e 82 86 21 41 4f cf cf 21 21
>d4a8	41 4f cf 2e 40 c3 02 00 1f c0 1b 8e 03 c1 85 8e
>d4b8	82 8c 45 40 cf cf 21 51 c3 03 88 85 ff cf 2e 40
>d4c8	c3 02 14 3f c0 1a 98 03 c1 85 8e 82 8a 80 03 59
>d4d8	41 4b cf cf 21 41 59 cf 2e 40 c3 02 00 1f c0 1c
>d4e8	a2 03 c1 85 8e 82 90 80 04 2d 36 31 33 cf cf 21
>d4f8	21 49 65 cf 2e 40 c3 02 00 1f c0 17 ac 03 c1 85
>d508	8e 82 8e 42 58 cf cf 21 42 58 cf 2e 40 c3 02 00
>d518	1f c0 19 b6 03 c1 85 8e 82 8d 80 03 4d 51 44 cf
>d528	cf 21 43 cf 2e 40 c3 02 00 1f c0 16 c0 03 c1 85
>d538	8e 82 8f 42 58 cf cf 21 41 cf 2e 40 c3 02 00 1f
>d548	c0 17 ca 03 c1 85 8e 82 86 42 58 cf cf 21 42 58
>d558	cf 2e 40 c3 02 00 1f c0 1f d4 03 c1 85 8e 82 8c
>d568	42 74 c3 02 14 ff cf cf 21 4d c3 03 42 16 ff cf
>d578	2e 40 c3 02 10 7f c0 1a de 03 c1 85 8e 82 8a 80
>d588	03 4d 51 44 cf cf 21 41 4d cf 2e 40 c3 02 00 1f
>d598	c0 1f e8 03 c1 85 8e 82 90 80 05 34 32 38 2e 32
>d5a8	cf cf 21 46 6c c3 01 2f cf 2e 40 c3 02 00 1f c0
>d5b8	1f f2 03 c1 85 8e 82 8e 4b 43 c3 02 92 ff cf cf
>d5c8	21 4b 43 c3 02 92 ff cf 2e 40 c3 02 00 1f c0 1f
>d5d8	fc 03 c1 85 8e 82 8d 80 09 4e 4b 41 45 4e 52 4a
>d5e8	54 4d cf cf 21 49 cf 2e 40 c3 02 00 1f c0 1a 06
>d5f8	04 c1 85 8e 82 8f 4b 43 c3 02 92 ff cf cf 21 41
>d608	cf 2e 40 c3 02 00 1f c0 1b 10 04 c1 85 8e 82 86
>d618	4b 43 c3 02 92 ff cf cf 21 4b 43 cf 2e 40 c3 02
>d628	00 1f c0 1f 1a 04 c1 85 8e 82 8c 47 65 c3 02 48
>d638	ff cf cf 21 56 c3 03 03 36 ff cf 2e 40 c3 02 17
>d648	6f c0 20 24 04 c1 85 8e 82 8a 80 09 4e 4b 41 45
>d658	4e 52 4a 54 4d cf cf 21 41 4e cf 2e 40 c3 02 00
>d668	1f c0 23 2e 04 c1 85 8e 82 90 80 07 2d 39 35 35
>d678	2e 37 38 cf cf 21 21 4e 7b c3 02 78 ff cf 2e 40
>d688	c3 02 00 1f c0 20 38 04 c1 85 8e 82 8e 21 45 68
>d698	c3 02 99 ff cf cf 21 45 68 c3 02 99 ff cf 2e 40
>d6a8	c3 02 00 1f c0 1b 42 04 c1 85 8e 82 8d 80 05 55
>d6b8	4f 4e 4f 4f cf cf 21 45 cf 2e 40 c3 02 00 1f c0
>d6c8	1c 4c 04 c1 85 8e 82 8f 21 45 68 c3 02 99 ff cf
>d6d8	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1d 56 04 c1
>d6e8	85 8e 82 86 21 45 68 c3 02 99 ff cf cf 21 21 45
>d6f8	68 cf 2e 40 c3 02 00 1f c0 1e 60 04 c1 85 8e 82
>d708	8c 49 c3 02 57 ff cf cf 21 43 c3 03 09 35 ff cf
>d718	2e 40 c3 02 02 5f c0 1c 6a 04 c1 85 8e 82 8a 80
>d728	05 55 4f 4e 4f 4f cf cf 21 41 55 cf 2e 40 c3 02
>d738	00 1f c0 1c 74 04 c1 85 8e 82 90 80 04 2d 39 39
>d748	39 cf cf 21 21 4f 67 cf 2e 40 c3 02 00 1f c0 17
>d758	7e 04 c1 85 8e 82 8e 46 6b cf cf 21 46 6b cf 2e
>d768	40 c3 02 00 1f c0 16 88 04 c1 85 8e 82 8d 80 00
>d778	cf cf 21 40 cf 2e 40 c3 02 00 1f c0 16 92 04 c1
>d788	85 8e 82 8f 46 6b cf cf 21 41 cf 2e 40 c3 02 00
>d798	1f c0 17 9c 04 c1 85 8e 82 86 46 6b cf cf 21 46
>d7a8	6b cf 2e 40 c3 02 00 1f c0 1f a6 04 c1 85 8e 82
>d7b8	8c 4d 48 c3 02 87 ff cf cf 21 5c c3 03 99 78 ff
>d7c8	cf 2e 40 c3 02 23 2f c0 16 b0 04 c1 85 8e 82 8a
>d7d8	80 00 cf cf 21 40 cf 2e 40 c3 02 00 1f c0 1c ba
>d7e8	04 c1 85 8e 82 90 80 04 2d 34 31 31 cf cf 21 21
>d7f8	46 5b cf 2e 40 c3 02 00 1f c0 17 c4 04 c1 85 8e
>d808	82 8e 48 65 cf cf 21 48 65 cf 2e 40 c3 02 00 1f
>d818	c0 19 ce 04 c1 85 8e 82 8d 80 03 42 48 48 cf cf
>d828	21 43 cf 2e 40 c3 02 00 1f c0 16 d8 04 c1 85 8e
>d838	82 8f 48 65 cf cf 21 41 cf 2e 40 c3 02 00 1f c0
>d848	17 e2 04 c1 85 8e 82 86 48 65 cf cf 21 48 65 cf
>d858	2e 40 c3 02 00 1f c0 1b ec 04 c1 85 8e 82 8c 47
>d868	4b cf cf 21 55 c3 03 42 43 ff cf 2e 40 c3 02 17
>d878	1f c0 1a f6 04 c1 85 8e 82 8a 80 03 42 48 48 cf
>d888	cf 21 41 42 cf 2e 40 c3 02 00 1f c0 21 00 05 c1
>d898	85 8e 82 90 80 06 38 32 36 2e 34 36 cf cf 21 4c
>d8a8	7a c3 02 46 ff cf 2e 40 c3 02 00 1f c0 1f 0a 05
>d8b8	c1 85 8e 82 8e 42 63 c3 02 63 ff cf cf 21 42 63
>d8c8	c3 02 63 ff cf 2e 40 c3 02 00 1f c0 1f 14 05 c1
>d8d8	85 8e 82 8d 80 09 4f 43 4a 59 47 4a 57 49 4e cf
>d8e8	cf 21 49 cf 2e 40 c3 02 00 1f c0 1a 1e 05 c1 85
>d8f8	8e 82 8f 42 63 c3 02 63 ff cf cf 21 41 cf 2e 40
>d908	c3 02 00 1f c0 1b 28 05 c1 85 8e 82 86 42 63 c3
>d918	02 63 ff cf cf 21 42 63 cf 2e 40 c3 02 00 1f c0
>d928	1f 32 05 c1 85 8e 82 8c 42 60 c3 02 37 ff cf cf
>d938	21 4c c3 03 66 37 ff cf 2e 40 c3 02 10 1f c0 20
>d948	3c 05 c1 85 8e 82 8a 80 09 4f 43 4a 59 47 4a 57
>d958	49 4e cf cf 21 41 4f cf 2e 40 c3 02 00 1f c0 1a
>d968	46 05 c1 85 8e 82 90 80 03 36 30 35 cf cf 21 49
>d978	5d cf 2e 40 c3 02 00 1f c0 18 50 05 c1 85 8e 82
>d988	8e 21 4f 48 cf cf 21 4f 48 cf 2e 40 c3 02 00 1f
>d998	c0 1d 5a 05 c1 85 8e 82 8d 80 07 52 53 45 4a 4f
>d9a8	58 57 cf cf 21 47 cf 2e 40 c3 02 00 1f c0 18 64
>d9b8	05 c1 85 8e 82 8f 21 4f 48 cf cf 21 21 41 cf 2e
>d9c8	40 c3 02 00 1f c0 19 6e 05 c1 85 8e 82 86 21 4f
>d9d8	48 cf cf 21 21 4f 48 cf 2e 40 c3 02 00 1f c0 1f
>d9e8	78 05 c1 85 8e 82 8c 4e 45 c3 02 52 ff cf cf 21
>d9f8	5e c3 03 02 53 ff cf 2e 40 c3 02 24 ff c0 1e 82
>da08	05 c1 85 8e 82 8a 80 07 52 53 45 4a 4f 58 57 cf
>da18	cf 21 41 52 cf 2e 40 c3 02 00 1f c0 1a 8c 05 c1
>da28	85 8e 82 90 80 03 33 38 37 cf cf 21 46 43 cf 2e
>da38	40 c3 02 00 1f c0 17 96 05 c1 85 8e 82 8e 48 67
>da48	cf cf 21 48 67 cf 2e 40 c3 02 00 1f c0 19 a0 05
>da58	c1 85 8e 82 8d 80 03 46 47 4b cf cf 21 43 cf 2e
>da68	40 c3 02 00 1f c0 16 aa 05 c1 85 8e 82 8f 48 67
>da78	cf cf 21 41 cf 2e 40 c3 02 00 1f c0 17 b4 05 c1
>da88	85 8e 82 86 48 67 cf cf 21 48 67 cf 2e 40 c3 02
>da98	00 1f c0 1b be 05 c1 85 8e 82 8c 42 68 cf cf 21
>daa8	4c c3 03 96 15 ff cf 2e 40 c3 02 10 4f c0 1a c8
>dab8	05 c1 85 8e 82 8a 80 03 46 47 4b cf cf 21 41 46
>dac8	cf 2e 40 c3 02 00 1f c0 1a d2 05 c1 85 8e 82 90
>dad8	80 03 36 30 34 cf cf 21 49 5c cf 2e 40 c3 02 00
>dae8	1f c0 18 dc 05 c1 85 8e 82 8e 21 4d 5f cf cf 21
>daf8	4d 5f cf 2e 40 c3 02 00 1f c0 1f e6 05 c1 85 8e
>db08	82 8d 80 09 44 57 51 4f 4f 46 42 51 53 cf cf 21
>db18	49 cf 2e 40 c3 02 00 1f c0 18 f0 05 c1 85 8e 82
>db28	8f 21 4d 5f cf cf 21 21 41 cf 2e 40 c3 02 00 1f
>db38	c0 19 fa 05 c1 85 8e 82 86 21 4d 5f cf cf 21 21
>db48	4d 5f cf 2e 40 c3 02 00 1f c0 1a 04 06 c1 85 8e
>db58	82 8c 46 6b cf cf 21 54 c3 02 66 4f cf 2e 40 c3
>db68	02 16 5f c0 20 0e 06 c1 85 8e 82 8a 80 09 44 57
>db78	51 4f 4f 46 42 51 53 cf cf 21 41 44 cf 2e 40 c3
>db88	02 00 1f c0 23 18 06 c1 85 8e 82 90 80 07 2d 36
>db98	35 36 2e 36 34 cf cf 21 21 4a 50 c3 02 64 ff cf
>dba8	2e 40 c3 02 00 1f c0 15 22 06 c1 85 8e 82 8e 69
>dbb8	cf cf 21 69 cf 2e 40 c3 02 00 1f c0 1c 2c 06 c1
>dbc8	85 8e 82 8d 80 06 44 48 47 4b 48 56 cf cf 21 46
>dbd8	cf 2e 40 c3 02 00 1f c0 15 36 06 c1 85 8e 82 8f
>dbe8	69 cf cf 21 41 cf 2e 40 c3 02 00 1f c0 15 40 06
>dbf8	c1 85 8e 82 86 69 cf cf 21 69 cf 2e 40 c3 02 00
>dc08	1f c0 1b 4a 06 c1 85 8e 82 8c 46 65 cf cf 21 54
>dc18	c3 03 51 83 ff cf 2e 40 c3 02 16 4f c0 1d 54 06
>dc28	c1 85 8e 82 8a 80 06 44 48 47 4b 48 56 cf cf 21
>dc38	41 44 cf 2e 40 c3 02 00 1f c0 21 5e 06 c1 85 8e
>dc48	82 90 80 06 33 33 35 2e 34 39 cf cf 21 45 4f c3
>dc58	02 49 ff cf 2e 40 c3 02 00 1f c0 17 68 06 c1 85
>dc68	8e 82 8e 4f 66 cf cf 21 4f 66 cf 2e 40 c3 02 00
>dc78	1f c0 1e 72 06 c1 85 8e 82 8d 80 08 53 5a 54 5a
>dc88	41 4d 57 47 cf cf 21 48 cf 2e 40 c3 02 00 1f c0
>dc98	16 7c 06 c1 85 8e 82 8f 4f 66 cf cf 21 41 cf 2e
>dca8	40 c3 02 00 1f c0 17 86 06 c1 85 8e 82 86 4f 66
>dcb8	cf cf 21 4f 66 cf 2e 40 c3 02 00 1f c0 1f 90 06
>dcc8	c1 85 8e 82 8c 46 6d c3 02 67 ff cf cf 21 54 c3
>dcd8	03 72 85 ff cf 2e 40 c3 02 16 6f c0 1f 9a 06 c1
>dce8	85 8e 82 8a 80 08 53 5a 54 5a 41 4d 57 47 cf cf
>dcf8	21 41 53 cf 2e 40 c3 02 00 1f c0 21 a4 06 c1 85
>dd08	8e 82 90 80 06 36 34 31 2e 31 35 cf cf 21 4a 41
>dd18	c3 02 15 ff cf 2e 40 c3 02 00 1f c0 18 ae 06 c1
>dd28	85 8e 82 8e 21 48 56 cf cf 21 48 56 cf 2e 40 c3
>dd38	02 00 1f c0 20 b8 06 c1 85 8e 82 8d 80 0a 57 56
>dd48	50 5a 45 55 59 45 47 50 cf cf 21 4a cf 2e 40 c3
>dd58	02 00 1f c0 18 c2 06 c1 85 8e 82 8f 21 48 56 cf
>dd68	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 19 cc 06 c1
>dd78	85 8e 82 86 21 48 56 cf cf 21 21 48 56 cf 2e 40
>dd88	c3 02 00 1f c0 1b d6 06 c1 85 8e 82 8c 4f 4a cf
>dd98	cf 21 5f c3 03 14 48 ff cf 2e 40 c3 02 24 9f c0
>dda8	21 e0 06 c1 85 8e 82 8a 80 0a 57 56 50 5a 45 55
>ddb8	59 45 47 50 cf cf 21 41 57 cf 2e 40 c3 02 00 1f
>ddc8	c0 1a ea 06 c1 85 8e 82 90 80 03 39 30 33 cf cf
>ddd8	21 4e 47 cf 2e 40 c3 02 00 1f c0 1c f4 06 c1 85
>dde8	8e 82 8e 21 6e c3 01 3f cf cf 21 6e c3 01 3f cf
>ddf8	2e 40 c3 02 00 1f c0 1b fe 06 c1 85 8e 82 8d 80
>de08	05 44 54 54 4f 41 cf cf 21 45 cf 2e 40 c3 02 00
>de18	1f c0 1a 08 07 c1 85 8e 82 8f 21 6e c3 01 3f cf
>de28	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1a 12 07 c1
>de38	85 8e 82 86 21 6e c3 01 3f cf cf 21 21 6e cf 2e
>de48	40 c3 02 00 1f c0 1a 1c 07 c1 85 8e 82 8c 4a 5a
>de58	cf cf 21 59 c3 02 80 7f cf 2e 40 c3 02 20 6f c0
>de68	1c 26 07 c1 85 8e 82 8a 80 05 44 54 54 4f 41 cf
>de78	cf 21 41 44 cf 2e 40 c3 02 00 1f c0 1c 30 07 c1
>de88	85 8e 82 90 80 04 2d 38 30 38 cf cf 21 21 4c 68
>de98	cf 2e 40 c3 02 00 1f c0 20 3a 07 c1 85 8e 82 8e
>dea8	21 4d 70 c3 02 84 ff cf cf 21 4d 70 c3 02 84 ff
>deb8	cf 2e 40 c3 02 00 1f c0 1d 44 07 c1 85 8e 82 8d
>dec8	80 07 41 58 55 46 58 42 57 cf cf 21 47 cf 2e 40
>ded8	c3 02 00 1f c0 1c 4e 07 c1 85 8e 82 8f 21 4d 70
>dee8	c3 02 84 ff cf cf 21 21 41 cf 2e 40 c3 02 00 1f
>def8	c0 1d 58 07 c1 85 8e 82 86 21 4d 70 c3 02 84 ff
>df08	cf cf 21 21 4d 70 cf 2e 40 c3 02 00 1f c0 1f 62
>df18	07 c1 85 8e 82 8c 41 42 c3 02 01 ff cf cf 21 48
>df28	c3 03 12 47 ff cf 2e 40 c3 02 06 5f c0 1e 6c 07
>df38	c1 85 8e 82 8a 80 07 41 58 55 46 58 42 57 cf cf
>df48	21 41 41 cf 2e 40 c3 02 00 1f c0 1a 76 07 c1 85
>df58	8e 82 90 80 03 39 37 31 cf cf 21 4f 4b cf 2e 40
>df68	c3 02 00 1f c0 18 80 07 c1 85 8e 82 8e 21 4f 46
>df78	cf cf 21 4f 46 cf 2e 40 c3 02 00 1f c0 16 8a 07
>df88	c1 85 8e 82 8d 80 00 cf cf 21 40 cf 2e 40 c3 02
>df98	00 1f c0 18 94 07 c1 85 8e 82 8f 21 4f 46 cf cf
>dfa8	21 21 41 cf 2e 40 c3 02 00 1f c0 19 9e 07 c1 85
>dfb8	8e 82 86 21 4f 46 cf cf 21 21 4f 46 cf 2e 40 c3
>dfc8	02 00 1f c0 1a a8 07 c1 85 8e 82 8c 45 cf cf 21
>dfd8	42 c3 03 23 61 ff cf 2e 40 c3 02 01 8f c0 16 b2
>dfe8	07 c1 85 8e 82 8a 80 00 cf cf 21 40 cf 2e 40 c3
>dff8	02 00 1f c0 1a bc 07 c1 85 8e 82 90 80 03 35 37
>e008	37 cf cf 21 49 41 cf 2e 40 c3 02 00 1f c0 20 c6
>e018	07 c1 85 8e 82 8e 21 48 51 c3 02 23 ff cf cf 21
>e028	48 51 c3 02 23 ff cf 2e 40 c3 02 00 1f c0 1d d0
>e038	07 c1 85 8e 82 8d 80 07 48 43 59 50 48 52 59 cf
>e048	cf 21 47 cf 2e 40 c3 02 00 1f c0 1c da 07 c1 85
>e058	8e 82 8f 21 48 51 c3 02 23 ff cf cf 21 21 41 cf
>e068	2e 40 c3 02 00 1f c0 1d e4 07 c1 85 8e 82 86 21
>e078	48 51 c3 02 23 ff cf cf 21 21 48 51 cf 2e 40 c3
>e088	02 00 1f c0 1d ee 07 c1 85 8e 82 8c 48 69 c3 01
>e098	8f cf cf 21 57 c3 02 53 3f cf 2e 40 c3 02 18 8f
>e0a8	c0 1e f8 07 c1 85 8e 82 8a 80 07 48 43 59 50 48
>e0b8	52 59 cf cf 21 41 48 cf 2e 40 c3 02 00 1f c0 21
>e0c8	02 08 c1 85 8e 82 90 80 06 31 39 31 2e 38 33 cf
>e0d8	cf 21 42 7f c3 02 83 ff cf 2e 40 c3 02 00 1f c0
>e0e8	1f 0c 08 c1 85 8e 82 8e 4b 54 c3 02 96 ff cf cf
>e0f8	21 4b 54 c3 02 96 ff cf 2e 40 c3 02 00 1f c0 1e
>e108	16 08 c1 85 8e 82 8d 80 08 54 5a 47 57 55 4e 48
>e118	4b cf cf 21 48 cf 2e 40 c3 02 00 1f c0 1a 20 08
>e128	c1 85 8e 82 8f 4b 54 c3 02 96 ff cf cf 21 41 cf
>e138	2e 40 c3 02 00 1f c0 1b 2a 08 c1 85 8e 82 86 4b
>e148	54 c3 02 96 ff cf cf 21 4b 54 cf 2e 40 c3 02 00
>e158	1f c0 1e 34 08 c1 85 8e 82 8c 48 54 c3 02 78 ff
>e168	cf cf 21 57 c3 02 08 2f cf 2e 40 c3 02 18 5f c0
>e178	1f 3e 08 c1 85 8e 82 8a 80 08 54 5a 47 57 55 4e
>e188	48 4b cf cf 21 41 54 cf 2e 40 c3 02 00 1f c0 1a
>e198	48 08 c1 85 8e 82 90 80 03 34 31 30 cf cf 21 46
>e1a8	5a cf 2e 40 c3 02 00 1f c0 18 52 08 c1 85 8e 82
>e1b8	8e 21 4f 4a cf cf 21 4f 4a cf 2e 40 c3 02 00 1f
>e1c8	c0 1a 5c 08 c1 85 8e 82 8d 80 04 57 4d 4b 51 cf
>e1d8	cf 21 44 cf 2e 40 c3 02 00 1f c0 18 66 08 c1 85
>e1e8	8e 82 8f 21 4f 4a cf cf 21 21 41 cf 2e 40 c3 02
>e1f8	00 1f c0 19 70 08 c1 85 8e 82 86 21 4f 4a cf cf
>e208	21 21 4f 4a cf 2e 40 c3 02 00 1f c0 1e 7a 08 c1
>e218	85 8e 82 8c 48 50 c3 02 63 ff cf cf 21 56 c3 02
>e228	99 2f cf 2e 40 c3 02 18 4f c0 1b 84 08 c1 85 8e
>e238	82 8a 80 04 57 4d 4b 51 cf cf 21 41 57 cf 2e 40
>e248	c3 02 00 1f c0 1a 8e 08 c1 85 8e 82 90 80 03 34
>e258	36 39 cf cf 21 47 55 cf 2e 40 c3 02 00 1f c0 08
>e268	98 08 c9 4f 7f 7f c0 00

;******  End of listing
