
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -q -b --mr65c02 -Wall -L build/basic.lst -o build/basic.bin basic.asm
; Mon Dec  4 10:23:37 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

.c000	4c 03 c0	jmp $c003	boot:	jmp 	ColdStart
.c003					ColdStart:
.c003	4c 55 c4	jmp $c455			jmp 	Command_RUN

;******  Processing file: _include.inc


;******  Processing file: sources/00data/00data_config.inc


;******  Return to file: _include.inc


;******  Processing file: sources/00data/01data.inc

=65280					ControlCommand = ControlPort+0
=65281					ControlFunction = ControlPort+1
=65282					ControlError = ControlPort+2
=65283					ControlStatus = ControlPort+3
=8					StackSize = 8
=$c0					XS_TYPEMASK = $C0
=$80					XS_TYPEBIT = $80
=$80					XS_STRING = $80
=$20					XS_ISREFERENCE = $20
=$10					XS_ISBYTEREFERENCE = $10
.0010					XSStack:
.0010					XSControl:
>0010							.fill 	StackSize
.0018					XSNumber0:
>0018							.fill 	StackSize
.0020					XSNumber1:
>0020							.fill 	StackSize
.0028					XSNumber2:
>0028							.fill 	StackSize
.0030					XSNumber3:
>0030							.fill 	StackSize
.0038					zTemp0:
>0038							.fill 	2
.003a					CodePtr:
>003a							.fill 	2
.0200					ERRLine:
>0200							.fill 	2

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/binary.inc


;******  Return to file: _include.inc


;******  Processing file: sources/generated/errors.inc


;******  Return to file: _include.inc


;******  Processing file: sources/generated/kwdconst.inc

=$20					KWD_PLUS                           = $20 ; +
=$21					KWD_MINUS                          = $21 ; -
=$22					KWD_ASTERISK                       = $22 ; *
=$23					KWD_SLASH                          = $23 ; /
=$24					KWD_GREATERGREATER                 = $24 ; >>
=$25					KWD_LESSLESS                       = $25 ; <<
=$26					KWD_PERCENT                        = $26 ; %
=$27					KWD_BACKSLASH                      = $27 ; \
=$28					KWD_AMPERSAND                      = $28 ; &
=$29					KWD_VBAR                           = $29 ; |
=$2a					KWD_HAT                            = $2a ; ^
=$2b					KWD_GREATER                        = $2b ; >
=$2c					KWD_GREATEREQUAL                   = $2c ; >=
=$2d					KWD_LESS                           = $2d ; <
=$2e					KWD_LESSEQUAL                      = $2e ; <=
=$2f					KWD_LESSGREATER                    = $2f ; <>
=$30					KWD_EQUAL                          = $30 ; =
=$31					KWD_PLING                          = $31 ; !
=$32					KWD_QMARK                          = $32 ; ?
=$80					KWD_SYS_STR                        = $80 ; !!str
=$81					KWD_DOLLAR                         = $81 ; $
=$82					KWD_LPAREN                         = $82 ; (
=$83					KWD_RANDLPAREN                     = $83 ; rand(
=$84					KWD_RNDLPAREN                      = $84 ; rnd(
=$85					KWD_ISVALLPAREN                    = $85 ; isval(
=$86					KWD_INTLPAREN                      = $86 ; int(
=$87					KWD_TIME                           = $87 ; time
=$88					KWD_EVENTLPAREN                    = $88 ; event(
=$89					KWD_INKEYDOLLARLPAREN              = $89 ; inkey$(
=$8a					KWD_ASCLPAREN                      = $8a ; asc(
=$8b					KWD_CHRDOLLARLPAREN                = $8b ; chr$(
=$8c					KWD_SQRLPAREN                      = $8c ; sqr(
=$8d					KWD_LENLPAREN                      = $8d ; len(
=$8e					KWD_ABSLPAREN                      = $8e ; abs(
=$8f					KWD_SGNLPAREN                      = $8f ; sgn(
=$90					KWD_VALLPAREN                      = $90 ; val(
=$91					KWD_STRDOLLARLPAREN                = $91 ; str$(
=$92					KWD_MIDDOLLARLPAREN                = $92 ; mid$(
=$93					KWD_LEFTDOLLARLPAREN               = $93 ; left$(
=$94					KWD_RIGHTDOLLARLPAREN              = $94 ; right$(
=$95					KWD_SINLPAREN                      = $95 ; sin(
=$96					KWD_COSLPAREN                      = $96 ; cos(
=$97					KWD_TANLPAREN                      = $97 ; tan(
=$98					KWD_ATANLPAREN                     = $98 ; atan(
=$99					KWD_LOGLPAREN                      = $99 ; log(
=$9a					KWD_EXPLPAREN                      = $9a ; exp(
=$9b					KWD_KEYLPAREN                      = $9b ; key(
=$b0					KWD_WHILE                          = $b0 ; while
=$b1					KWD_WEND                           = $b1 ; wend
=$b2					KWD_IF                             = $b2 ; if
=$b3					KWD_ENDIF                          = $b3 ; endif
=$b4					KWD_DO                             = $b4 ; do
=$b5					KWD_LOOP                           = $b5 ; loop
=$b6					KWD_REPEAT                         = $b6 ; repeat
=$b7					KWD_UNTIL                          = $b7 ; until
=$b8					KWD_PROC                           = $b8 ; proc
=$b9					KWD_ENDPROC                        = $b9 ; endproc
=$ba					KWD_FOR                            = $ba ; for
=$bb					KWD_NEXT                           = $bb ; next
=$bc					KWD_CASE                           = $bc ; case
=$bd					KWD_ENDCASE                        = $bd ; endcase
=$be					KWD_SYS_UN1                        = $be ; !!un1
=$bf					KWD_THEN                           = $bf ; then
=$c0					KWD_SYS_END                        = $c0 ; !!end
=$c1					KWD_SYS_SH1                        = $c1 ; !!sh1
=$c2					KWD_SYS_SH2                        = $c2 ; !!sh2
=$c3					KWD_SYS_DEC                        = $c3 ; !!dec
=$c4					KWD_TO                             = $c4 ; to
=$c5					KWD_LET                            = $c5 ; let
=$c6					KWD_PRINT                          = $c6 ; print
=$c7					KWD_INPUT                          = $c7 ; input
=$c8					KWD_CALL                           = $c8 ; call
=$c9					KWD_SYS                            = $c9 ; sys
=$ca					KWD_EXIT                           = $ca ; exit
=$cb					KWD_COMMA                          = $cb ; ,
=$cc					KWD_SEMICOLON                      = $cc ; ;
=$cd					KWD_COLON                          = $cd ; :
=$ce					KWD_SQUOTE                         = $ce ; '
=$cf					KWD_RPAREN                         = $cf ; )
=$d0					KWD_READ                           = $d0 ; read
=$d1					KWD_DATA                           = $d1 ; data
=$d2					KWD_LSQ                            = $d2 ; [
=$d3					KWD_RSQ                            = $d3 ; ]
=$d4					KWD_HASH                           = $d4 ; #
=$d5					KWD_PERIOD                         = $d5 ; .
=$d6					KWD_ELSE                           = $d6 ; else
=$d7					KWD_WHEN                           = $d7 ; when
=$d8					KWD_DOWNTO                         = $d8 ; downto
=$180					KWD_CLEAR                          = $180 ; clear
=$181					KWD_NEW                            = $181 ; new
=$182					KWD_RUN                            = $182 ; run
=$183					KWD_STOP                           = $183 ; stop
=$184					KWD_END                            = $184 ; end
=$185					KWD_ASSERT                         = $185 ; assert
=$186					KWD_LIST                           = $186 ; list
=$187					KWD_SAVE                           = $187 ; save
=$188					KWD_LOAD                           = $188 ; load
=$189					KWD_GOSUB                          = $189 ; gosub
=$18a					KWD_GOTO                           = $18a ; goto
=$18b					KWD_RETURN                         = $18b ; return
=$18c					KWD_RESTORE                        = $18c ; restore
=$18d					KWD_DIM                            = $18d ; dim

;******  Return to file: _include.inc


;******  Processing file: sources/generated/neo6502.inc

=$ff00					ControlPort = $ff00
=$ffee					ReadCharacter = $ffee
=$fff1					WriteCharacter = $fff1
=$fff4					WaitMessage = $fff4
=$fff7					SendMessage = $fff7

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/compare.asm

.c006					CMPReturnTrue:
.c006	a9 ff		lda #$ff			lda 	#$FF
.c008	80 02		bra $c00c			bra 	CMPSetTOS
.c00a					CMPReturnFalse:
.c00a	a9 00		lda #$00			lda 	#0
.c00c					CMPSetTOS:
.c00c	95 30		sta $30,x			sta 	XSNumber3,x
.c00e	95 28		sta $28,x			sta 	XSNumber2,x
.c010	95 20		sta $20,x			sta 	XSNumber1,x
.c012	95 18		sta $18,x			sta 	XSNumber0,x
.c014	74 10		stz $10,x			stz 	XSControl,x
.c016	4c b6 c1	jmp $c1b6			jmp 	EXPRMainLoop
.c019					CMPCompareEqual:
.c019	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c01c	c9 00		cmp #$00			cmp 	#0
.c01e	f0 e6		beq $c006			beq 	CMPReturnTrue
.c020	80 e8		bra $c00a			bra 	CMPReturnFalse
.c022					CMPCompareLess:
.c022	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c025	c9 ff		cmp #$ff			cmp 	#$FF
.c027	f0 dd		beq $c006			beq 	CMPReturnTrue
.c029	80 df		bra $c00a			bra 	CMPReturnFalse
.c02b					CMPCompareGreater:
.c02b	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c02e	c9 01		cmp #$01			cmp 	#1
.c030	f0 d4		beq $c006			beq 	CMPReturnTrue
.c032	80 d6		bra $c00a			bra 	CMPReturnFalse
.c034					CMPCompareNotEqual:
.c034	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c037	c9 00		cmp #$00			cmp 	#0
.c039	d0 cb		bne $c006			bne 	CMPReturnTrue
.c03b	80 cd		bra $c00a			bra 	CMPReturnFalse
.c03d					CMPCompareLessEqual:
.c03d	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c040	c9 01		cmp #$01			cmp 	#1
.c042	d0 c2		bne $c006			bne 	CMPReturnTrue
.c044	80 c4		bra $c00a			bra 	CMPReturnFalse
.c046					CMPCompareGreaterEqual:
.c046	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c049	c9 ff		cmp #$ff			cmp 	#$FF
.c04b	d0 b9		bne $c006			bne 	CMPReturnTrue
.c04d	80 bb		bra $c00a			bra 	CMPReturnFalse
.c04f					CMPCompareBaseCode:
.c04f	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes 		; dereference, check types match.
.c052	30 0d		bmi $c061			bmi 	_CMPTypeError
.c054	b5 10		lda $10,x			lda 	XSControl,x
.c056	30 0e		bmi $c066			bmi 	_CMPString 					; string ?
.c058	a9 06		lda #$06			lda 	#6 							; use coprocessor to compare
.c05a	20 28 c3	jsr $c328			jsr 	DOMathCommand
.c05d	ad 03 ff	lda $ff03			lda 	ControlStatus 				; get result.
.c060	60		rts				rts
.c061					_CMPTypeError:
.c061	a9 02		lda #$02		lda	#2
.c063	4c 38 c8	jmp $c838		jmp	ErrorHandler
.c066					_CMPString:
>c066	03						.byte 	3 			; UNIMPLEMENTED

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/mathint.asm

.c067					BinaryAnd:
.c067	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c06a	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c06d	b5 18		lda $18,x			lda 	XSNumber0,x
.c06f	35 19		and $19,x			and 		XSNumber0+1,x
.c071	95 18		sta $18,x			sta 	XSNumber0,x
.c073	b5 20		lda $20,x			lda 	XSNumber1,x
.c075	35 21		and $21,x			and 		XSNumber1+1,x
.c077	95 20		sta $20,x			sta 	XSNumber1,x
.c079	b5 28		lda $28,x			lda 	XSNumber2,x
.c07b	35 29		and $29,x			and 		XSNumber2+1,x
.c07d	95 28		sta $28,x			sta 	XSNumber2,x
.c07f	b5 30		lda $30,x			lda 	XSNumber3,x
.c081	35 31		and $31,x			and 		XSNumber3+1,x
.c083	95 30		sta $30,x			sta 	XSNumber3,x
.c085	4c b6 c1	jmp $c1b6			jmp 	EXPRMainLoop
.c088					BinaryXor:
.c088	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c08b	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c08e	b5 18		lda $18,x			lda 	XSNumber0,x
.c090	55 19		eor $19,x			eor 		XSNumber0+1,x
.c092	95 18		sta $18,x			sta 	XSNumber0,x
.c094	b5 20		lda $20,x			lda 	XSNumber1,x
.c096	55 21		eor $21,x			eor 		XSNumber1+1,x
.c098	95 20		sta $20,x			sta 	XSNumber1,x
.c09a	b5 28		lda $28,x			lda 	XSNumber2,x
.c09c	55 29		eor $29,x			eor 		XSNumber2+1,x
.c09e	95 28		sta $28,x			sta 	XSNumber2,x
.c0a0	b5 30		lda $30,x			lda 	XSNumber3,x
.c0a2	55 31		eor $31,x			eor 		XSNumber3+1,x
.c0a4	95 30		sta $30,x			sta 	XSNumber3,x
.c0a6	4c b6 c1	jmp $c1b6			jmp 	EXPRMainLoop
.c0a9					BinaryOr:
.c0a9	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c0ac	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c0af	b5 18		lda $18,x			lda 	XSNumber0,x
.c0b1	15 19		ora $19,x			ora 		XSNumber0+1,x
.c0b3	95 18		sta $18,x			sta 	XSNumber0,x
.c0b5	b5 20		lda $20,x			lda 	XSNumber1,x
.c0b7	15 21		ora $21,x			ora 		XSNumber1+1,x
.c0b9	95 20		sta $20,x			sta 	XSNumber1,x
.c0bb	b5 28		lda $28,x			lda 	XSNumber2,x
.c0bd	15 29		ora $29,x			ora 		XSNumber2+1,x
.c0bf	95 28		sta $28,x			sta 	XSNumber2,x
.c0c1	b5 30		lda $30,x			lda 	XSNumber3,x
.c0c3	15 31		ora $31,x			ora 		XSNumber3+1,x
.c0c5	95 30		sta $30,x			sta 	XSNumber3,x
.c0c7	4c b6 c1	jmp $c1b6			jmp 	EXPRMainLoop
.c0ca					BinaryShiftLeft:
.c0ca	38		sec				sec
.c0cb	80 01		bra $c0ce			bra 	BinaryShift
.c0cd					BinaryShiftRight:
.c0cd	18		clc				clc
.c0ce					BinaryShift:
.c0ce	08		php				php									; save direction, CS left CC right.
.c0cf	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c0d2	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c0d5	b5 19		lda $19,x			lda 	XSNumber0+1,x 				; if shift >=32 will be zero
.c0d7	29 e0		and #$e0			and 	#$E0
.c0d9	15 21		ora $21,x			ora 	XSNumber1+1,x
.c0db	15 22		ora $22,x			ora 	XSNumber1+2,x
.c0dd	15 23		ora $23,x			ora 	XSNumber1+3,x
.c0df	d0 20		bne $c101			bne 	_BSIsZero
.c0e1	b5 19		lda $19,x			lda 	XSNumber0+1,x 				; check zero at start
.c0e3	f0 24		beq $c109			beq 	_BSExit
.c0e5					_BSLoop:
.c0e5	28		plp				plp 								; access diection
.c0e6	08		php				php
.c0e7	b0 0a		bcs $c0f3			bcs 	_BSLeft
.c0e9	56 30		lsr $30,x			lsr 	XSNumber3,x 				; shift right
.c0eb	76 28		ror $28,x			ror 	XSNumber2,x
.c0ed	76 20		ror $20,x			ror 	XSNumber1,x
.c0ef	76 18		ror $18,x			ror 	XSNumber0,x
.c0f1	80 08		bra $c0fb			bra 	_BSExitLoop
.c0f3					_BSLeft:
.c0f3	16 18		asl $18,x			asl 	XSNumber0,x 				; shift left
.c0f5	36 20		rol $20,x			rol 	XSNumber1,x
.c0f7	36 28		rol $28,x			rol 	XSNumber2,x
.c0f9	36 30		rol $30,x			rol 	XSNumber3,x
.c0fb					_BSExitLoop:
.c0fb	d6 19		dec $19,x			dec 	XSNumber0+1,x 				; do that many times
.c0fd	d0 e6		bne $c0e5			bne 	_BSLoop
.c0ff	80 08		bra $c109			bra 	_BSExit
.c101					_BSIsZero:
.c101	74 18		stz $18,x			stz 	XSNumber0,x					; return zero.
.c103	74 20		stz $20,x			stz 	XSNumber1,x
.c105	74 28		stz $28,x			stz 	XSNumber2,x
.c107	74 30		stz $30,x			stz 	XSNumber3,x
.c109					_BSExit:
.c109	28		plp				plp 								; throw direction.
.c10a	4c b6 c1	jmp $c1b6			jmp 	EXPRMainLoop
.c10d					BinRefWord:
.c10d	a9 20		lda #$20			lda 	#XS_ISREFERENCE
.c10f	80 02		bra $c113			bra 	BinRefMain
.c111					BinRefByte:
.c111	a9 30		lda #$30			lda 	#XS_ISREFERENCE|XS_ISBYTEREFERENCE
.c113					BinRefMain:
.c113	48		pha				pha
.c114	18		clc				clc
.c115	b5 18		lda $18,x			lda 	XSNumber0,x
.c117	75 19		adc $19,x			adc 		XSNumber0+1,x
.c119	95 18		sta $18,x			sta 	XSNumber0,x
.c11b	b5 20		lda $20,x			lda 	XSNumber1,x
.c11d	75 21		adc $21,x			adc 		XSNumber1+1,x
.c11f	95 20		sta $20,x			sta 	XSNumber1,x
.c121	b5 28		lda $28,x			lda 	XSNumber2,x
.c123	75 29		adc $29,x			adc 		XSNumber2+1,x
.c125	95 28		sta $28,x			sta 	XSNumber2,x
.c127	b5 30		lda $30,x			lda 	XSNumber3,x
.c129	75 31		adc $31,x			adc 		XSNumber3+1,x
.c12b	95 30		sta $30,x			sta 	XSNumber3,x
.c12d	68		pla				pla
.c12e	95 10		sta $10,x			sta 	XSControl,x
.c130	4c b6 c1	jmp $c1b6			jmp 	EXPRMainLoop
.c133					MICheckBothInteger:
.c133	b5 10		lda $10,x			lda 	XSControl,x
.c135	15 10		ora $10,x			ora 	XSControl,x
.c137	29 c0		and #$c0			and 	#$C0
.c139	d0 01		bne $c13c			bne 	_MICBIType
.c13b	60		rts				rts
.c13c					_MICBIType:
.c13c	a9 02		lda #$02		lda	#2
.c13e	4c 38 c8	jmp $c838		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/mathstd.asm

.c141					DereferenceCheckTypes:
.c141	20 ad c1	jsr $c1ad			jsr 	DereferenceTerm 			; dereference first
.c144	e8		inx				inx
.c145	20 ad c1	jsr $c1ad			jsr 	DereferenceTerm 			; dereference second
.c148	ca		dex				dex
.c149	b5 10		lda $10,x			lda 	XSControl,x 				; eor top bits, so non zero if different.
.c14b	55 11		eor $11,x			eor 	XSControl+1,x
.c14d	30 03		bmi $c152			bmi 	DRCType 					; type mismatch.
.c14f	34 10		bit $10,x			bit 	XSControl,x 				; and set NV from the actual type
.c151	60		rts				rts
.c152					DRCType:
.c152	a9 02		lda #$02		lda	#2
.c154	4c 38 c8	jmp $c838		jmp	ErrorHandler
.c157					BinaryAdd:
.c157	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c15a	30 f6		bmi $c152			bmi 	DRCType
.c15c	a9 00		lda #$00			lda 	#0
.c15e	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c161	4c b6 c1	jmp $c1b6			jmp 	EXPRMainLoop
.c164					BinaryMinus:
.c164	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c167	30 e9		bmi $c152			bmi 	DRCType
.c169	a9 01		lda #$01			lda 	#1
.c16b	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c16e	4c b6 c1	jmp $c1b6			jmp 	EXPRMainLoop
.c171					BinaryTimes:
.c171	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c174	30 dc		bmi $c152			bmi 	DRCType
.c176	a9 02		lda #$02			lda 	#2
.c178	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c17b	4c b6 c1	jmp $c1b6			jmp 	EXPRMainLoop
.c17e					BinaryFDiv:
.c17e	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c181	30 cf		bmi $c152			bmi 	DRCType
.c183	a9 03		lda #$03			lda 	#3
.c185	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c188					BinaryCheckResult:
.c188	ad 02 ff	lda $ff02			lda 	ControlError
.c18b	d0 03		bne $c190			bne 	_BCRError
.c18d	4c b6 c1	jmp $c1b6			jmp 	EXPRMainLoop
.c190					_BCRError:
.c190	a9 03		lda #$03		lda	#3
.c192	4c 38 c8	jmp $c838		jmp	ErrorHandler
.c195					BinaryUDiv:
.c195	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c198	30 b8		bmi $c152			bmi 	DRCType
.c19a	a9 04		lda #$04			lda 	#4
.c19c	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c19f	80 e7		bra $c188			bra 	BinaryCheckResult
.c1a1					BinaryModulus:
.c1a1	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c1a4	30 ac		bmi $c152			bmi 	DRCType
.c1a6	a9 05		lda #$05			lda 	#5
.c1a8	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c1ab	80 db		bra $c188			bra 	BinaryCheckResult

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/dereference.asm

.c1ad					DereferenceTerm:
.c1ad	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/expression.asm

.c1ae					EXPEvaluateExpressionRestart:
.c1ae	a2 00		ldx #$00			ldx 	#0 							; start from base of stack.
.c1b0					EXPEvaluateExpression:
.c1b0	a9 00		lda #$00			lda 	#0 							; current precedence is 0.
.c1b2					EXPEvaluateExpressionPrecedenceA:
.c1b2	48		pha				pha		 							; push on stack.
.c1b3	20 37 c2	jsr $c237			jsr 	EvaluateTerm 				; evaluate term at this level.
.c1b6					EXPRMainLoop:
.c1b6	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.c1b8	29 e0		and #$e0			and 	#$E0 						; is it $20-$3F, e.g. a binary operator.
.c1ba	c9 20		cmp #$20			cmp 	#$20
.c1bc	d0 2e		bne $c1ec			bne 	_EEExit
.c1be	da		phx				phx 			 					; get binary precedence for current operator -> zTemp0+1
.c1bf	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get the operator again
.c1c1	aa		tax				tax
.c1c2	bd e5 c6	lda $c6e5,x			lda 	BinaryPrecedence-$20,x 		; get the binary operator precedence.
.c1c5	85 39		sta $39				sta 	zTemp0+1
.c1c7	fa		plx				plx
.c1c8	68		pla				pla 								; restore current precedence.
.c1c9	c5 39		cmp $39				cmp 	zTemp0+1 					; if >= operator precedence then exit
.c1cb	b0 20		bcs $c1ed			bcs 	_EEExit2
.c1cd	48		pha				pha 								; save current precedence on the 6502 stack.
.c1ce	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get the operator back.
.c1d0	c8		iny				iny 								; consume operator.
.c1d1	48		pha				pha 								; save the operator.
.c1d2	a5 39		lda $39				lda 	zTemp0+1					; get precedence of operator
.c1d4	e8		inx				inx 								; space for it on the stack and do the RHS.
.c1d5	20 b2 c1	jsr $c1b2			jsr 	EXPEvaluateExpressionPrecedenceA
.c1d8	ca		dex				dex 								; back to original value.
.c1d9	68		pla				pla 								; load operator
.c1da	29 1f		and #$1f			and 	#$1F 						; mask out bits
.c1dc	0a		asl a				asl 	a 							; double as look up table, also Clear Carry
.c1dd	69 18		adc #$18			adc 	#(BinaryVectorTable & $FF) 	; work out the address to do the indirect jump.
.c1df	8d ea c1	sta $c1ea			sta 	_EXPRIndirectJump+1
.c1e2	a9 c7		lda #$c7			lda 	#(BinaryVectorTable >> 8)
.c1e4	69 00		adc #$00			adc 	#0
.c1e6	8d eb c1	sta $c1eb			sta 	_EXPRIndirectJump+2
.c1e9					_EXPRIndirectJump:
.c1e9	6c ff ff	jmp ($ffff)			jmp 	($FFFF) 					; jump to the code routine, loops back to EXPRMainLoop
.c1ec					_EEExit:
.c1ec	68		pla				pla 								; throw precedence
.c1ed					_EEExit2:
.c1ed	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/exprutils.asm

.c1ee					EXPEvalNumber:
.c1ee	20 b0 c1	jsr $c1b0			jsr 	EXPEvaluateExpression 		; get a value
.c1f1	20 ad c1	jsr $c1ad			jsr 	DereferenceTerm 			; dereference it
.c1f4	34 10		bit $10,x			bit 	XSControl,x	 				; fail if string
.c1f6	30 01		bmi $c1f9			bmi 	EVUType
.c1f8	60		rts				rts
.c1f9					EVUType:
.c1f9	a9 02		lda #$02		lda	#2
.c1fb	4c 38 c8	jmp $c838		jmp	ErrorHandler
.c1fe					EXPEvalInteger:
.c1fe	20 ee c1	jsr $c1ee			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.c201	34 10		bit $10,x			bit 	XSControl,x 				; integer ?
.c203	f0 05		beq $c20a			beq 	_EEIExit
.c205	a9 11		lda #$11			lda 	#17 						; no, make it integer
.c207	20 28 c3	jsr $c328			jsr 	DOMathCommand
.c20a					_EEIExit:
.c20a	60		rts				rts
.c20b					EXPEvalInteger16:
.c20b	20 fe c1	jsr $c1fe			jsr 	EXPEvalInteger 				; get integer
.c20e	b5 30		lda $30,x			lda 	XSNumber3,x
.c210	15 28		ora $28,x			ora 	XSNumber2,x
.c212	d0 1e		bne $c232			bne 	EVURange
.c214	60		rts				rts
.c215					EXPEvalInteger8:
.c215	20 fe c1	jsr $c1fe			jsr 	EXPEvalInteger 				; get integer
.c218	b5 20		lda $20,x			lda 	XSNumber1,x 				; range 00-FF
.c21a	d0 16		bne $c232			bne 	EVURange
.c21c	b5 18		lda $18,x			lda 	XSNumber0,x
.c21e	60		rts				rts
.c21f					EXPEvalString:
.c21f	20 b0 c1	jsr $c1b0			jsr 	EXPEvaluateExpression 		; get a value
.c222	20 ad c1	jsr $c1ad			jsr 	DereferenceTerm 			; dereference it
.c225	34 10		bit $10,x			bit 	XSControl,x	 				; fail if string
.c227	10 d0		bpl $c1f9			bpl 	EVUType
.c229	b5 18		lda $18,x			lda 	XSNumber0,x
.c22b	85 38		sta $38				sta 	zTemp0
.c22d	b5 20		lda $20,x			lda 	XSNumber1,x
.c22f	85 39		sta $39				sta 	zTemp0+1
.c231	60		rts				rts
.c232					EVURange:
.c232	a9 04		lda #$04		lda	#4
.c234	4c 38 c8	jmp $c838		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/term.asm

.c237					EvaluateTerm:
.c237	b1 3a		lda ($3a),y			lda 	(CodePtr),y 				; get next token
.c239	30 0a		bmi $c245			bmi 	_ETKeyword 					; is it a keyword (80-FF) ?
.c23b	0a		asl a				asl		a							; is it a number (40-7F)
.c23c	10 1f		bpl $c25d			bpl		_ETIdentifierOrSpecial 		; if 00-3F then it is an identifier, or a multi purpose unary ! ? -
.c23e	20 c1 c2	jsr $c2c1			jsr 	ExtractTokenisedInteger
.c241	20 07 c3	jsr $c307			jsr 	CheckFollowingDecimal
.c244	60		rts				rts
.c245					_ETKeyword:
.c245	c9 b0		cmp #$b0			cmp 	#$B0 						; is it a unary function ?
.c247	b0 36		bcs $c27f			bcs 	_ETSyntax
.c249	da		phx				phx
.c24a	0a		asl a				asl 	a 							; access address to jump
.c24b	aa		tax				tax
.c24c	bd 5a c7	lda $c75a,x			lda 	StandardVectorTable,x
.c24f	8d 5b c2	sta $c25b			sta 	_ETVector+1
.c252	bd 5b c7	lda $c75b,x			lda 	StandardVectorTable+1,x
.c255	8d 5c c2	sta $c25c			sta 	_ETVector+2
.c258	fa		plx				plx 								; restore stack pos and go there.
.c259	c8		iny				iny 								; consume
.c25a					_ETVector:
.c25a	4c ff ff	jmp $ffff			jmp 	$FFFF
.c25d					_ETIdentifierOrSpecial:
.c25d	0a		asl a			 	asl 	a 							; bit 5 now in sign slot
.c25e	10 40		bpl $c2a0		 	bpl 	_ETIsIdentifier  			; 0 it is 00-1F e.g. identifier
.c260	b1 3a		lda ($3a),y		 	lda 	(codePtr),y 				; get and consume. clearer than reuse
.c262	c8		iny			 	iny
.c263	c9 21		cmp #$21		 	cmp 	#KWD_MINUS 					; negation.
.c265	d0 10		bne $c277		 	bne 	_ETCheckReference
.c267	20 37 c2	jsr $c237		 	jsr 	EvaluateTerm 				; it's minus *something*.
.c26a	20 ad c1	jsr $c1ad		 	jsr 	DereferenceTerm 			; dereference it.
.c26d	b5 10		lda $10,x		 	lda 	XSControl,x 				; numeric term ?
.c26f	30 2a		bmi $c29b		 	bmi 	_ETBadType
.c271	a9 10		lda #$10		 	lda 	#16 						; negation function - needs optimising for ints
.c273	20 28 c3	jsr $c328		 	jsr 	DoMathCommand 				; work it out
.c276	60		rts			 	rts
.c277					_ETCheckReference:
.c277	c9 32		cmp #$32			cmp 	#KWD_QMARK
.c279	f0 09		beq $c284			beq 	_ETHaveReference
.c27b	49 31		eor #$31			eor 	#KWD_PLING
.c27d	f0 05		beq $c284			beq 	_ETHaveReference
.c27f					_ETSyntax:
.c27f	a9 01		lda #$01		lda	#1
.c281	4c 38 c8	jmp $c838		jmp	ErrorHandler
.c284					_ETHaveReference:
.c284	48		pha				pha 								; save type.
.c285	20 37 c2	jsr $c237		 	jsr 	EvaluateTerm 				; get reference address
.c288	20 ad c1	jsr $c1ad		 	jsr 	DereferenceTerm
.c28b	b5 10		lda $10,x		 	lda 	XSControl,x 				; must be integer
.c28d	29 c0		and #$c0		 	and 	#XS_TYPEMASK
.c28f	d0 0a		bne $c29b		 	bne 	_ETBadType
.c291	68		pla			 	pla 								; get type of reference back
.c292	f0 02		beq $c296		 	beq 	_ETIsWord 					; if zero, it's a word reference
.c294	a9 10		lda #$10		 	lda 	#XS_ISBYTEREFERENCE
.c296					_ETIsWord:
.c296	09 20		ora #$20			ora 	#XS_ISREFERENCE 			; now $20 / $30 for word/byte reference
.c298	95 10		sta $10,x			sta 	XSControl,x 				; update type
.c29a	60		rts				rts
.c29b					_ETBadType:
.c29b	a9 02		lda #$02		lda	#2
.c29d	4c 38 c8	jmp $c838		jmp	ErrorHandler
.c2a0					_ETIsIdentifier:
.c2a0	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get the MSB of the identifier address.
.c2a2	c8		iny				iny
.c2a3	18		clc				clc
.c2a4	69 c9		adc #$c9			adc 	#Program >> 8 				; convert to a real address.
.c2a6	95 20		sta $20,x			sta 	XSNumber1,x
.c2a8	85 39		sta $39				sta 	zTemp0+1
.c2aa	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; LSB - on a page boundary
.c2ac	95 18		sta $18,x			sta 	XSNumber0,x
.c2ae	85 38		sta $38				sta 	zTemp0
.c2b0	74 28		stz $28,x			stz 	XSNumber2,x 				; neatness
.c2b2	74 30		stz $30,x			stz 	XSNumber3,x
.c2b4	5a		phy				phy 								; read and update the type/control
.c2b5	a0 04		ldy #$04			ldy 	#4
.c2b7	b1 38		lda ($38),y			lda 	(zTemp0),y
.c2b9	29 c0		and #$c0			and 	#XS_TYPEMASK 				; type info
.c2bb	09 20		ora #$20			ora 	#XS_ISREFERENCE 			; set reference bit (is word)
.c2bd	7a		ply				ply
.c2be	95 10		sta $10,x			sta 	XSControl,x
.c2c0	60		rts				rts
.c2c1					ExtractTokenisedInteger:
.c2c1	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get first token, known to be 40-7F
.c2c3	29 3f		and #$3f			and 	#$3F 						; mask off upper bits
.c2c5	95 18		sta $18,x			sta 	XSNumber0,x 				; initial value.
.c2c7	74 20		stz $20,x			stz 	XSNumber1,x
.c2c9	74 28		stz $28,x			stz 	XSNumber2,x
.c2cb	74 30		stz $30,x			stz 	XSNumber3,x
.c2cd	74 10		stz $10,x			stz 	XSControl,x 				; integer constant
.c2cf					_ETConstant:
.c2cf	c8		iny				iny 								; look at next
.c2d0	b1 3a		lda ($3a),y			lda 	(CodePtr),y
.c2d2	29 c0		and #$c0			and 	#$C0 						; is it $40..$7F
.c2d4	c9 40		cmp #$40			cmp 	#$40
.c2d6	d0 2e		bne $c306			bne 	_ETExit
.c2d8	b5 30		lda $30,x			lda 	XSNumber3,x 				; save the upper byte.
.c2da	48		pha				pha
.c2db	b5 28		lda $28,x			lda 	XSNumber2,x 				; multiply old by 256
.c2dd	95 30		sta $30,x			sta 	XSNumber3,x
.c2df	b5 20		lda $20,x			lda 	XSNumber1,x
.c2e1	95 28		sta $28,x			sta 	XSNumber2,x
.c2e3	b5 18		lda $18,x			lda 	XSNumber0,x
.c2e5	95 20		sta $20,x			sta 	XSNumber1,x
.c2e7	74 18		stz $18,x			stz 	XSNumber0,x
.c2e9	68		pla				pla 								; old MS Byte
.c2ea	4a		lsr a				lsr 	a 							; shift right twice
.c2eb	76 30		ror $30,x			ror 	XSNumber3,x
.c2ed	76 28		ror $28,x			ror 	XSNumber2,x
.c2ef	76 20		ror $20,x			ror 	XSNumber1,x
.c2f1	76 18		ror $18,x			ror 	XSNumber0,x
.c2f3	4a		lsr a				lsr 	a
.c2f4	76 30		ror $30,x			ror 	XSNumber3,x
.c2f6	76 28		ror $28,x			ror 	XSNumber2,x
.c2f8	76 20		ror $20,x			ror 	XSNumber1,x
.c2fa	76 18		ror $18,x			ror 	XSNumber0,x
.c2fc	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; or the lower 6 bits in.
.c2fe	29 3f		and #$3f			and 	#$3F
.c300	15 18		ora $18,x			ora 	XSNumber0,x
.c302	95 18		sta $18,x			sta 	XSNumber0,x
.c304	80 c9		bra $c2cf			bra 	_ETConstant
.c306					_ETExit:
.c306	60		rts				rts
.c307					CheckFollowingDecimal:
.c307	b1 3a		lda ($3a),y			lda 	(CodePtr),y 				; what follows ?
.c309	c9 c3		cmp #$c3			cmp 	#KWD_SYS_DEC 				; decimal ?
.c30b	d0 1a		bne $c327			bne 	_CFDExit
.c30d	98		tya				tya 								; get address of decimal data
.c30e	1a		inc a				inc 	a
.c30f	38		sec				sec
.c310	65 3a		adc $3a				adc 	CodePtr
.c312	8d 08 ff	sta $ff08			sta 	ControlPort+8 				; param slot 2 = address of decimal data.
.c315	a5 3b		lda $3b				lda 	CodePtr+1
.c317	69 00		adc #$00			adc 	#0
.c319	8d 09 ff	sta $ff09			sta 	ControlPort+9
.c31c	a9 20		lda #$20			lda 	#32 						; decimal expand code.
.c31e	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c321	c8		iny				iny 								; get length and add it +1 for the length
.c322	98		tya				tya
.c323	38		sec				sec
.c324	71 3a		adc ($3a),y			adc 	(CodePtr),y
.c326	a8		tay				tay
.c327					_CFDExit:
.c327	60		rts				rts
.c328					DoMathCommand:
.c328	48		pha				pha
.c329	20 f4 ff	jsr $fff4		jsr 	WaitMessage
.c32c	8d 01 ff	sta $ff01			sta 	ControlFunction
.c32f	8a		txa				txa
.c330	18		clc				clc
.c331	69 10		adc #$10			adc 	#XSStack & $FF
.c333	8d 04 ff	sta $ff04			sta 	ControlPort+4
.c336	a9 00		lda #$00			lda 	#XSStack >> 8
.c338	69 00		adc #$00			adc 	#0
.c33a	8d 05 ff	sta $ff05			sta 	ControlPort+5
.c33d	a9 08		lda #$08			lda 	#8
.c33f	8d 06 ff	sta $ff06			sta 	ControlPort+6
.c342	a9 04		lda #$04			lda 	#4
.c344	8d 00 ff	sta $ff00			sta 	ControlCommand 				; do command
.c347	20 f4 ff	jsr $fff4		jsr 	WaitMessage
.c34a	68		pla				pla				; wait for result.
.c34b	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/asc.asm

.c34c					EXPUnaryAsc:
.c34c	20 1f c2	jsr $c21f			jsr 	EXPEvalString 					; string to R0, zTemp0
.c34f	20 14 c8	jsr $c814			jsr 	ERRCheckRParen 					; )
.c352	b2 38		lda ($38)			lda 	(zTemp0) 						; length 0 ?
.c354	f0 06		beq $c35c			beq 	_EXAZero 						; if so return 0
.c356	5a		phy				phy 									; otherwise get first character
.c357	a0 01		ldy #$01			ldy 	#1
.c359	b1 38		lda ($38),y			lda 	(zTemp0),y
.c35b	7a		ply				ply
.c35c					_EXAZero:
.c35c	4c 6e c3	jmp $c36e			jmp 	EXPUnaryReturnA

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/dollar.asm

.c35f					EXPUnaryNull:
.c35f	20 b0 c1	jsr $c1b0			jsr 	EXPEvaluateExpression 		; get a value
.c362	20 ad c1	jsr $c1ad			jsr 	DereferenceTerm 			; dereference it
.c365	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/len.asm

.c366					EXPUnaryLen:
.c366	20 1f c2	jsr $c21f			jsr 	EXPEvalString 					; string to R0, zTemp0
.c369	20 14 c8	jsr $c814			jsr 	ERRCheckRParen 					; )
.c36c	b2 38		lda ($38)			lda 	(zTemp0) 						; first byte is the length
.c36e					EXPUnaryReturnA:
.c36e	95 18		sta $18,x			sta 	XSNumber0,x
.c370	74 20		stz $20,x			stz 	XSNumber1,x
.c372	74 28		stz $28,x			stz 	XSNumber2,x
.c374	74 30		stz $30,x			stz 	XSNumber3,x
.c376	74 10		stz $10,x			stz 	XSControl,x
.c378	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/simple.asm

.c379					UnaryParenthesis:
.c379	20 b0 c1	jsr $c1b0			jsr 	EXPEvaluateExpression 		; evaluate at stack level X
.c37c	4c 14 c8	jmp $c814			jmp 	ERRCheckRParen	 			; check )
.c37f					DoUnaryFunction:
.c37f	48		pha				pha
.c380	20 b0 c1	jsr $c1b0			jsr 	EXPEvaluateExpression 		; one operand
.c383	68		pla				pla
.c384	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c387	ad 02 ff	lda $ff02			lda 	ControlError
.c38a	d0 03		bne $c38f			bne 	_DUFError
.c38c	4c 14 c8	jmp $c814			jmp 	ERRCheckRParen 				; closing )
.c38f					_DUFError:
.c38f	a9 04		lda #$04		lda	#4
.c391	4c 38 c8	jmp $c838		jmp	ErrorHandler
.c394					UnaryInt:
.c394	a9 11		lda #$11			lda 	#17 						; do appropriate command
.c396	80 e7		bra $c37f			bra 	DoUnaryFunction
.c398					UnarySqr:
.c398	a9 12		lda #$12			lda 	#18 						; do appropriate command
.c39a	80 e3		bra $c37f			bra 	DoUnaryFunction
.c39c					UnarySin:
.c39c	a9 13		lda #$13			lda 	#19 						; do appropriate command
.c39e	80 df		bra $c37f			bra 	DoUnaryFunction
.c3a0					UnaryCos:
.c3a0	a9 14		lda #$14			lda 	#20 						; do appropriate command
.c3a2	80 db		bra $c37f			bra 	DoUnaryFunction
.c3a4					UnaryTan:
.c3a4	a9 15		lda #$15			lda 	#21 						; do appropriate command
.c3a6	80 d7		bra $c37f			bra 	DoUnaryFunction
.c3a8					UnaryATan:
.c3a8	a9 16		lda #$16			lda 	#22 						; do appropriate command
.c3aa	80 d3		bra $c37f			bra 	DoUnaryFunction
.c3ac					UnaryExp:
.c3ac	a9 17		lda #$17			lda 	#23 						; do appropriate command
.c3ae	80 cf		bra $c37f			bra 	DoUnaryFunction
.c3b0					UnaryLog:
.c3b0	a9 18		lda #$18			lda 	#24 						; do appropriate command
.c3b2	80 cb		bra $c37f			bra 	DoUnaryFunction
.c3b4					UnaryAbs:
.c3b4	a9 19		lda #$19			lda 	#25 						; do appropriate command
.c3b6	80 c7		bra $c37f			bra 	DoUnaryFunction
.c3b8					UnarySgn:
.c3b8	a9 1a		lda #$1a			lda 	#26 						; do appropriate command
.c3ba	80 c3		bra $c37f			bra 	DoUnaryFunction
.c3bc					UnaryRnd:
.c3bc	a9 1b		lda #$1b			lda 	#27 						; do appropriate command
.c3be	80 bf		bra $c37f			bra 	DoUnaryFunction
.c3c0					UnaryRand:
.c3c0	a9 1c		lda #$1c			lda 	#28 						; do appropriate command
.c3c2	80 bb		bra $c37f			bra 	DoUnaryFunction

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/string.asm

.c3c4					EXPUnaryInlineString:
.c3c4	18		clc				clc 								; physical address -> TOS
.c3c5	98		tya				tya
.c3c6	65 3a		adc $3a				adc 	codePtr
.c3c8	95 18		sta $18,x			sta 	XSNumber0,x
.c3ca	a5 3b		lda $3b				lda 	codePtr+1
.c3cc	69 00		adc #$00			adc 	#0
.c3ce	95 20		sta $20,x			sta 	XSNumber1,x
.c3d0	74 28		stz $28,x			stz 	XSNumber2,x 				; fill in the rest & type
.c3d2	74 30		stz $30,x			stz 	XSNumber3,x
.c3d4	a9 80		lda #$80			lda 	#XS_STRING 					; make it a string.
.c3d6	95 10		sta $10,x			sta 	XSControl,x
.c3d8	98		tya				tya	 								; skip over it.
.c3d9	38		sec				sec
.c3da	71 3a		adc ($3a),y			adc 	(codePtr),y
.c3dc	a8		tay				tay
.c3dd	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/val.asm

.c3de					EXPUnaryVal:
.c3de	20 00 c4	jsr $c400			jsr 	EXPValBody 						; do the main bit.
.c3e1	d0 01		bne $c3e4			bne 	_EXPUVExit 						; check error.
.c3e3	60		rts				rts
.c3e4					_EXPUVExit:
.c3e4	a9 04		lda #$04		lda	#4
.c3e6	4c 38 c8	jmp $c838		jmp	ErrorHandler
.c3e9					EXPUnaryIsVal:
.c3e9	20 00 c4	jsr $c400			jsr 	EXPValBody 						; do the main bit.
.c3ec	f0 05		beq $c3f3			beq 	EXPUnaryReturnMinus1 			; error code.
.c3ee					EXPUnaryReturnZero:
.c3ee	a9 00		lda #$00		 	lda 	#0 								; returns zerozero no error
.c3f0	4c 6e c3	jmp $c36e		 	jmp 	EXPUnaryReturnA
.c3f3					EXPUnaryReturnMinus1:
.c3f3	a9 ff		lda #$ff			lda 	#$FF 							; returns -1
.c3f5	95 18		sta $18,x			sta 	XSNumber0,x
.c3f7	95 20		sta $20,x			sta 	XSNumber1,x
.c3f9	95 28		sta $28,x			sta 	XSNumber2,x
.c3fb	95 30		sta $30,x			sta 	XSNumber3,x
.c3fd	74 10		stz $10,x			stz 	XSControl,x
.c3ff	60		rts				rts
.c400					EXPValBody:
.c400	20 1f c2	jsr $c21f			jsr 	EXPEvalString 					; string to R0, zTemp0
.c403	20 14 c8	jsr $c814			jsr 	ERRCheckRParen 					; )
.c406	a5 38		lda $38				lda 	zTemp0 							; copy address to offset 8/9
.c408	8d 08 ff	sta $ff08			sta 	ControlCommand+8
.c40b	a5 39		lda $39				lda 	zTemp0+1
.c40d	8d 09 ff	sta $ff09			sta 	ControlCommand+9
.c410	a9 21		lda #$21			lda 	#33
.c412	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c415	ad 02 ff	lda $ff02			lda 	ControlError 					; error occurred
.c418	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/assert.asm

.c419					Command_ASSERT:
.c419	a2 00		ldx #$00			ldx 	#0
.c41b	20 ee c1	jsr $c1ee			jsr 	EXPEvalNumber 				; get a number to assert
.c41e	20 29 c4	jsr $c429			jsr 	CheckIfZero
.c421	f0 01		beq $c424			beq 	_CAFail 					; if so, the assert fails.
.c423	60		rts				rts
.c424					_CAFail:
.c424	a9 05		lda #$05		lda	#5
.c426	4c 38 c8	jmp $c838		jmp	ErrorHandler
.c429					CheckIfZero:
.c429	b5 10		lda $10,x			lda 	XSControl,x
.c42b	d0 09		bne $c436			bne 	_CAType
.c42d	b5 18		lda $18,x			lda 	XSNumber0,x
.c42f	15 20		ora $20,x			ora 	XSNumber1,x
.c431	15 28		ora $28,x			ora 	XSNumber2,x
.c433	15 30		ora $30,x			ora 	XSNumber3,x
.c435	60		rts				rts
.c436					_CAType:
.c436	a9 02		lda #$02		lda	#2
.c438	4c 38 c8	jmp $c838		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/commands/clear.asm

.c43b					Command_CLEAR:
.c43b	4c 3e c4	jmp $c43e			jmp 	ClearCode
.c43e					ClearCode:
.c43e	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/comment.asm

.c43f					Command_Comment:
.c43f	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; optional string parameter
.c441	c9 80		cmp #$80			cmp 	#KWD_SYS_STR
.c443	d0 06		bne $c44b			bne 	_CRExit
.c445	c8		iny				iny 								; skip over it, it's a comment.
.c446	98		tya				tya
.c447	38		sec				sec
.c448	71 3a		adc ($3a),y			adc 	(codePtr),y
.c44a	a8		tay				tay
.c44b					_CRExit:
.c44b	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/new.asm

.c44c					Command_NEW:
.c44c	9c 00 c9	stz $c900			stz 	Program 					; Erase current program
.c44f	20 3e c4	jsr $c43e			jsr 	ClearCode 					; Run CLR
.c452	4c a5 c4	jmp $c4a5			jmp 	Command_END 				; Run END

;******  Return to file: _include.inc


;******  Processing file: sources/commands/run.asm

.c455					Command_RUN:
.c455	20 3e c4	jsr $c43e			jsr 	ClearCode					; clear everything out.
.c458	ad 00 c9	lda $c900			lda 	Program 					; back to the program start, get the count of var pages.
.c45b	18		clc				clc 								; make an actual address.
.c45c	69 c9		adc #$c9			adc 	#(Program >> 8)
.c45e	85 3b		sta $3b				sta 	codePtr+1
.c460	64 3a		stz $3a				stz 	codePtr
.c462	80 0b		bra $c46f			bra 	RUNNewLine
.c464					RUNEndOfLine:
.c464	18		clc				clc 								; advance to next line.
.c465	b2 3a		lda ($3a)			lda 	(codePtr)
.c467	65 3a		adc $3a				adc 	codePtr
.c469	85 3a		sta $3a				sta 	codePtr
.c46b	90 02		bcc $c46f			bcc 	_RELNoCarry
.c46d	e6 3b		inc $3b				inc 	codePtr+1
.c46f					_RELNoCarry:
.c46f					RUNNewLine:
.c46f	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.c471	9a		txs				txs
.c472	b2 3a		lda ($3a)			lda 	(codePtr) 					; check off end of program
.c474	f0 2f		beq $c4a5			beq 	Command_END
.c476	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.c478	b1 3a		lda ($3a),y			lda 	(codePtr),y
.c47a	8d 00 02	sta $0200			sta 	ERRLine
.c47d	c8		iny				iny
.c47e	b1 3a		lda ($3a),y			lda 	(codePtr),y
.c480	8d 01 02	sta $0201			sta 	ERRLine+1
.c483	c8		iny				iny 								; offset into codePtr for start of line.
.c484					RUNNewCommand:
.c484					_RNCNoCheck:
.c484	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get next token
.c486	10 1d		bpl $c4a5			bpl		_RUNNotToken 				; probably an identifier
.c488	c8		iny				iny 								; consume token
.c489	c9 cd		cmp #$cd			cmp 	#KWD_COLON 					; fast skip colon
.c48b	f0 f7		beq $c484			beq 	RUNNewCommand
.c48d	c9 b0		cmp #$b0			cmp 	#$B0 				 		; check unary function ?
.c48f	90 0a		bcc $c49b			bcc 	_RUNSyntax
.c491	0a		asl a				asl 	a 							; double into X.
.c492	aa		tax				tax
.c493	20 98 c4	jsr $c498			jsr 	_RUNDispatchMain			; call the main dispatcher
.c496	80 ec		bra $c484			bra 	RUNNewCommand
.c498					_RUNDispatchMain:
.c498	7c 5a c7	jmp ($c75a,x)			jmp 	(StandardVectorTable,x)
.c49b					_RUNSyntax:
.c49b	a9 01		lda #$01		lda	#1
.c49d	4c 38 c8	jmp $c838		jmp	ErrorHandler
.c4a0					_RUNBreak:
.c4a0	a9 06		lda #$06		lda	#6
.c4a2	4c 38 c8	jmp $c838		jmp	ErrorHandler
.c4a5					_RUNNotToken:
.c4a5					Command_END:
.c4a5	4c 2f c8	jmp $c82f			jmp 	WarmStart
.c4a8					Command_Shift1_Handler:
.c4a8	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get token shifted
.c4aa	c8		iny				iny
.c4ab	0a		asl a				asl 	a 							; double into X
.c4ac	aa		tax				tax
.c4ad	7c 3e c7	jmp ($c73e,x)			jmp 	(ExtendedVectorTable,x) 	; and go there.

;******  Return to file: _include.inc


;******  Processing file: sources/commands/stop.asm

.c4b0					Command_STOP:
.c4b0	a9 07		lda #$07		lda	#7
.c4b2	4c 38 c8	jmp $c838		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/commands/sys.asm

.c4b5					Command_Sys:
.c4b5	a2 00		ldx #$00			ldx 	#0
.c4b7	20 0b c2	jsr $c20b			jsr 	EXPEvalInteger16 			; execution address
.c4ba	5a		phy				phy
.c4bb	b5 18		lda $18,x			lda 	XSNumber0,x 				; copy address into subroutine call.
.c4bd	8d c6 c4	sta $c4c6			sta 	_SysCall+1
.c4c0	b5 20		lda $20,x			lda 	XSNumber1,x
.c4c2	8d c7 c4	sta $c4c7			sta 	_SysCall+2
.c4c5					_SysCall:
.c4c5	20 ff ff	jsr $ffff			jsr 	$FFFF 						; call the code
.c4c8	7a		ply				ply
.c4c9	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/generated/errors.asm

.c4ca					ErrorMessageText:
>c4ca	73 79 6e 74 61 78 20 65			.text	"syntax error",0
>c4d2	72 72 6f 72 00
>c4d7	74 79 70 65 20 6d 69 73			.text	"type mismatch error",0
>c4df	6d 61 74 63 68 20 65 72 72 6f 72 00
>c4eb	64 69 76 69 73 69 6f 6e			.text	"division by zero error",0
>c4f3	20 62 79 20 7a 65 72 6f 20 65 72 72 6f 72 00
>c502	6f 75 74 20 6f 66 20 72			.text	"out of range error",0
>c50a	61 6e 67 65 20 65 72 72 6f 72 00
>c515	61 73 73 65 72 74 20 66			.text	"assert failed",0
>c51d	61 69 6c 65 64 00
>c523	62 72 65 61 6b 20 70 72			.text	"break pressed",0
>c52b	65 73 73 65 64 00
>c531	70 72 6f 67 72 61 6d 20			.text	"program stopped",0
>c539	73 74 6f 70 70 65 64 00

;******  Return to file: _include.inc


;******  Processing file: sources/generated/kwdtext.asm

.c541					BinaryTokenText:
>c541	01 ab					.byte	$01,$ab                       	; $ 20 +
>c543	01 ad					.byte	$01,$ad                       	; $ 21 -
>c545	01 aa					.byte	$01,$aa                       	; $ 22 *
>c547	01 af					.byte	$01,$af                       	; $ 23 /
>c549	02 3e be				.byte	$02,$3e,$be                   	; $ 24 >>
>c54c	02 3c bc				.byte	$02,$3c,$bc                   	; $ 25 <<
>c54f	01 a5					.byte	$01,$a5                       	; $ 26 %
>c551	01 dc					.byte	$01,$dc                       	; $ 27 \
>c553	01 a6					.byte	$01,$a6                       	; $ 28 &
>c555	01 fc					.byte	$01,$fc                       	; $ 29 |
>c557	01 de					.byte	$01,$de                       	; $ 2a ^
>c559	01 be					.byte	$01,$be                       	; $ 2b >
>c55b	02 3e bd				.byte	$02,$3e,$bd                   	; $ 2c >=
>c55e	01 bc					.byte	$01,$bc                       	; $ 2d <
>c560	02 3c bd				.byte	$02,$3c,$bd                   	; $ 2e <=
>c563	02 3c be				.byte	$02,$3c,$be                   	; $ 2f <>
>c566	01 bd					.byte	$01,$bd                       	; $ 30 =
>c568	01 a1					.byte	$01,$a1                       	; $ 31 !
>c56a	01 bf					.byte	$01,$bf                       	; $ 32 ?
>c56c	ff					.byte	$FF
.c56d					BaseTokenText:
>c56d	00					.byte	$00                           	; $ 80
>c56e	01 a4					.byte	$01,$a4                       	; $ 81 $
>c570	01 a8					.byte	$01,$a8                       	; $ 82 (
>c572	05 52 41 4e 44 a8			.byte	$05,$52,$41,$4e,$44,$a8       	; $ 83 RAND(
>c578	04 52 4e 44 a8				.byte	$04,$52,$4e,$44,$a8           	; $ 84 RND(
>c57d	06 49 53 56 41 4c a8			.byte	$06,$49,$53,$56,$41,$4c,$a8   	; $ 85 ISVAL(
>c584	04 49 4e 54 a8				.byte	$04,$49,$4e,$54,$a8           	; $ 86 INT(
>c589	04 54 49 4d c5				.byte	$04,$54,$49,$4d,$c5           	; $ 87 TIME
>c58e	06 45 56 45 4e 54 a8			.byte	$06,$45,$56,$45,$4e,$54,$a8   	; $ 88 EVENT(
>c595	07 49 4e 4b 45 59 24 a8			.byte	$07,$49,$4e,$4b,$45,$59,$24,$a8	; $ 89 INKEY$(
>c59d	04 41 53 43 a8				.byte	$04,$41,$53,$43,$a8           	; $ 8a ASC(
>c5a2	05 43 48 52 24 a8			.byte	$05,$43,$48,$52,$24,$a8       	; $ 8b CHR$(
>c5a8	04 53 51 52 a8				.byte	$04,$53,$51,$52,$a8           	; $ 8c SQR(
>c5ad	04 4c 45 4e a8				.byte	$04,$4c,$45,$4e,$a8           	; $ 8d LEN(
>c5b2	04 41 42 53 a8				.byte	$04,$41,$42,$53,$a8           	; $ 8e ABS(
>c5b7	04 53 47 4e a8				.byte	$04,$53,$47,$4e,$a8           	; $ 8f SGN(
>c5bc	04 56 41 4c a8				.byte	$04,$56,$41,$4c,$a8           	; $ 90 VAL(
>c5c1	05 53 54 52 24 a8			.byte	$05,$53,$54,$52,$24,$a8       	; $ 91 STR$(
>c5c7	05 4d 49 44 24 a8			.byte	$05,$4d,$49,$44,$24,$a8       	; $ 92 MID$(
>c5cd	06 4c 45 46 54 24 a8			.byte	$06,$4c,$45,$46,$54,$24,$a8   	; $ 93 LEFT$(
>c5d4	07 52 49 47 48 54 24 a8			.byte	$07,$52,$49,$47,$48,$54,$24,$a8	; $ 94 RIGHT$(
>c5dc	04 53 49 4e a8				.byte	$04,$53,$49,$4e,$a8           	; $ 95 SIN(
>c5e1	04 43 4f 53 a8				.byte	$04,$43,$4f,$53,$a8           	; $ 96 COS(
>c5e6	04 54 41 4e a8				.byte	$04,$54,$41,$4e,$a8           	; $ 97 TAN(
>c5eb	05 41 54 41 4e a8			.byte	$05,$41,$54,$41,$4e,$a8       	; $ 98 ATAN(
>c5f1	04 4c 4f 47 a8				.byte	$04,$4c,$4f,$47,$a8           	; $ 99 LOG(
>c5f6	04 45 58 50 a8				.byte	$04,$45,$58,$50,$a8           	; $ 9a EXP(
>c5fb	04 4b 45 59 a8				.byte	$04,$4b,$45,$59,$a8           	; $ 9b KEY(
>c600	00					.byte	$00                           	; $ 9c
>c601	00					.byte	$00                           	; $ 9d
>c602	00					.byte	$00                           	; $ 9e
>c603	00					.byte	$00                           	; $ 9f
>c604	00					.byte	$00                           	; $ a0
>c605	00					.byte	$00                           	; $ a1
>c606	00					.byte	$00                           	; $ a2
>c607	00					.byte	$00                           	; $ a3
>c608	00					.byte	$00                           	; $ a4
>c609	00					.byte	$00                           	; $ a5
>c60a	00					.byte	$00                           	; $ a6
>c60b	00					.byte	$00                           	; $ a7
>c60c	00					.byte	$00                           	; $ a8
>c60d	00					.byte	$00                           	; $ a9
>c60e	00					.byte	$00                           	; $ aa
>c60f	00					.byte	$00                           	; $ ab
>c610	00					.byte	$00                           	; $ ac
>c611	00					.byte	$00                           	; $ ad
>c612	00					.byte	$00                           	; $ ae
>c613	00					.byte	$00                           	; $ af
>c614	05 57 48 49 4c c5			.byte	$05,$57,$48,$49,$4c,$c5       	; $ b0 WHILE
>c61a	04 57 45 4e c4				.byte	$04,$57,$45,$4e,$c4           	; $ b1 WEND
>c61f	02 49 c6				.byte	$02,$49,$c6                   	; $ b2 IF
>c622	05 45 4e 44 49 c6			.byte	$05,$45,$4e,$44,$49,$c6       	; $ b3 ENDIF
>c628	02 44 cf				.byte	$02,$44,$cf                   	; $ b4 DO
>c62b	04 4c 4f 4f d0				.byte	$04,$4c,$4f,$4f,$d0           	; $ b5 LOOP
>c630	06 52 45 50 45 41 d4			.byte	$06,$52,$45,$50,$45,$41,$d4   	; $ b6 REPEAT
>c637	05 55 4e 54 49 cc			.byte	$05,$55,$4e,$54,$49,$cc       	; $ b7 UNTIL
>c63d	04 50 52 4f c3				.byte	$04,$50,$52,$4f,$c3           	; $ b8 PROC
>c642	07 45 4e 44 50 52 4f c3			.byte	$07,$45,$4e,$44,$50,$52,$4f,$c3	; $ b9 ENDPROC
>c64a	03 46 4f d2				.byte	$03,$46,$4f,$d2               	; $ ba FOR
>c64e	04 4e 45 58 d4				.byte	$04,$4e,$45,$58,$d4           	; $ bb NEXT
>c653	04 43 41 53 c5				.byte	$04,$43,$41,$53,$c5           	; $ bc CASE
>c658	07 45 4e 44 43 41 53 c5			.byte	$07,$45,$4e,$44,$43,$41,$53,$c5	; $ bd ENDCASE
>c660	00					.byte	$00                           	; $ be
>c661	04 54 48 45 ce				.byte	$04,$54,$48,$45,$ce           	; $ bf THEN
>c666	00					.byte	$00                           	; $ c0
>c667	00					.byte	$00                           	; $ c1
>c668	00					.byte	$00                           	; $ c2
>c669	00					.byte	$00                           	; $ c3
>c66a	02 54 cf				.byte	$02,$54,$cf                   	; $ c4 TO
>c66d	03 4c 45 d4				.byte	$03,$4c,$45,$d4               	; $ c5 LET
>c671	05 50 52 49 4e d4			.byte	$05,$50,$52,$49,$4e,$d4       	; $ c6 PRINT
>c677	05 49 4e 50 55 d4			.byte	$05,$49,$4e,$50,$55,$d4       	; $ c7 INPUT
>c67d	04 43 41 4c cc				.byte	$04,$43,$41,$4c,$cc           	; $ c8 CALL
>c682	03 53 59 d3				.byte	$03,$53,$59,$d3               	; $ c9 SYS
>c686	04 45 58 49 d4				.byte	$04,$45,$58,$49,$d4           	; $ ca EXIT
>c68b	01 ac					.byte	$01,$ac                       	; $ cb ,
>c68d	01 bb					.byte	$01,$bb                       	; $ cc ;
>c68f	01 ba					.byte	$01,$ba                       	; $ cd :
>c691	01 a7					.byte	$01,$a7                       	; $ ce '
>c693	01 a9					.byte	$01,$a9                       	; $ cf )
>c695	04 52 45 41 c4				.byte	$04,$52,$45,$41,$c4           	; $ d0 READ
>c69a	04 44 41 54 c1				.byte	$04,$44,$41,$54,$c1           	; $ d1 DATA
>c69f	01 db					.byte	$01,$db                       	; $ d2 [
>c6a1	01 dd					.byte	$01,$dd                       	; $ d3 ]
>c6a3	01 a3					.byte	$01,$a3                       	; $ d4 #
>c6a5	01 ae					.byte	$01,$ae                       	; $ d5 .
>c6a7	04 45 4c 53 c5				.byte	$04,$45,$4c,$53,$c5           	; $ d6 ELSE
>c6ac	04 57 48 45 ce				.byte	$04,$57,$48,$45,$ce           	; $ d7 WHEN
>c6b1	06 44 4f 57 4e 54 cf			.byte	$06,$44,$4f,$57,$4e,$54,$cf   	; $ d8 DOWNTO
>c6b8	ff					.byte	$FF
.c6b9					Shift1TokenText:
>c6b9	05 43 4c 45 41 d2			.byte	$05,$43,$4c,$45,$41,$d2       	; $180 CLEAR
>c6bf	03 4e 45 d7				.byte	$03,$4e,$45,$d7               	; $181 NEW
>c6c3	03 52 55 ce				.byte	$03,$52,$55,$ce               	; $182 RUN
>c6c7	04 53 54 4f d0				.byte	$04,$53,$54,$4f,$d0           	; $183 STOP
>c6cc	03 45 4e c4				.byte	$03,$45,$4e,$c4               	; $184 END
>c6d0	06 41 53 53 45 52 d4			.byte	$06,$41,$53,$53,$45,$52,$d4   	; $185 ASSERT
>c6d7	04 4c 49 53 d4				.byte	$04,$4c,$49,$53,$d4           	; $186 LIST
>c6dc	04 53 41 56 c5				.byte	$04,$53,$41,$56,$c5           	; $187 SAVE
>c6e1	04 4c 4f 41 c4				.byte	$04,$4c,$4f,$41,$c4           	; $188 LOAD
>c6e6	05 47 4f 53 55 c2			.byte	$05,$47,$4f,$53,$55,$c2       	; $189 GOSUB
>c6ec	04 47 4f 54 cf				.byte	$04,$47,$4f,$54,$cf           	; $18a GOTO
>c6f1	06 52 45 54 55 52 ce			.byte	$06,$52,$45,$54,$55,$52,$ce   	; $18b RETURN
>c6f8	07 52 45 53 54 4f 52 c5			.byte	$07,$52,$45,$53,$54,$4f,$52,$c5	; $18c RESTORE
>c700	03 44 49 cd				.byte	$03,$44,$49,$cd               	; $18d DIM
>c704	ff					.byte	$FF
.c705					BinaryPrecedence:
>c705	03					.byte	3		; +
>c706	03					.byte	3		; -
>c707	04					.byte	4		; *
>c708	04					.byte	4		; /
>c709	04					.byte	4		; >>
>c70a	04					.byte	4		; <<
>c70b	04					.byte	4		; %
>c70c	04					.byte	4		; \
>c70d	01					.byte	1		; &
>c70e	01					.byte	1		; |
>c70f	01					.byte	1		; ^
>c710	02					.byte	2		; >
>c711	02					.byte	2		; >=
>c712	02					.byte	2		; <
>c713	02					.byte	2		; <=
>c714	02					.byte	2		; <>
>c715	02					.byte	2		; =
>c716	05					.byte	5		; !
>c717	05					.byte	5		; ?

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_binary.asm

.c718					BinaryVectorTable:
>c718	57 c1					.word	BinaryAdd                ; $20 +
>c71a	64 c1					.word	BinaryMinus              ; $21 -
>c71c	71 c1					.word	BinaryTimes              ; $22 *
>c71e	7e c1					.word	BinaryFDiv               ; $23 /
>c720	cd c0					.word	BinaryShiftRight         ; $24 >>
>c722	ca c0					.word	BinaryShiftLeft          ; $25 <<
>c724	a1 c1					.word	BinaryModulus            ; $26 %
>c726	95 c1					.word	BinaryUDiv               ; $27 \
>c728	67 c0					.word	BinaryAnd                ; $28 &
>c72a	a9 c0					.word	BinaryOr                 ; $29 |
>c72c	88 c0					.word	BinaryXor                ; $2a ^
>c72e	2b c0					.word	CMPCompareGreater        ; $2b >
>c730	46 c0					.word	CMPCompareGreaterEqual   ; $2c >=
>c732	22 c0					.word	CMPCompareLess           ; $2d <
>c734	3d c0					.word	CMPCompareLessEqual      ; $2e <=
>c736	34 c0					.word	CMPCompareNotEqual       ; $2f <>
>c738	19 c0					.word	CMPCompareEqual          ; $30 =
>c73a	0d c1					.word	BinRefWord               ; $31 !
>c73c	11 c1					.word	BinRefByte               ; $32 ?

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_extended.asm

.c73e					ExtendedVectorTable:
>c73e	3b c4					.word	Command_CLEAR            ; $180 clear
>c740	4c c4					.word	Command_NEW              ; $181 new
>c742	55 c4					.word	Command_RUN              ; $182 run
>c744	b0 c4					.word	Command_STOP             ; $183 stop
>c746	a5 c4					.word	Command_END              ; $184 end
>c748	19 c4					.word	Command_ASSERT           ; $185 assert
>c74a	36 c8					.word	Unimplemented            ; $186 list
>c74c	36 c8					.word	Unimplemented            ; $187 save
>c74e	36 c8					.word	Unimplemented            ; $188 load
>c750	36 c8					.word	Unimplemented            ; $189 gosub
>c752	36 c8					.word	Unimplemented            ; $18a goto
>c754	36 c8					.word	Unimplemented            ; $18b return
>c756	36 c8					.word	Unimplemented            ; $18c restore
>c758	36 c8					.word	Unimplemented            ; $18d dim

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_standard.asm

.c75a					StandardVectorTable:
>c75a	c4 c3					.word	EXPUnaryInlineString     ; $80 !!str
>c75c	5f c3					.word	EXPUnaryNull             ; $81 $
>c75e	79 c3					.word	UnaryParenthesis         ; $82 (
>c760	c0 c3					.word	UnaryRand                ; $83 rand(
>c762	bc c3					.word	UnaryRnd                 ; $84 rnd(
>c764	e9 c3					.word	EXPUnaryIsVal            ; $85 isval(
>c766	94 c3					.word	UnaryInt                 ; $86 int(
>c768	36 c8					.word	Unimplemented            ; $87 time
>c76a	36 c8					.word	Unimplemented            ; $88 event(
>c76c	36 c8					.word	Unimplemented            ; $89 inkey$(
>c76e	4c c3					.word	EXPUnaryAsc              ; $8a asc(
>c770	36 c8					.word	Unimplemented            ; $8b chr$(
>c772	98 c3					.word	UnarySqr                 ; $8c sqr(
>c774	66 c3					.word	EXPUnaryLen              ; $8d len(
>c776	b4 c3					.word	UnaryAbs                 ; $8e abs(
>c778	b8 c3					.word	UnarySgn                 ; $8f sgn(
>c77a	de c3					.word	EXPUnaryVal              ; $90 val(
>c77c	36 c8					.word	Unimplemented            ; $91 str$(
>c77e	36 c8					.word	Unimplemented            ; $92 mid$(
>c780	36 c8					.word	Unimplemented            ; $93 left$(
>c782	36 c8					.word	Unimplemented            ; $94 right$(
>c784	9c c3					.word	UnarySin                 ; $95 sin(
>c786	a0 c3					.word	UnaryCos                 ; $96 cos(
>c788	a4 c3					.word	UnaryTan                 ; $97 tan(
>c78a	a8 c3					.word	UnaryATan                ; $98 atan(
>c78c	b0 c3					.word	UnaryLog                 ; $99 log(
>c78e	ac c3					.word	UnaryExp                 ; $9a exp(
>c790	36 c8					.word	Unimplemented            ; $9b key(
>c792	36 c8					.word	Unimplemented            ; $9c
>c794	36 c8					.word	Unimplemented            ; $9d
>c796	36 c8					.word	Unimplemented            ; $9e
>c798	36 c8					.word	Unimplemented            ; $9f
>c79a	36 c8					.word	Unimplemented            ; $a0
>c79c	36 c8					.word	Unimplemented            ; $a1
>c79e	36 c8					.word	Unimplemented            ; $a2
>c7a0	36 c8					.word	Unimplemented            ; $a3
>c7a2	36 c8					.word	Unimplemented            ; $a4
>c7a4	36 c8					.word	Unimplemented            ; $a5
>c7a6	36 c8					.word	Unimplemented            ; $a6
>c7a8	36 c8					.word	Unimplemented            ; $a7
>c7aa	36 c8					.word	Unimplemented            ; $a8
>c7ac	36 c8					.word	Unimplemented            ; $a9
>c7ae	36 c8					.word	Unimplemented            ; $aa
>c7b0	36 c8					.word	Unimplemented            ; $ab
>c7b2	36 c8					.word	Unimplemented            ; $ac
>c7b4	36 c8					.word	Unimplemented            ; $ad
>c7b6	36 c8					.word	Unimplemented            ; $ae
>c7b8	36 c8					.word	Unimplemented            ; $af
>c7ba	36 c8					.word	Unimplemented            ; $b0 while
>c7bc	36 c8					.word	Unimplemented            ; $b1 wend
>c7be	36 c8					.word	Unimplemented            ; $b2 if
>c7c0	36 c8					.word	Unimplemented            ; $b3 endif
>c7c2	36 c8					.word	Unimplemented            ; $b4 do
>c7c4	36 c8					.word	Unimplemented            ; $b5 loop
>c7c6	36 c8					.word	Unimplemented            ; $b6 repeat
>c7c8	36 c8					.word	Unimplemented            ; $b7 until
>c7ca	36 c8					.word	Unimplemented            ; $b8 proc
>c7cc	36 c8					.word	Unimplemented            ; $b9 endproc
>c7ce	36 c8					.word	Unimplemented            ; $ba for
>c7d0	36 c8					.word	Unimplemented            ; $bb next
>c7d2	36 c8					.word	Unimplemented            ; $bc case
>c7d4	36 c8					.word	Unimplemented            ; $bd endcase
>c7d6	36 c8					.word	Unimplemented            ; $be !!un1
>c7d8	36 c8					.word	Unimplemented            ; $bf then
>c7da	64 c4					.word	RUNEndOfLine             ; $c0 !!end
>c7dc	a8 c4					.word	Command_Shift1_Handler   ; $c1 !!sh1
>c7de	36 c8					.word	Unimplemented            ; $c2 !!sh2
>c7e0	36 c8					.word	Unimplemented            ; $c3 !!dec
>c7e2	36 c8					.word	Unimplemented            ; $c4 to
>c7e4	36 c8					.word	Unimplemented            ; $c5 let
>c7e6	36 c8					.word	Unimplemented            ; $c6 print
>c7e8	36 c8					.word	Unimplemented            ; $c7 input
>c7ea	36 c8					.word	Unimplemented            ; $c8 call
>c7ec	b5 c4					.word	Command_Sys              ; $c9 sys
>c7ee	36 c8					.word	Unimplemented            ; $ca exit
>c7f0	36 c8					.word	Unimplemented            ; $cb ,
>c7f2	36 c8					.word	Unimplemented            ; $cc ;
>c7f4	36 c8					.word	Unimplemented            ; $cd :
>c7f6	3f c4					.word	Command_Comment          ; $ce '
>c7f8	36 c8					.word	Unimplemented            ; $cf )
>c7fa	36 c8					.word	Unimplemented            ; $d0 read
>c7fc	36 c8					.word	Unimplemented            ; $d1 data
>c7fe	36 c8					.word	Unimplemented            ; $d2 [
>c800	36 c8					.word	Unimplemented            ; $d3 ]
>c802	36 c8					.word	Unimplemented            ; $d4 #
>c804	36 c8					.word	Unimplemented            ; $d5 .
>c806	36 c8					.word	Unimplemented            ; $d6 else
>c808	36 c8					.word	Unimplemented            ; $d7 when
>c80a	36 c8					.word	Unimplemented            ; $d8 downto

;******  Return to file: _include.inc


;******  Processing file: sources/support/errors/syntax.asm

.c80c					ERRCheckLParen:
.c80c	b1 3a		lda ($3a),y			lda 	(CodePtr),y
.c80e	c9 82		cmp #$82			cmp 	#KWD_LPAREN
.c810	d0 18		bne $c82a			bne 	ERRSyntaxError
.c812	c8		iny				iny
.c813	60		rts				rts
.c814					ERRCheckRParen:
.c814	b1 3a		lda ($3a),y			lda 	(CodePtr),y
.c816	c9 cf		cmp #$cf			cmp 	#KWD_RPAREN
.c818	d0 10		bne $c82a			bne 	ERRSyntaxError
.c81a	c8		iny				iny
.c81b	60		rts				rts
.c81c					ERRCheckComma:
.c81c	b1 3a		lda ($3a),y			lda 	(CodePtr),y
.c81e	c9 cb		cmp #$cb			cmp 	#KWD_COMMA
.c820	d0 08		bne $c82a			bne 	ERRSyntaxError
.c822	c8		iny				iny
.c823	60		rts				rts
.c824					ERRCheckA:
.c824	d1 3a		cmp ($3a),y			cmp 	(codePtr),y
.c826	d0 02		bne $c82a			bne 	ERRSyntaxError
.c828	c8		iny				iny
.c829	60		rts				rts
.c82a					ERRSyntaxError:
.c82a	a9 01		lda #$01		lda	#1
.c82c	4c 38 c8	jmp $c838		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Return to file: basic.asm

.c82f					WarmStart:
.c82f	a9 00		lda #$00			lda 	#$00
.c831	aa		tax				tax
.c832	a8		tay				tay
>c833	03						.byte 	3
.c834	80 f9		bra $c82f			bra 	WarmStart
.c836					Unimplemented:
.c836	a9 ff		lda #$ff			lda 	#$FF
.c838					ErrorHandler:
.c838	a2 ee		ldx #$ee			ldx 	#$EE
.c83a	a0 ee		ldy #$ee			ldy 	#$EE
>c83c	03						.byte 	3
.c83d					_EHLoop:
.c83d	80 fe		bra $c83d			bra 	_EHLoop
>c83f							.align 	256
.c900					Program:
>c900	01 00 00 00 00 00 00 00				.binary "build/tokenised.dat"
>c908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>c9f8	00 00 00 00 00 00 00 00 1a 64 00 c1 85 8e 82 48
>ca08	54 20 21 4d 5c cf 21 21 45 48 cf 2e 40 c3 02 00
>ca18	1f c0 19 6e 00 c1 85 8e 82 48 54 21 21 4d 5c cf
>ca28	21 55 70 cf 2e 40 c3 02 00 3f c0 1d 78 00 c1 85
>ca38	8e 82 48 54 22 21 4d 5c cf 21 21 41 6f 6c 70 cf
>ca48	2e 41 47 5f c3 01 2f c0 1e 82 00 c1 85 8e 82 48
>ca58	54 23 21 4d 5c cf 21 21 40 c3 03 61 86 ff cf 2e
>ca68	40 c3 02 01 2f c0 18 8c 00 c1 85 8e 82 48 54 2d
>ca78	21 4d 5c cf 21 40 cf 2e 40 c3 02 00 1f c0 18 96
>ca88	00 c1 85 8e 82 48 54 2e 21 4d 5c cf 21 40 cf 2e
>ca98	40 c3 02 00 1f c0 18 a0 00 c1 85 8e 82 48 54 30
>caa8	21 4d 5c cf 21 40 cf 2e 40 c3 02 00 1f c0 19 aa
>cab8	00 c1 85 8e 82 48 54 2b 21 4d 5c cf 21 21 41 cf
>cac8	2e 40 c3 02 00 1f c0 19 b4 00 c1 85 8e 82 48 54
>cad8	2c 21 4d 5c cf 21 21 41 cf 2e 40 c3 02 00 1f c0
>cae8	19 be 00 c1 85 8e 82 48 54 2f 21 4d 5c cf 21 21
>caf8	41 cf 2e 40 c3 02 00 1f c0 17 c8 00 c1 85 8e 82
>cb08	45 73 28 42 6f cf 21 63 cf 2e 40 c3 02 00 1f c0
>cb18	18 d2 00 c1 85 8e 82 45 73 29 42 6f cf 21 47 7f
>cb28	cf 2e 40 c3 02 00 1f c0 18 dc 00 c1 85 8e 82 45
>cb38	73 2a 42 6f cf 21 47 5c cf 2e 40 c3 02 00 1f c0
>cb48	16 e6 00 c1 85 8e 82 45 73 24 45 cf 21 4b cf 2e
>cb58	40 c3 02 00 1f c0 18 f0 00 c1 85 8e 82 45 73 25
>cb68	45 cf 21 42 79 60 cf 2e 40 c3 02 02 4f c0 1b fa
>cb78	00 c1 85 8e 82 21 49 41 20 21 49 7a cf 21 21 52
>cb88	7b cf 2e 40 c3 02 00 2f c0 19 04 01 c1 85 8e 82
>cb98	21 49 41 21 21 49 7a cf 21 79 cf 2e 40 c3 02 00
>cba8	1f c0 1d 0e 01 c1 85 8e 82 21 49 41 22 21 49 7a
>cbb8	cf 21 41 59 53 7a cf 2e 79 4a c3 02 18 ff c0 1e
>cbc8	18 01 c1 85 8e 82 21 49 41 23 21 49 7a cf 21 40
>cbd8	c3 03 91 01 ff cf 2e 40 c3 02 01 8f c0 19 22 01
>cbe8	c1 85 8e 82 21 49 41 2d 21 49 7a cf 21 40 cf 2e
>cbf8	40 c3 02 00 1f c0 19 2c 01 c1 85 8e 82 21 49 41
>cc08	2e 21 49 7a cf 21 40 cf 2e 40 c3 02 00 1f c0 19
>cc18	36 01 c1 85 8e 82 21 49 41 30 21 49 7a cf 21 40
>cc28	cf 2e 40 c3 02 00 1f c0 1a 40 01 c1 85 8e 82 21
>cc38	49 41 2b 21 49 7a cf 21 21 41 cf 2e 40 c3 02 00
>cc48	1f c0 1a 4a 01 c1 85 8e 82 21 49 41 2c 21 49 7a
>cc58	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1a 54 01 c1
>cc68	85 8e 82 21 49 41 2f 21 49 7a cf 21 21 41 cf 2e
>cc78	40 c3 02 00 1f c0 18 5e 01 c1 85 8e 82 49 41 28
>cc88	43 41 cf 21 41 41 cf 2e 40 c3 02 00 1f c0 18 68
>cc98	01 c1 85 8e 82 49 41 29 43 41 cf 21 4b 41 cf 2e
>cca8	40 c3 02 00 1f c0 18 72 01 c1 85 8e 82 49 41 2a
>ccb8	43 41 cf 21 4a 40 cf 2e 40 c3 02 00 1f c0 16 7c
>ccc8	01 c1 85 8e 82 49 41 24 4c cf 21 40 cf 2e 40 c3
>ccd8	02 00 1f c0 19 86 01 c1 85 8e 82 49 41 25 4c cf
>cce8	21 49 41 40 40 cf 2e 44 c3 02 72 7f c0 21 90 01
>ccf8	c1 85 8e 82 59 c3 02 95 ff 20 21 4c 4b cf 21 21
>cd08	4b 71 c3 02 05 ff cf 2e 40 c3 02 00 2f c0 20 9a
>cd18	01 c1 85 8e 82 59 c3 02 95 ff 21 21 4c 4b cf 21
>cd28	4c 64 c3 02 95 ff cf 2e 40 c3 02 00 2f c0 23 a4
>cd38	01 c1 85 8e 82 59 c3 02 95 ff 22 21 4c 4b cf 21
>cd48	21 44 7b 77 c3 02 05 ff cf 2e 43 4a c3 02 15 ff
>cd58	c0 21 ae 01 c1 85 8e 82 59 c3 02 95 ff 23 21 4c
>cd68	4b cf 21 21 40 c3 03 03 33 ff cf 2e 40 c3 02 00
>cd78	1f c0 1b b8 01 c1 85 8e 82 59 c3 02 95 ff 2d 21
>cd88	4c 4b cf 21 40 cf 2e 40 c3 02 00 1f c0 1b c2 01
>cd98	c1 85 8e 82 59 c3 02 95 ff 2e 21 4c 4b cf 21 40
>cda8	cf 2e 40 c3 02 00 1f c0 1b cc 01 c1 85 8e 82 59
>cdb8	c3 02 95 ff 30 21 4c 4b cf 21 40 cf 2e 40 c3 02
>cdc8	00 1f c0 1c d6 01 c1 85 8e 82 59 c3 02 95 ff 2b
>cdd8	21 4c 4b cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1c
>cde8	e0 01 c1 85 8e 82 59 c3 02 95 ff 2c 21 4c 4b cf
>cdf8	21 21 41 cf 2e 40 c3 02 00 1f c0 1c ea 01 c1 85
>ce08	8e 82 59 c3 02 95 ff 2f 21 4c 4b cf 21 21 41 cf
>ce18	2e 40 c3 02 00 1f c0 18 f4 01 c1 85 8e 82 4c 4a
>ce28	28 4b 69 cf 21 48 48 cf 2e 40 c3 02 00 1f c0 18
>ce38	fe 01 c1 85 8e 82 4c 4a 29 4b 69 cf 21 4f 6b cf
>ce48	2e 40 c3 02 00 2f c0 18 08 02 c1 85 8e 82 4c 4a
>ce58	2a 4b 69 cf 21 47 63 cf 2e 40 c3 02 00 1f c0 16
>ce68	12 02 c1 85 8e 82 4c 4a 24 46 cf 21 4c cf 2e 40
>ce78	c3 02 00 1f c0 17 1c 02 c1 85 8e 82 4c 4a 25 46
>ce88	cf 21 4c 4a 40 cf 2e 40 c3 01 1f c0 25 26 02 c1
>ce98	85 8e 82 48 58 c3 02 36 ff 20 21 4a 62 c3 02 46
>cea8	ff cf 21 21 42 4a c3 01 1f cf 2e 40 c3 02 00 1f
>ceb8	c0 25 30 02 c1 85 8e 82 48 58 c3 02 36 ff 21 21
>cec8	4a 62 c3 02 46 ff cf 21 52 7a c3 02 82 ff cf 2e
>ced8	40 c3 02 00 2f c0 2a 3a 02 c1 85 8e 82 48 58 c3
>cee8	02 36 ff 22 21 4a 62 c3 02 46 ff cf 21 21 41 58
>cef8	54 59 c3 03 36 56 ff cf 2e 78 61 c3 02 53 4f c0
>cf08	26 44 02 c1 85 8e 82 48 58 c3 02 36 ff 23 21 4a
>cf18	62 c3 02 46 ff cf 21 21 40 c3 03 79 52 ff cf 2e
>cf28	40 c3 02 01 6f c0 20 4e 02 c1 85 8e 82 48 58 c3
>cf38	02 36 ff 2d 21 4a 62 c3 02 46 ff cf 21 40 cf 2e
>cf48	40 c3 02 00 1f c0 20 58 02 c1 85 8e 82 48 58 c3
>cf58	02 36 ff 2e 21 4a 62 c3 02 46 ff cf 21 40 cf 2e
>cf68	40 c3 02 00 1f c0 20 62 02 c1 85 8e 82 48 58 c3
>cf78	02 36 ff 30 21 4a 62 c3 02 46 ff cf 21 40 cf 2e
>cf88	40 c3 02 00 1f c0 21 6c 02 c1 85 8e 82 48 58 c3
>cf98	02 36 ff 2b 21 4a 62 c3 02 46 ff cf 21 21 41 cf
>cfa8	2e 40 c3 02 00 1f c0 21 76 02 c1 85 8e 82 48 58
>cfb8	c3 02 36 ff 2c 21 4a 62 c3 02 46 ff cf 21 21 41
>cfc8	cf 2e 40 c3 02 00 1f c0 21 80 02 c1 85 8e 82 48
>cfd8	58 c3 02 36 ff 2f 21 4a 62 c3 02 46 ff cf 21 21
>cfe8	41 cf 2e 40 c3 02 00 1f c0 18 8a 02 c1 85 8e 82
>cff8	47 78 28 42 67 cf 21 42 60 cf 2e 40 c3 02 00 1f
>d008	c0 18 94 02 c1 85 8e 82 47 78 29 42 67 cf 21 47
>d018	7f cf 2e 40 c3 02 00 1f c0 18 9e 02 c1 85 8e 82
>d028	47 78 2a 42 67 cf 21 45 5f cf 2e 40 c3 02 00 1f
>d038	c0 16 a8 02 c1 85 8e 82 47 78 24 43 cf 21 7f cf
>d048	2e 40 c3 02 00 1f c0 17 b2 02 c1 85 8e 82 47 78
>d058	25 43 cf 21 7f 40 cf 2e 40 c3 02 00 8f c0 21 bc
>d068	02 c1 85 8e 82 21 47 65 20 21 4d 6f c3 01 5f cf
>d078	21 21 55 54 c3 01 5f cf 2e 40 c3 02 00 3f c0 20
>d088	c6 02 c1 85 8e 82 21 47 65 21 21 4d 6f c3 01 5f
>d098	cf 21 46 4a c3 01 5f cf 2e 40 c3 02 00 1f c0 24
>d0a8	d0 02 c1 85 8e 82 21 47 65 22 21 4d 6f c3 01 5f
>d0b8	cf 21 41 68 48 7d c3 01 5f cf 2e 41 42 69 c3 02
>d0c8	57 5f c0 21 da 02 c1 85 8e 82 21 47 65 23 21 4d
>d0d8	6f c3 01 5f cf 21 40 c3 03 55 14 ff cf 2e 40 c3
>d0e8	02 01 1f c0 1c e4 02 c1 85 8e 82 21 47 65 2d 21
>d0f8	4d 6f c3 01 5f cf 21 40 cf 2e 40 c3 02 00 1f c0
>d108	1c ee 02 c1 85 8e 82 21 47 65 2e 21 4d 6f c3 01
>d118	5f cf 21 40 cf 2e 40 c3 02 00 1f c0 1c f8 02 c1
>d128	85 8e 82 21 47 65 30 21 4d 6f c3 01 5f cf 21 40
>d138	cf 2e 40 c3 02 00 1f c0 1d 02 03 c1 85 8e 82 21
>d148	47 65 2b 21 4d 6f c3 01 5f cf 21 21 41 cf 2e 40
>d158	c3 02 00 1f c0 1d 0c 03 c1 85 8e 82 21 47 65 2c
>d168	21 4d 6f c3 01 5f cf 21 21 41 cf 2e 40 c3 02 00
>d178	1f c0 1d 16 03 c1 85 8e 82 21 47 65 2f 21 4d 6f
>d188	c3 01 5f cf 21 21 41 cf 2e 40 c3 02 00 1f c0 18
>d198	20 03 c1 85 8e 82 4a 4b 28 47 66 cf 21 42 42 cf
>d1a8	2e 40 c3 02 00 1f c0 18 2a 03 c1 85 8e 82 4a 4b
>d1b8	29 47 66 cf 21 4f 6f cf 2e 40 c3 02 00 2f c0 18
>d1c8	34 03 c1 85 8e 82 4a 4b 2a 47 66 cf 21 4d 6d cf
>d1d8	2e 40 c3 02 00 2f c0 17 3e 03 c1 85 8e 82 4a 4b
>d1e8	24 41 cf 21 45 45 cf 2e 40 c3 02 00 1f c0 17 48
>d1f8	03 c1 85 8e 82 4a 4b 25 41 cf 21 54 56 cf 2e 40
>d208	c3 02 00 3f c0 22 52 03 c1 85 8e 82 41 73 c3 02
>d218	18 ff 20 21 49 74 cf 21 21 48 40 c3 02 82 ff cf
>d228	2e 40 c3 02 00 1f c0 21 5c 03 c1 85 8e 82 41 73
>d238	c3 02 18 ff 21 21 49 74 cf 21 4b 67 c3 02 18 ff
>d248	cf 2e 40 c3 02 00 1f c0 24 66 03 c1 85 8e 82 41
>d258	73 c3 02 18 ff 22 21 49 74 cf 21 21 51 6a 4d c3
>d268	02 04 ff cf 2e 4b 53 c3 02 33 ff c0 22 70 03 c1
>d278	85 8e 82 41 73 c3 02 18 ff 23 21 49 74 cf 21 21
>d288	40 c3 03 18 34 ff cf 2e 40 c3 02 00 4f c0 1c 7a
>d298	03 c1 85 8e 82 41 73 c3 02 18 ff 2d 21 49 74 cf
>d2a8	21 40 cf 2e 40 c3 02 00 1f c0 1c 84 03 c1 85 8e
>d2b8	82 41 73 c3 02 18 ff 2e 21 49 74 cf 21 40 cf 2e
>d2c8	40 c3 02 00 1f c0 1c 8e 03 c1 85 8e 82 41 73 c3
>d2d8	02 18 ff 30 21 49 74 cf 21 40 cf 2e 40 c3 02 00
>d2e8	1f c0 1d 98 03 c1 85 8e 82 41 73 c3 02 18 ff 2b
>d2f8	21 49 74 cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1d
>d308	a2 03 c1 85 8e 82 41 73 c3 02 18 ff 2c 21 49 74
>d318	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1d ac 03 c1
>d328	85 8e 82 41 73 c3 02 18 ff 2f 21 49 74 cf 21 21
>d338	41 cf 2e 40 c3 02 00 1f c0 18 b6 03 c1 85 8e 82
>d348	46 5d 28 4d 79 cf 21 44 59 cf 2e 40 c3 02 00 1f
>d358	c0 18 c0 03 c1 85 8e 82 46 5d 29 4d 79 cf 21 4f
>d368	7d cf 2e 40 c3 02 00 2f c0 18 ca 03 c1 85 8e 82
>d378	46 5d 2a 4d 79 cf 21 4b 64 cf 2e 40 c3 02 00 1f
>d388	c0 16 d4 03 c1 85 8e 82 46 5d 24 43 cf 21 73 cf
>d398	2e 40 c3 02 00 1f c0 17 de 03 c1 85 8e 82 46 5d
>d3a8	25 43 cf 21 73 68 cf 2e 40 c3 02 00 7f c0 1e e8
>d3b8	03 c1 85 8e 82 48 59 20 21 67 c3 01 2f cf 21 47
>d3c8	71 c3 01 8f cf 2e 40 c3 02 00 1f c0 1e f2 03 c1
>d3d8	85 8e 82 48 59 21 21 67 c3 01 2f cf 21 49 40 c3
>d3e8	01 2f cf 2e 40 c3 02 00 1f c0 21 fc 03 c1 85 8e
>d3f8	82 48 59 22 21 67 c3 01 2f cf 21 21 45 48 7a c3
>d408	01 4f cf 2e 43 52 c3 02 50 4f c0 1f 06 04 c1 85
>d418	8e 82 48 59 23 21 67 c3 01 2f cf 21 21 4d c3 02
>d428	69 9f cf 2e 40 c3 02 27 4f c0 1a 10 04 c1 85 8e
>d438	82 48 59 2d 21 67 c3 01 2f cf 21 40 cf 2e 40 c3
>d448	02 00 1f c0 1a 1a 04 c1 85 8e 82 48 59 2e 21 67
>d458	c3 01 2f cf 21 40 cf 2e 40 c3 02 00 1f c0 1a 24
>d468	04 c1 85 8e 82 48 59 30 21 67 c3 01 2f cf 21 40
>d478	cf 2e 40 c3 02 00 1f c0 1b 2e 04 c1 85 8e 82 48
>d488	59 2b 21 67 c3 01 2f cf 21 21 41 cf 2e 40 c3 02
>d498	00 1f c0 1b 38 04 c1 85 8e 82 48 59 2c 21 67 c3
>d4a8	01 2f cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1b 42
>d4b8	04 c1 85 8e 82 48 59 2f 21 67 c3 01 2f cf 21 21
>d4c8	41 cf 2e 40 c3 02 00 1f c0 17 4c 04 c1 85 8e 82
>d4d8	43 51 28 4c 7a cf 21 50 cf 2e 40 c3 02 00 1f c0
>d4e8	18 56 04 c1 85 8e 82 43 51 29 4c 7a cf 21 4f 7b
>d4f8	cf 2e 40 c3 02 00 2f c0 18 60 04 c1 85 8e 82 43
>d508	51 2a 4c 7a cf 21 4f 6b cf 2e 40 c3 02 00 2f c0
>d518	17 6a 04 c1 85 8e 82 43 51 24 40 cf 21 43 51 cf
>d528	2e 40 c3 02 00 1f c0 17 74 04 c1 85 8e 82 43 51
>d538	25 40 cf 21 43 51 cf 2e 40 c3 02 00 1f c0 22 7e
>d548	04 c1 85 8e 82 44 4f c3 02 67 ff 20 21 4b 5f cf
>d558	21 21 47 4f c3 02 33 ff cf 2e 40 c3 02 00 1f c0
>d568	21 88 04 c1 85 8e 82 44 4f c3 02 67 ff 21 21 4b
>d578	5f cf 21 4f 6e c3 02 67 ff cf 2e 40 c3 02 00 2f
>d588	c0 24 92 04 c1 85 8e 82 44 4f c3 02 67 ff 22 21
>d598	4b 5f cf 21 21 70 6f 7d c3 02 45 ff cf 2e 5f 4c
>d5a8	c3 02 77 5f c0 22 9c 04 c1 85 8e 82 44 4f c3 02
>d5b8	67 ff 23 21 4b 5f cf 21 21 40 c3 03 36 96 ff cf
>d5c8	2e 40 c3 02 00 7f c0 1c a6 04 c1 85 8e 82 44 4f
>d5d8	c3 02 67 ff 2d 21 4b 5f cf 21 40 cf 2e 40 c3 02
>d5e8	00 1f c0 1c b0 04 c1 85 8e 82 44 4f c3 02 67 ff
>d5f8	2e 21 4b 5f cf 21 40 cf 2e 40 c3 02 00 1f c0 1c
>d608	ba 04 c1 85 8e 82 44 4f c3 02 67 ff 30 21 4b 5f
>d618	cf 21 40 cf 2e 40 c3 02 00 1f c0 1d c4 04 c1 85
>d628	8e 82 44 4f c3 02 67 ff 2b 21 4b 5f cf 21 21 41
>d638	cf 2e 40 c3 02 00 1f c0 1d ce 04 c1 85 8e 82 44
>d648	4f c3 02 67 ff 2c 21 4b 5f cf 21 21 41 cf 2e 40
>d658	c3 02 00 1f c0 1d d8 04 c1 85 8e 82 44 4f c3 02
>d668	67 ff 2f 21 4b 5f cf 21 21 41 cf 2e 40 c3 02 00
>d678	1f c0 17 e2 04 c1 85 8e 82 41 7d 28 46 74 cf 21
>d688	74 cf 2e 40 c3 02 00 1f c0 18 ec 04 c1 85 8e 82
>d698	41 7d 29 46 74 cf 21 47 7d cf 2e 40 c3 02 00 1f
>d6a8	c0 18 f6 04 c1 85 8e 82 41 7d 2a 46 74 cf 21 47
>d6b8	49 cf 2e 40 c3 02 00 1f c0 16 00 05 c1 85 8e 82
>d6c8	41 7d 24 47 cf 21 40 cf 2e 40 c3 02 00 1f c0 18
>d6d8	0a 05 c1 85 8e 82 41 7d 25 47 cf 21 43 7a 40 cf
>d6e8	2e 40 c3 02 03 2f c0 20 14 05 c1 85 8e 82 4f 4f
>d6f8	c3 02 18 ff 20 42 52 cf 21 51 61 c3 02 18 ff cf
>d708	2e 40 c3 02 00 2f c0 20 1e 05 c1 85 8e 82 4f 4f
>d718	c3 02 18 ff 21 42 52 cf 21 4c 7d c3 02 18 ff cf
>d728	2e 40 c3 02 00 2f c0 22 28 05 c1 85 8e 82 4f 4f
>d738	c3 02 18 ff 22 42 52 cf 21 62 70 68 c3 02 28 ff
>d748	cf 2e 56 4f c3 02 76 3f c0 20 32 05 c1 85 8e 82
>d758	4f 4f c3 02 18 ff 23 42 52 cf 21 46 c3 03 67 93
>d768	ff cf 2e 40 c3 02 13 4f c0 1b 3c 05 c1 85 8e 82
>d778	4f 4f c3 02 18 ff 2d 42 52 cf 21 40 cf 2e 40 c3
>d788	02 00 1f c0 1b 46 05 c1 85 8e 82 4f 4f c3 02 18
>d798	ff 2e 42 52 cf 21 40 cf 2e 40 c3 02 00 1f c0 1b
>d7a8	50 05 c1 85 8e 82 4f 4f c3 02 18 ff 30 42 52 cf
>d7b8	21 40 cf 2e 40 c3 02 00 1f c0 1c 5a 05 c1 85 8e
>d7c8	82 4f 4f c3 02 18 ff 2b 42 52 cf 21 21 41 cf 2e
>d7d8	40 c3 02 00 1f c0 1c 64 05 c1 85 8e 82 4f 4f c3
>d7e8	02 18 ff 2c 42 52 cf 21 21 41 cf 2e 40 c3 02 00
>d7f8	1f c0 1c 6e 05 c1 85 8e 82 4f 4f c3 02 18 ff 2f
>d808	42 52 cf 21 21 41 cf 2e 40 c3 02 00 1f c0 17 78
>d818	05 c1 85 8e 82 43 48 28 4c 4d cf 21 48 cf 2e 40
>d828	c3 02 00 1f c0 18 82 05 c1 85 8e 82 43 48 29 4c
>d838	4d cf 21 4f 4d cf 2e 40 c3 02 00 2f c0 18 8c 05
>d848	c1 85 8e 82 43 48 2a 4c 4d cf 21 4f 45 cf 2e 40
>d858	c3 02 00 2f c0 16 96 05 c1 85 8e 82 43 48 24 43
>d868	cf 21 59 cf 2e 40 c3 02 00 1f c0 17 a0 05 c1 85
>d878	8e 82 43 48 25 43 cf 21 59 40 cf 2e 40 c3 02 00
>d888	3f c0 22 aa 05 c1 85 8e 82 6f c3 02 56 ff 20 54
>d898	c3 02 73 ff cf 21 41 44 c3 02 29 ff cf 2e 40 c3
>d8a8	02 00 1f c0 21 b4 05 c1 85 8e 82 6f c3 02 56 ff
>d8b8	21 54 c3 02 73 ff cf 21 5a c3 02 83 ff cf 2e 40
>d8c8	c3 02 00 1f c0 23 be 05 c1 85 8e 82 6f c3 02 56
>d8d8	ff 22 54 c3 02 73 ff cf 21 4f 59 c3 03 91 88 ff
>d8e8	cf 2e 49 c3 02 85 9f c0 22 c8 05 c1 85 8e 82 6f
>d8f8	c3 02 56 ff 23 54 c3 02 73 ff cf 21 42 c3 03 29
>d908	43 ff cf 2e 40 c3 02 04 6f c0 1d d2 05 c1 85 8e
>d918	82 6f c3 02 56 ff 2d 54 c3 02 73 ff cf 21 40 cf
>d928	2e 40 c3 02 00 1f c0 1d dc 05 c1 85 8e 82 6f c3
>d938	02 56 ff 2e 54 c3 02 73 ff cf 21 40 cf 2e 40 c3
>d948	02 00 1f c0 1d e6 05 c1 85 8e 82 6f c3 02 56 ff
>d958	30 54 c3 02 73 ff cf 21 40 cf 2e 40 c3 02 00 1f
>d968	c0 1e f0 05 c1 85 8e 82 6f c3 02 56 ff 2b 54 c3
>d978	02 73 ff cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1e
>d988	fa 05 c1 85 8e 82 6f c3 02 56 ff 2c 54 c3 02 73
>d998	ff cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1e 04 06
>d9a8	c1 85 8e 82 6f c3 02 56 ff 2f 54 c3 02 73 ff cf
>d9b8	21 21 41 cf 2e 40 c3 02 00 1f c0 18 0e 06 c1 85
>d9c8	8e 82 47 43 28 41 7a cf 21 41 42 cf 2e 40 c3 02
>d9d8	00 1f c0 18 18 06 c1 85 8e 82 47 43 29 41 7a cf
>d9e8	21 47 7b cf 2e 40 c3 02 00 1f c0 18 22 06 c1 85
>d9f8	8e 82 47 43 2a 41 7a cf 21 46 79 cf 2e 40 c3 02
>da08	00 1f c0 16 2c 06 c1 85 8e 82 47 43 24 48 cf 21
>da18	41 cf 2e 40 c3 02 00 1f c0 18 36 06 c1 85 8e 82
>da28	47 43 25 48 cf 21 5c 4c 40 cf 2e 40 c3 02 23 1f
>da38	c0 23 40 06 c1 85 8e 82 48 68 c3 02 81 ff 20 21
>da48	48 42 c3 02 31 ff cf 21 66 c3 01 5f cf 2e 40 c3
>da58	02 00 1f c0 25 4a 06 c1 85 8e 82 48 68 c3 02 81
>da68	ff 21 21 48 42 c3 02 31 ff cf 21 50 6b c3 02 12
>da78	ff cf 2e 40 c3 02 00 2f c0 2a 54 06 c1 85 8e 82
>da88	48 68 c3 02 81 ff 22 21 48 42 c3 02 31 ff cf 21
>da98	21 41 45 5a 5b c3 03 71 11 ff cf 2e 6c 5b c3 02
>daa8	15 7f c0 26 5e 06 c1 85 8e 82 48 68 c3 02 81 ff
>dab8	23 21 48 42 c3 02 31 ff cf 21 21 41 c3 03 07 49
>dac8	ff cf 2e 40 c3 02 02 1f c0 20 68 06 c1 85 8e 82
>dad8	48 68 c3 02 81 ff 2d 21 48 42 c3 02 31 ff cf 21
>dae8	40 cf 2e 40 c3 02 00 1f c0 20 72 06 c1 85 8e 82
>daf8	48 68 c3 02 81 ff 2e 21 48 42 c3 02 31 ff cf 21
>db08	40 cf 2e 40 c3 02 00 1f c0 20 7c 06 c1 85 8e 82
>db18	48 68 c3 02 81 ff 30 21 48 42 c3 02 31 ff cf 21
>db28	40 cf 2e 40 c3 02 00 1f c0 21 86 06 c1 85 8e 82
>db38	48 68 c3 02 81 ff 2b 21 48 42 c3 02 31 ff cf 21
>db48	21 41 cf 2e 40 c3 02 00 1f c0 21 90 06 c1 85 8e
>db58	82 48 68 c3 02 81 ff 2c 21 48 42 c3 02 31 ff cf
>db68	21 21 41 cf 2e 40 c3 02 00 1f c0 21 9a 06 c1 85
>db78	8e 82 48 68 c3 02 81 ff 2f 21 48 42 c3 02 31 ff
>db88	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 18 a4 06 c1
>db98	85 8e 82 42 77 28 4b 6d cf 21 42 65 cf 2e 40 c3
>dba8	02 00 1f c0 18 ae 06 c1 85 8e 82 42 77 29 4b 6d
>dbb8	cf 21 4b 7f cf 2e 40 c3 02 00 2f c0 18 b8 06 c1
>dbc8	85 8e 82 42 77 2a 4b 6d cf 21 49 5a cf 2e 40 c3
>dbd8	02 00 1f c0 16 c2 06 c1 85 8e 82 42 77 24 4a cf
>dbe8	21 40 cf 2e 40 c3 02 00 1f c0 18 cc 06 c1 85 8e
>dbf8	82 42 77 25 4a cf 21 6d 70 40 cf 2e 40 c3 02 37
>dc08	5f c0 24 d6 06 c1 85 8e 82 4d 76 c3 02 62 ff 20
>dc18	21 66 c3 02 46 ff cf 21 4d 50 c3 02 16 ff cf 2e
>dc28	40 c3 02 00 2f c0 24 e0 06 c1 85 8e 82 4d 76 c3
>dc38	02 62 ff 21 21 66 c3 02 46 ff cf 21 4e 5d c3 02
>dc48	08 ff cf 2e 40 c3 02 00 2f c0 28 ea 06 c1 85 8e
>dc58	82 4d 76 c3 02 62 ff 22 21 66 c3 02 46 ff cf 21
>dc68	21 48 54 73 c3 03 40 52 ff cf 2e 45 54 c3 02 99
>dc78	4f c0 24 f4 06 c1 85 8e 82 4d 76 c3 02 62 ff 23
>dc88	21 66 c3 02 46 ff cf 21 21 57 c3 02 05 3f cf 2e
>dc98	40 c3 02 46 1f c0 1f fe 06 c1 85 8e 82 21 66 c3
>dca8	02 46 ff 2d 21 66 c3 02 46 ff cf 21 40 cf 2e 40
>dcb8	c3 02 00 1f c0 20 08 07 c1 85 8e 82 21 66 c3 02
>dcc8	46 ff 2e 21 66 c3 02 46 ff cf 21 21 41 cf 2e 40
>dcd8	c3 02 00 1f c0 20 12 07 c1 85 8e 82 21 66 c3 02
>dce8	46 ff 30 21 66 c3 02 46 ff cf 21 21 41 cf 2e 40
>dcf8	c3 02 00 1f c0 1f 1c 07 c1 85 8e 82 21 66 c3 02
>dd08	46 ff 2b 21 66 c3 02 46 ff cf 21 40 cf 2e 40 c3
>dd18	02 00 1f c0 20 26 07 c1 85 8e 82 21 66 c3 02 46
>dd28	ff 2c 21 66 c3 02 46 ff cf 21 21 41 cf 2e 40 c3
>dd38	02 00 1f c0 1f 30 07 c1 85 8e 82 21 66 c3 02 46
>dd48	ff 2f 21 66 c3 02 46 ff cf 21 40 cf 2e 40 c3 02
>dd58	00 1f c0 17 3a 07 c1 85 8e 82 44 61 28 49 48 cf
>dd68	21 40 cf 2e 40 c3 02 00 1f c0 18 44 07 c1 85 8e
>dd78	82 44 61 29 49 48 cf 21 4d 69 cf 2e 40 c3 02 00
>dd88	2f c0 18 4e 07 c1 85 8e 82 44 61 2a 49 48 cf 21
>dd98	4d 69 cf 2e 40 c3 02 00 2f c0 16 58 07 c1 85 8e
>dda8	82 44 61 24 43 cf 21 64 cf 2e 40 c3 02 00 1f c0
>ddb8	17 62 07 c1 85 8e 82 44 61 25 43 cf 21 64 48 cf
>ddc8	2e 40 c3 02 00 5f c0 1a 6c 07 c1 85 8e 82 21 4a
>ddd8	4f 20 47 46 cf 21 21 43 49 cf 2e 40 c3 02 00 1f
>dde8	c0 1a 76 07 c1 85 8e 82 21 4a 4f 21 47 46 cf 21
>ddf8	21 51 55 cf 2e 40 c3 02 00 2f c0 1c 80 07 c1 85
>de08	8e 82 21 4a 4f 22 47 46 cf 21 21 41 48 66 5a cf
>de18	2e 6e 5d c3 01 7f c0 1e 8a 07 c1 85 8e 82 21 4a
>de28	4f 23 47 46 cf 21 21 41 c3 03 44 27 ff cf 2e 40
>de38	c3 02 02 9f c0 19 94 07 c1 85 8e 82 21 4a 4f 2d
>de48	47 46 cf 21 21 41 cf 2e 40 c3 02 00 1f c0 19 9e
>de58	07 c1 85 8e 82 21 4a 4f 2e 47 46 cf 21 21 41 cf
>de68	2e 40 c3 02 00 1f c0 18 a8 07 c1 85 8e 82 21 4a
>de78	4f 30 47 46 cf 21 40 cf 2e 40 c3 02 00 1f c0 18
>de88	b2 07 c1 85 8e 82 21 4a 4f 2b 47 46 cf 21 40 cf
>de98	2e 40 c3 02 00 1f c0 18 bc 07 c1 85 8e 82 21 4a
>dea8	4f 2c 47 46 cf 21 40 cf 2e 40 c3 02 00 1f c0 19
>deb8	c6 07 c1 85 8e 82 21 4a 4f 2f 47 46 cf 21 21 41
>dec8	cf 2e 40 c3 02 00 1f c0 18 d0 07 c1 85 8e 82 4d
>ded8	6b 28 45 44 cf 21 45 40 cf 2e 40 c3 02 00 1f c0
>dee8	18 da 07 c1 85 8e 82 4d 6b 29 45 44 cf 21 4d 6f
>def8	cf 2e 40 c3 02 00 2f c0 18 e4 07 c1 85 8e 82 4d
>df08	6b 2a 45 44 cf 21 48 6f cf 2e 40 c3 02 00 1f c0
>df18	17 ee 07 c1 85 8e 82 4d 6b 24 43 cf 21 41 6d cf
>df28	2e 40 c3 02 00 1f c0 18 f8 07 c1 85 8e 82 4d 6b
>df38	25 43 cf 21 41 6d 58 cf 2e 40 c3 02 01 4f c0 1a
>df48	02 08 c1 85 8e 82 42 49 20 21 49 6b cf 21 21 47
>df58	62 cf 2e 40 c3 02 00 1f c0 19 0c 08 c1 85 8e 82
>df68	42 49 21 21 49 6b cf 21 4b 74 cf 2e 40 c3 02 00
>df78	2f c0 1c 16 08 c1 85 8e 82 42 49 22 21 49 6b cf
>df88	21 21 54 6d 43 cf 2e 4d 50 c3 02 03 ff c0 1e 20
>df98	08 c1 85 8e 82 42 49 23 21 49 6b cf 21 21 40 c3
>dfa8	03 22 13 ff cf 2e 40 c3 02 00 4f c0 18 2a 08 c1
>dfb8	85 8e 82 42 49 2d 21 49 6b cf 21 40 cf 2e 40 c3
>dfc8	02 00 1f c0 18 34 08 c1 85 8e 82 42 49 2e 21 49
>dfd8	6b cf 21 40 cf 2e 40 c3 02 00 1f c0 18 3e 08 c1
>dfe8	85 8e 82 42 49 30 21 49 6b cf 21 40 cf 2e 40 c3
>dff8	02 00 1f c0 19 48 08 c1 85 8e 82 42 49 2b 21 49
>e008	6b cf 21 21 41 cf 2e 40 c3 02 00 1f c0 19 52 08
>e018	c1 85 8e 82 42 49 2c 21 49 6b cf 21 21 41 cf 2e
>e028	40 c3 02 00 1f c0 19 5c 08 c1 85 8e 82 42 49 2f
>e038	21 49 6b cf 21 21 41 cf 2e 40 c3 02 00 1f c0 18
>e048	66 08 c1 85 8e 82 49 7b 28 45 59 cf 21 41 59 cf
>e058	2e 40 c3 02 00 1f c0 18 70 08 c1 85 8e 82 49 7b
>e068	29 45 59 cf 21 4d 7b cf 2e 40 c3 02 00 2f c0 18
>e078	7a 08 c1 85 8e 82 49 7b 2a 45 59 cf 21 4c 62 cf
>e088	2e 40 c3 02 00 2f c0 16 84 08 c1 85 8e 82 49 7b
>e098	24 4b cf 21 40 cf 2e 40 c3 02 00 1f c0 19 8e 08
>e0a8	c1 85 8e 82 49 7b 25 4b cf 21 44 7d 60 40 cf 2e
>e0b8	42 c3 02 60 1f c0 18 98 08 c1 85 8e 82 48 79 20
>e0c8	4f 62 cf 21 58 5b cf 2e 40 c3 02 00 3f c0 19 a2
>e0d8	08 c1 85 8e 82 48 79 21 4f 62 cf 21 21 46 69 cf
>e0e8	2e 40 c3 02 00 1f c0 1c ac 08 c1 85 8e 82 48 79
>e0f8	22 4f 62 cf 21 42 4a 45 52 cf 2e 41 58 57 c3 02
>e108	86 ff c0 1c b6 08 c1 85 8e 82 48 79 23 4f 62 cf
>e118	21 40 c3 03 57 24 ff cf 2e 40 c3 02 01 1f c0 18
>e128	c0 08 c1 85 8e 82 48 79 2d 4f 62 cf 21 21 41 cf
>e138	2e 40 c3 02 00 1f c0 18 ca 08 c1 85 8e 82 48 79
>e148	2e 4f 62 cf 21 21 41 cf 2e 40 c3 02 00 1f c0 17
>e158	d4 08 c1 85 8e 82 48 79 30 4f 62 cf 21 40 cf 2e
>e168	40 c3 02 00 1f c0 17 de 08 c1 85 8e 82 48 79 2b
>e178	4f 62 cf 21 40 cf 2e 40 c3 02 00 1f c0 17 e8 08
>e188	c1 85 8e 82 48 79 2c 4f 62 cf 21 40 cf 2e 40 c3
>e198	02 00 1f c0 18 f2 08 c1 85 8e 82 48 79 2f 4f 62
>e1a8	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 17 fc 08 c1
>e1b8	85 8e 82 44 46 28 4a 6d cf 21 44 cf 2e 40 c3 02
>e1c8	00 1f c0 18 06 09 c1 85 8e 82 44 46 29 4a 6d cf
>e1d8	21 4e 6f cf 2e 40 c3 02 00 2f c0 18 10 09 c1 85
>e1e8	8e 82 44 46 2a 4a 6d cf 21 4e 6b cf 2e 40 c3 02
>e1f8	00 2f c0 16 1a 09 c1 85 8e 82 44 46 24 49 cf 21
>e208	40 cf 2e 40 c3 02 00 1f c0 18 24 09 c1 85 8e 82
>e218	44 46 25 49 cf 21 60 70 40 cf 2e 40 c3 02 26 8f
>e228	c0 27 2e 09 c1 85 8e 82 21 46 51 c3 02 96 ff 20
>e238	21 48 7e c3 02 87 ff cf 21 21 4f 50 c3 02 83 ff
>e248	cf 2e 40 c3 02 00 2f c0 26 38 09 c1 85 8e 82 21
>e258	46 51 c3 02 96 ff 21 21 48 7e c3 02 87 ff cf 21
>e268	42 6c c3 02 91 ff cf 2e 40 c3 02 00 1f c0 29 42
>e278	09 c1 85 8e 82 21 46 51 c3 02 96 ff 22 21 48 7e
>e288	c3 02 87 ff cf 21 78 5a 62 c3 03 74 52 ff cf 2e
>e298	64 46 c3 02 74 7f c0 26 4c 09 c1 85 8e 82 21 46
>e2a8	51 c3 02 96 ff 23 21 48 7e c3 02 87 ff cf 21 40
>e2b8	c3 03 69 92 ff cf 2e 40 c3 02 01 4f c0 21 56 09
>e2c8	c1 85 8e 82 21 46 51 c3 02 96 ff 2d 21 48 7e c3
>e2d8	02 87 ff cf 21 40 cf 2e 40 c3 02 00 1f c0 21 60
>e2e8	09 c1 85 8e 82 21 46 51 c3 02 96 ff 2e 21 48 7e
>e2f8	c3 02 87 ff cf 21 40 cf 2e 40 c3 02 00 1f c0 21
>e308	6a 09 c1 85 8e 82 21 46 51 c3 02 96 ff 30 21 48
>e318	7e c3 02 87 ff cf 21 40 cf 2e 40 c3 02 00 1f c0
>e328	22 74 09 c1 85 8e 82 21 46 51 c3 02 96 ff 2b 21
>e338	48 7e c3 02 87 ff cf 21 21 41 cf 2e 40 c3 02 00
>e348	1f c0 22 7e 09 c1 85 8e 82 21 46 51 c3 02 96 ff
>e358	2c 21 48 7e c3 02 87 ff cf 21 21 41 cf 2e 40 c3
>e368	02 00 1f c0 22 88 09 c1 85 8e 82 21 46 51 c3 02
>e378	96 ff 2f 21 48 7e c3 02 87 ff cf 21 21 41 cf 2e
>e388	40 c3 02 00 1f c0 18 92 09 c1 85 8e 82 4a 7e 28
>e398	43 62 cf 21 42 62 cf 2e 40 c3 02 00 1f c0 18 9c
>e3a8	09 c1 85 8e 82 4a 7e 29 43 62 cf 21 4b 7e cf 2e
>e3b8	40 c3 02 00 2f c0 18 a6 09 c1 85 8e 82 4a 7e 2a
>e3c8	43 62 cf 21 49 5c cf 2e 40 c3 02 00 1f c0 17 b0
>e3d8	09 c1 85 8e 82 4a 7e 24 43 cf 21 41 57 cf 2e 40
>e3e8	c3 02 00 1f c0 18 ba 09 c1 85 8e 82 4a 7e 25 43
>e3f8	cf 21 41 57 70 cf 2e 40 c3 02 01 1f c0 21 c4 09
>e408	c1 85 8e 82 21 4f 5c c3 02 16 ff 20 4f 5c cf 21
>e418	21 40 c3 02 16 ff cf 2e 40 c3 02 00 1f c0 22 ce
>e428	09 c1 85 8e 82 21 4f 5c c3 02 16 ff 21 4f 5c cf
>e438	21 21 5e 78 c3 02 16 ff cf 2e 40 c3 02 00 4f c0
>e448	26 d8 09 c1 85 8e 82 21 4f 5c c3 02 16 ff 22 4f
>e458	5c cf 21 21 43 6e 56 6e c3 02 08 ff cf 2e 42 58
>e468	63 c3 02 02 1f c0 22 e2 09 c1 85 8e 82 21 4f 5c
>e478	c3 02 16 ff 23 4f 5c cf 21 21 41 c3 03 00 02 ff
>e488	cf 2e 40 c3 02 02 ff c0 1d ec 09 c1 85 8e 82 21
>e498	4f 5c c3 02 16 ff 2d 4f 5c cf 21 21 41 cf 2e 40
>e4a8	c3 02 00 1f c0 1d f6 09 c1 85 8e 82 21 4f 5c c3
>e4b8	02 16 ff 2e 4f 5c cf 21 21 41 cf 2e 40 c3 02 00
>e4c8	1f c0 1c 00 0a c1 85 8e 82 21 4f 5c c3 02 16 ff
>e4d8	30 4f 5c cf 21 40 cf 2e 40 c3 02 00 1f c0 1c 0a
>e4e8	0a c1 85 8e 82 21 4f 5c c3 02 16 ff 2b 4f 5c cf
>e4f8	21 40 cf 2e 40 c3 02 00 1f c0 1c 14 0a c1 85 8e
>e508	82 21 4f 5c c3 02 16 ff 2c 4f 5c cf 21 40 cf 2e
>e518	40 c3 02 00 1f c0 1d 1e 0a c1 85 8e 82 21 4f 5c
>e528	c3 02 16 ff 2f 4f 5c cf 21 21 41 cf 2e 40 c3 02
>e538	00 1f c0 17 28 0a c1 85 8e 82 4b 77 28 44 6f cf
>e548	21 67 cf 2e 40 c3 02 00 1f c0 18 32 0a c1 85 8e
>e558	82 4b 77 29 44 6f cf 21 4f 7f cf 2e 40 c3 02 00
>e568	2f c0 18 3c 0a c1 85 8e 82 4b 77 2a 44 6f cf 21
>e578	4f 58 cf 2e 40 c3 02 00 2f c0 17 46 0a c1 85 8e
>e588	82 4b 77 24 40 cf 21 4b 77 cf 2e 40 c3 02 00 2f
>e598	c0 17 50 0a c1 85 8e 82 4b 77 25 40 cf 21 4b 77
>e5a8	cf 2e 40 c3 02 00 2f c0 23 5a 0a c1 85 8e 82 21
>e5b8	4b 67 20 21 47 7b c3 02 05 ff cf 21 21 53 62 c3
>e5c8	02 05 ff cf 2e 40 c3 02 00 3f c0 23 64 0a c1 85
>e5d8	8e 82 21 4b 67 21 21 47 7b c3 02 05 ff cf 21 21
>e5e8	43 6b c3 02 95 ff cf 2e 40 c3 02 00 1f c0 25 6e
>e5f8	0a c1 85 8e 82 21 4b 67 22 21 47 7b c3 02 05 ff
>e608	cf 21 41 5b 7e 62 c3 02 15 ff cf 2e 7a 77 c3 02
>e618	38 2f c0 22 78 0a c1 85 8e 82 21 4b 67 23 21 47
>e628	7b c3 02 05 ff cf 21 41 c3 03 46 53 ff cf 2e 40
>e638	c3 02 02 9f c0 1e 82 0a c1 85 8e 82 21 4b 67 2d
>e648	21 47 7b c3 02 05 ff cf 21 21 41 cf 2e 40 c3 02
>e658	00 1f c0 1e 8c 0a c1 85 8e 82 21 4b 67 2e 21 47
>e668	7b c3 02 05 ff cf 21 21 41 cf 2e 40 c3 02 00 1f
>e678	c0 1d 96 0a c1 85 8e 82 21 4b 67 30 21 47 7b c3
>e688	02 05 ff cf 21 40 cf 2e 40 c3 02 00 1f c0 1d a0
>e698	0a c1 85 8e 82 21 4b 67 2b 21 47 7b c3 02 05 ff
>e6a8	cf 21 40 cf 2e 40 c3 02 00 1f c0 1d aa 0a c1 85
>e6b8	8e 82 21 4b 67 2c 21 47 7b c3 02 05 ff cf 21 40
>e6c8	cf 2e 40 c3 02 00 1f c0 1e b4 0a c1 85 8e 82 21
>e6d8	4b 67 2f 21 47 7b c3 02 05 ff cf 21 21 41 cf 2e
>e6e8	40 c3 02 00 1f c0 18 be 0a c1 85 8e 82 48 61 28
>e6f8	4f 65 cf 21 48 61 cf 2e 40 c3 02 00 1f c0 18 c8
>e708	0a c1 85 8e 82 48 61 29 4f 65 cf 21 4f 65 cf 2e
>e718	40 c3 02 00 2f c0 18 d2 0a c1 85 8e 82 48 61 2a
>e728	4f 65 cf 21 47 44 cf 2e 40 c3 02 00 1f c0 17 dc
>e738	0a c1 85 8e 82 48 61 24 42 cf 21 42 48 cf 2e 40
>e748	c3 02 00 1f c0 17 e6 0a c1 85 8e 82 48 61 25 42
>e758	cf 21 62 44 cf 2e 40 c3 02 00 4f c0 1a f0 0a c1
>e768	85 8e 82 46 65 20 21 4b 74 cf 21 21 45 4f cf 2e
>e778	40 c3 02 00 1f c0 19 fa 0a c1 85 8e 82 46 65 21
>e788	21 4b 74 cf 21 52 59 cf 2e 40 c3 02 00 2f c0 1d
>e798	04 0b c1 85 8e 82 46 65 22 21 4b 74 cf 21 21 41
>e7a8	4d 6d 44 cf 2e 71 6e c3 02 76 ff c0 1e 0e 0b c1
>e7b8	85 8e 82 46 65 23 21 4b 74 cf 21 21 40 c3 03 55
>e7c8	69 ff cf 2e 40 c3 02 01 1f c0 19 18 0b c1 85 8e
>e7d8	82 21 4b 74 2d 21 4b 74 cf 21 40 cf 2e 40 c3 02
>e7e8	00 1f c0 1a 22 0b c1 85 8e 82 21 4b 74 2e 21 4b
>e7f8	74 cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1a 2c 0b
>e808	c1 85 8e 82 21 4b 74 30 21 4b 74 cf 21 21 41 cf
>e818	2e 40 c3 02 00 1f c0 19 36 0b c1 85 8e 82 21 4b
>e828	74 2b 21 4b 74 cf 21 40 cf 2e 40 c3 02 00 1f c0
>e838	1a 40 0b c1 85 8e 82 21 4b 74 2c 21 4b 74 cf 21
>e848	21 41 cf 2e 40 c3 02 00 1f c0 19 4a 0b c1 85 8e
>e858	82 21 4b 74 2f 21 4b 74 cf 21 40 cf 2e 40 c3 02
>e868	00 1f c0 18 54 0b c1 85 8e 82 45 56 28 44 4a cf
>e878	21 44 42 cf 2e 40 c3 02 00 1f c0 18 5e 0b c1 85
>e888	8e 82 45 56 29 44 4a cf 21 45 5e cf 2e 40 c3 02
>e898	00 1f c0 18 68 0b c1 85 8e 82 45 56 2a 44 4a cf
>e8a8	21 41 5c cf 2e 40 c3 02 00 1f c0 17 72 0b c1 85
>e8b8	8e 82 45 56 24 40 cf 21 45 56 cf 2e 40 c3 02 00
>e8c8	1f c0 17 7c 0b c1 85 8e 82 45 56 25 40 cf 21 45
>e8d8	56 cf 2e 40 c3 02 00 1f c0 24 86 0b c1 85 8e 82
>e8e8	47 54 c3 01 7f 20 21 43 5b c3 02 74 ff cf 21 43
>e8f8	78 c3 02 96 ff cf 2e 40 c3 02 00 1f c0 24 90 0b
>e908	c1 85 8e 82 47 54 c3 01 7f 21 21 43 5b c3 02 74
>e918	ff cf 21 4a 70 c3 02 44 ff cf 2e 40 c3 02 00 1f
>e928	c0 27 9a 0b c1 85 8e 82 47 54 c3 01 7f 22 21 43
>e938	5b c3 02 74 ff cf 21 21 59 49 50 c3 02 13 8f cf
>e948	2e 50 45 c3 02 92 1f c0 24 a4 0b c1 85 8e 82 47
>e958	54 c3 01 7f 23 21 43 5b c3 02 74 ff cf 21 21 42
>e968	c3 02 13 3f cf 2e 40 c3 02 04 3f c0 1f ae 0b c1
>e978	85 8e 82 47 54 c3 01 7f 2d 21 43 5b c3 02 74 ff
>e988	cf 21 40 cf 2e 40 c3 02 00 1f c0 1f b8 0b c1 85
>e998	8e 82 47 54 c3 01 7f 2e 21 43 5b c3 02 74 ff cf
>e9a8	21 40 cf 2e 40 c3 02 00 1f c0 1f c2 0b c1 85 8e
>e9b8	82 47 54 c3 01 7f 30 21 43 5b c3 02 74 ff cf 21
>e9c8	40 cf 2e 40 c3 02 00 1f c0 20 cc 0b c1 85 8e 82
>e9d8	47 54 c3 01 7f 2b 21 43 5b c3 02 74 ff cf 21 21
>e9e8	41 cf 2e 40 c3 02 00 1f c0 20 d6 0b c1 85 8e 82
>e9f8	47 54 c3 01 7f 2c 21 43 5b c3 02 74 ff cf 21 21
>ea08	41 cf 2e 40 c3 02 00 1f c0 20 e0 0b c1 85 8e 82
>ea18	47 54 c3 01 7f 2f 21 43 5b c3 02 74 ff cf 21 21
>ea28	41 cf 2e 40 c3 02 00 1f c0 18 ea 0b c1 85 8e 82
>ea38	4d 63 28 4b 42 cf 21 49 42 cf 2e 40 c3 02 00 1f
>ea48	c0 18 f4 0b c1 85 8e 82 4d 63 29 4b 42 cf 21 4f
>ea58	63 cf 2e 40 c3 02 00 2f c0 18 fe 0b c1 85 8e 82
>ea68	4d 63 2a 4b 42 cf 21 46 61 cf 2e 40 c3 02 00 1f
>ea78	c0 16 08 0c c1 85 8e 82 4d 63 24 44 cf 21 76 cf
>ea88	2e 40 c3 02 00 1f c0 18 12 0c c1 85 8e 82 4d 63
>ea98	25 44 cf 21 43 58 70 cf 2e 40 c3 02 02 8f c0 20
>eaa8	1c 0c c1 85 8e 82 21 4c 69 20 4d 5d c3 02 48 ff
>eab8	cf 21 74 c3 02 48 ff cf 2e 40 c3 02 00 1f c0 22
>eac8	26 0c c1 85 8e 82 21 4c 69 21 4d 5d c3 02 48 ff
>ead8	cf 21 21 5a 46 c3 02 48 ff cf 2e 40 c3 02 00 3f
>eae8	c0 26 30 0c c1 85 8e 82 21 4c 69 22 4d 5d c3 02
>eaf8	48 ff cf 21 21 42 6a 49 69 c3 02 32 ff cf 2e 41
>eb08	6c 79 c3 02 37 3f c0 22 3a 0c c1 85 8e 82 21 4c
>eb18	69 23 4d 5d c3 02 48 ff cf 21 21 40 c3 03 93 91
>eb28	ff cf 2e 40 c3 02 01 9f c0 1d 44 0c c1 85 8e 82
>eb38	21 4c 69 2d 4d 5d c3 02 48 ff cf 21 21 41 cf 2e
>eb48	40 c3 02 00 1f c0 1d 4e 0c c1 85 8e 82 21 4c 69
>eb58	2e 4d 5d c3 02 48 ff cf 21 21 41 cf 2e 40 c3 02
>eb68	00 1f c0 1c 58 0c c1 85 8e 82 21 4c 69 30 4d 5d
>eb78	c3 02 48 ff cf 21 40 cf 2e 40 c3 02 00 1f c0 1c
>eb88	62 0c c1 85 8e 82 21 4c 69 2b 4d 5d c3 02 48 ff
>eb98	cf 21 40 cf 2e 40 c3 02 00 1f c0 1c 6c 0c c1 85
>eba8	8e 82 21 4c 69 2c 4d 5d c3 02 48 ff cf 21 40 cf
>ebb8	2e 40 c3 02 00 1f c0 1d 76 0c c1 85 8e 82 21 4c
>ebc8	69 2f 4d 5d c3 02 48 ff cf 21 21 41 cf 2e 40 c3
>ebd8	02 00 1f c0 18 80 0c c1 85 8e 82 4b 5f 28 46 4e
>ebe8	cf 21 42 4e cf 2e 40 c3 02 00 1f c0 18 8a 0c c1
>ebf8	85 8e 82 4b 5f 29 46 4e cf 21 4f 5f cf 2e 40 c3
>ec08	02 00 2f c0 18 94 0c c1 85 8e 82 4b 5f 2a 46 4e
>ec18	cf 21 4d 51 cf 2e 40 c3 02 00 2f c0 16 9e 0c c1
>ec28	85 8e 82 4b 5f 24 4d cf 21 40 cf 2e 40 c3 02 00
>ec38	1f c0 1b a8 0c c1 85 8e 82 21 4d 70 20 21 4a 68
>ec48	cf 21 21 58 58 cf 2e 40 c3 02 00 3f c0 1b b2 0c
>ec58	c1 85 8e 82 21 4d 70 21 21 4a 68 cf 21 21 43 48
>ec68	cf 2e 40 c3 02 00 1f c0 1d bc 0c c1 85 8e 82 21
>ec78	4d 70 22 21 4a 68 cf 21 42 52 46 40 cf 2e 41 5d
>ec88	60 c3 01 0f c0 1e c6 0c c1 85 8e 82 21 4d 70 23
>ec98	21 4a 68 cf 21 41 c3 03 29 41 ff cf 2e 40 c3 02
>eca8	02 6f c0 1a d0 0c c1 85 8e 82 21 4d 70 2d 21 4a
>ecb8	68 cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1a da 0c
>ecc8	c1 85 8e 82 21 4d 70 2e 21 4a 68 cf 21 21 41 cf
>ecd8	2e 40 c3 02 00 1f c0 19 e4 0c c1 85 8e 82 21 4d
>ece8	70 30 21 4a 68 cf 21 40 cf 2e 40 c3 02 00 1f c0
>ecf8	19 ee 0c c1 85 8e 82 21 4d 70 2b 21 4a 68 cf 21
>ed08	40 cf 2e 40 c3 02 00 1f c0 19 f8 0c c1 85 8e 82
>ed18	21 4d 70 2c 21 4a 68 cf 21 40 cf 2e 40 c3 02 00
>ed28	1f c0 1a 02 0d c1 85 8e 82 21 4d 70 2f 21 4a 68
>ed38	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 18 0c 0d c1
>ed48	85 8e 82 41 48 28 4d 7f cf 21 41 48 cf 2e 40 c3
>ed58	02 00 1f c0 18 16 0d c1 85 8e 82 41 48 29 4d 7f
>ed68	cf 21 4d 7f cf 2e 40 c3 02 00 2f c0 18 20 0d c1
>ed78	85 8e 82 41 48 2a 4d 7f cf 21 4c 77 cf 2e 40 c3
>ed88	02 00 2f c0 16 2a 0d c1 85 8e 82 41 48 24 46 cf
>ed98	21 41 cf 2e 40 c3 02 00 1f c0 18 34 0d c1 85 8e
>eda8	82 41 48 25 46 cf 21 41 48 40 cf 2e 40 c3 02 00
>edb8	9f c0 27 3e 0d c1 85 8e 82 21 47 7c c3 02 79 ff
>edc8	20 21 45 6b c3 02 46 ff cf 21 21 4d 68 c3 02 25
>edd8	ff cf 2e 40 c3 02 00 2f c0 27 48 0d c1 85 8e 82
>ede8	21 47 7c c3 02 79 ff 21 21 45 6b c3 02 46 ff cf
>edf8	21 21 42 51 c3 02 33 ff cf 2e 40 c3 02 00 1f c0
>ee08	29 52 0d c1 85 8e 82 21 47 7c c3 02 79 ff 22 21
>ee18	45 6b c3 02 46 ff cf 21 6d 49 5c c3 03 81 34 ff
>ee28	cf 2e 5c 79 c3 02 24 8f c0 26 5c 0d c1 85 8e 82
>ee38	21 47 7c c3 02 79 ff 23 21 45 6b c3 02 46 ff cf
>ee48	21 41 c3 03 39 99 ff cf 2e 40 c3 02 02 8f c0 21
>ee58	66 0d c1 85 8e 82 21 45 6b c3 02 46 ff 2d 21 45
>ee68	6b c3 02 46 ff cf 21 40 cf 2e 40 c3 02 00 1f c0
>ee78	22 70 0d c1 85 8e 82 21 45 6b c3 02 46 ff 2e 21
>ee88	45 6b c3 02 46 ff cf 21 21 41 cf 2e 40 c3 02 00
>ee98	1f c0 22 7a 0d c1 85 8e 82 21 45 6b c3 02 46 ff
>eea8	30 21 45 6b c3 02 46 ff cf 21 21 41 cf 2e 40 c3
>eeb8	02 00 1f c0 21 84 0d c1 85 8e 82 21 45 6b c3 02
>eec8	46 ff 2b 21 45 6b c3 02 46 ff cf 21 40 cf 2e 40
>eed8	c3 02 00 1f c0 22 8e 0d c1 85 8e 82 21 45 6b c3
>eee8	02 46 ff 2c 21 45 6b c3 02 46 ff cf 21 21 41 cf
>eef8	2e 40 c3 02 00 1f c0 21 98 0d c1 85 8e 82 21 45
>ef08	6b c3 02 46 ff 2f 21 45 6b c3 02 46 ff cf 21 40
>ef18	cf 2e 40 c3 02 00 1f c0 18 a2 0d c1 85 8e 82 45
>ef28	60 28 4e 75 cf 21 44 60 cf 2e 40 c3 02 00 1f c0
>ef38	18 ac 0d c1 85 8e 82 45 60 29 4e 75 cf 21 4f 75
>ef48	cf 2e 40 c3 02 00 2f c0 18 b6 0d c1 85 8e 82 45
>ef58	60 2a 4e 75 cf 21 4b 55 cf 2e 40 c3 02 00 1f c0
>ef68	16 c0 0d c1 85 8e 82 45 60 24 48 cf 21 41 cf 2e
>ef78	40 c3 02 00 1f c0 18 ca 0d c1 85 8e 82 45 60 25
>ef88	48 cf 21 56 40 40 cf 2e 40 c3 02 18 ff c0 1b d4
>ef98	0d c1 85 8e 82 21 4d 55 20 21 44 6c cf 21 21 52
>efa8	41 cf 2e 40 c3 02 00 2f c0 1b de 0d c1 85 8e 82
>efb8	21 4d 55 21 21 44 6c cf 21 21 48 69 cf 2e 40 c3
>efc8	02 00 1f c0 1b e8 0d c1 85 8e 82 21 4d 55 22 21
>efd8	44 6c cf 21 7e 5e 5c cf 2e 67 7f c3 01 0f c0 1e
>efe8	f2 0d c1 85 8e 82 21 4d 55 23 21 44 6c cf 21 42
>eff8	c3 03 84 33 ff cf 2e 40 c3 02 05 7f c0 1a fc 0d
>f008	c1 85 8e 82 21 4d 55 2d 21 44 6c cf 21 21 41 cf
>f018	2e 40 c3 02 00 1f c0 1a 06 0e c1 85 8e 82 21 4d
>f028	55 2e 21 44 6c cf 21 21 41 cf 2e 40 c3 02 00 1f
>f038	c0 19 10 0e c1 85 8e 82 21 4d 55 30 21 44 6c cf
>f048	21 40 cf 2e 40 c3 02 00 1f c0 19 1a 0e c1 85 8e
>f058	82 21 4d 55 2b 21 44 6c cf 21 40 cf 2e 40 c3 02
>f068	00 1f c0 19 24 0e c1 85 8e 82 21 4d 55 2c 21 44
>f078	6c cf 21 40 cf 2e 40 c3 02 00 1f c0 1a 2e 0e c1
>f088	85 8e 82 21 4d 55 2f 21 44 6c cf 21 21 41 cf 2e
>f098	40 c3 02 00 1f c0 18 38 0e c1 85 8e 82 48 4f 28
>f0a8	48 72 cf 21 48 42 cf 2e 40 c3 02 00 1f c0 18 42
>f0b8	0e c1 85 8e 82 48 4f 29 48 72 cf 21 48 7f cf 2e
>f0c8	40 c3 02 00 1f c0 17 4c 0e c1 85 8e 82 48 4f 2a
>f0d8	48 72 cf 21 7d cf 2e 40 c3 02 00 1f c0 16 56 0e
>f0e8	c1 85 8e 82 48 4f 24 44 cf 21 60 cf 2e 40 c3 02
>f0f8	00 1f c0 18 60 0e c1 85 8e 82 48 4f 25 44 cf 21
>f108	42 43 70 cf 2e 40 c3 02 01 7f c0 20 6a 0e c1 85
>f118	8e 82 21 4e 5f c3 01 5f 20 4b 44 cf 21 21 43 5b
>f128	c3 01 5f cf 2e 40 c3 02 00 1f c0 20 74 0e c1 85
>f138	8e 82 21 4e 5f c3 01 5f 21 4b 44 cf 21 21 59 63
>f148	c3 01 5f cf 2e 40 c3 02 00 3f c0 23 7e 0e c1 85
>f158	8e 82 21 4e 5f c3 01 5f 22 4b 44 cf 21 21 42 60
>f168	54 5e c3 01 0f cf 2e 41 66 66 c3 01 7f c0 20 88
>f178	0e c1 85 8e 82 21 4e 5f c3 01 5f 23 4b 44 cf 21
>f188	21 41 c3 02 31 ff cf 2e 40 c3 02 02 6f c0 1c 92
>f198	0e c1 85 8e 82 21 4e 5f c3 01 5f 2d 4b 44 cf 21
>f1a8	21 41 cf 2e 40 c3 02 00 1f c0 1c 9c 0e c1 85 8e
>f1b8	82 21 4e 5f c3 01 5f 2e 4b 44 cf 21 21 41 cf 2e
>f1c8	40 c3 02 00 1f c0 1b a6 0e c1 85 8e 82 21 4e 5f
>f1d8	c3 01 5f 30 4b 44 cf 21 40 cf 2e 40 c3 02 00 1f
>f1e8	c0 1b b0 0e c1 85 8e 82 21 4e 5f c3 01 5f 2b 4b
>f1f8	44 cf 21 40 cf 2e 40 c3 02 00 1f c0 1b ba 0e c1
>f208	85 8e 82 21 4e 5f c3 01 5f 2c 4b 44 cf 21 40 cf
>f218	2e 40 c3 02 00 1f c0 1c c4 0e c1 85 8e 82 21 4e
>f228	5f c3 01 5f 2f 4b 44 cf 21 21 41 cf 2e 40 c3 02
>f238	00 1f c0 18 ce 0e c1 85 8e 82 4e 6b 28 4c 53 cf
>f248	21 4c 43 cf 2e 40 c3 02 00 2f c0 18 d8 0e c1 85
>f258	8e 82 4e 6b 29 4c 53 cf 21 4e 7b cf 2e 40 c3 02
>f268	00 2f c0 18 e2 0e c1 85 8e 82 4e 6b 2a 4c 53 cf
>f278	21 42 78 cf 2e 40 c3 02 00 1f c0 16 ec 0e c1 85
>f288	8e 82 4e 6b 24 48 cf 21 43 cf 2e 40 c3 02 00 1f
>f298	c0 18 f6 0e c1 85 8e 82 4e 6b 25 48 cf 21 7a 6c
>f2a8	40 cf 2e 40 c3 02 48 1f c0 24 00 0f c1 85 8e 82
>f2b8	43 4c c3 02 49 ff 20 4a 70 c3 02 06 ff cf 21 4d
>f2c8	7c c3 02 55 ff cf 2e 40 c3 02 00 2f c0 25 0a 0f
>f2d8	c1 85 8e 82 43 4c c3 02 49 ff 21 4a 70 c3 02 06
>f2e8	ff cf 21 21 47 63 c3 02 57 ff cf 2e 40 c3 02 00
>f2f8	1f c0 27 14 0f c1 85 8e 82 43 4c c3 02 49 ff 22
>f308	4a 70 c3 02 06 ff cf 21 62 56 5d c3 03 38 94 ff
>f318	cf 2e 55 7f c3 02 01 4f c0 24 1e 0f c1 85 8e 82
>f328	43 4c c3 02 49 ff 23 4a 70 c3 02 06 ff cf 21 40
>f338	c3 03 29 72 ff cf 2e 40 c3 02 00 6f c0 20 28 0f
>f348	c1 85 8e 82 43 4c c3 02 49 ff 2d 4a 70 c3 02 06
>f358	ff cf 21 21 41 cf 2e 40 c3 02 00 1f c0 20 32 0f
>f368	c1 85 8e 82 43 4c c3 02 49 ff 2e 4a 70 c3 02 06
>f378	ff cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1f 3c 0f
>f388	c1 85 8e 82 43 4c c3 02 49 ff 30 4a 70 c3 02 06
>f398	ff cf 21 40 cf 2e 40 c3 02 00 1f c0 1f 46 0f c1
>f3a8	85 8e 82 43 4c c3 02 49 ff 2b 4a 70 c3 02 06 ff
>f3b8	cf 21 40 cf 2e 40 c3 02 00 1f c0 1f 50 0f c1 85
>f3c8	8e 82 43 4c c3 02 49 ff 2c 4a 70 c3 02 06 ff cf
>f3d8	21 40 cf 2e 40 c3 02 00 1f c0 20 5a 0f c1 85 8e
>f3e8	82 43 4c c3 02 49 ff 2f 4a 70 c3 02 06 ff cf 21
>f3f8	21 41 cf 2e 40 c3 02 00 1f c0 18 64 0f c1 85 8e
>f408	82 47 7f 28 46 66 cf 21 46 66 cf 2e 40 c3 02 00
>f418	1f c0 18 6e 0f c1 85 8e 82 47 7f 29 46 66 cf 21
>f428	47 7f cf 2e 40 c3 02 00 1f c0 18 78 0f c1 85 8e
>f438	82 47 7f 2a 46 66 cf 21 41 59 cf 2e 40 c3 02 00
>f448	1f c0 16 82 0f c1 85 8e 82 47 7f 24 48 cf 21 41
>f458	cf 2e 40 c3 02 00 1f c0 18 8c 0f c1 85 8e 82 47
>f468	7f 25 48 cf 21 5f 7c 40 cf 2e 40 c3 02 26 2f c0
>f478	20 96 0f c1 85 8e 82 42 66 20 45 6e c3 02 78 ff
>f488	cf 21 48 54 c3 02 78 ff cf 2e 40 c3 02 00 1f c0
>f498	21 a0 0f c1 85 8e 82 42 66 21 45 6e c3 02 78 ff
>f4a8	cf 21 21 43 48 c3 02 78 ff cf 2e 40 c3 02 00 1f
>f4b8	c0 22 aa 0f c1 85 8e 82 42 66 22 45 6e c3 02 78
>f4c8	ff cf 21 4e 77 55 c3 02 48 ff cf 2e 49 60 c3 02
>f4d8	85 5f c0 20 b4 0f c1 85 8e 82 42 66 23 45 6e c3
>f4e8	02 78 ff cf 21 40 c3 03 45 26 ff cf 2e 40 c3 02
>f4f8	00 9f c0 1f be 0f c1 85 8e 82 45 6e c3 02 78 ff
>f508	2d 45 6e c3 02 78 ff cf 21 40 cf 2e 40 c3 02 00
>f518	1f c0 20 c8 0f c1 85 8e 82 45 6e c3 02 78 ff 2e
>f528	45 6e c3 02 78 ff cf 21 21 41 cf 2e 40 c3 02 00
>f538	1f c0 20 d2 0f c1 85 8e 82 45 6e c3 02 78 ff 30
>f548	45 6e c3 02 78 ff cf 21 21 41 cf 2e 40 c3 02 00
>f558	1f c0 1f dc 0f c1 85 8e 82 45 6e c3 02 78 ff 2b
>f568	45 6e c3 02 78 ff cf 21 40 cf 2e 40 c3 02 00 1f
>f578	c0 20 e6 0f c1 85 8e 82 45 6e c3 02 78 ff 2c 45
>f588	6e c3 02 78 ff cf 21 21 41 cf 2e 40 c3 02 00 1f
>f598	c0 1f f0 0f c1 85 8e 82 45 6e c3 02 78 ff 2f 45
>f5a8	6e c3 02 78 ff cf 21 40 cf 2e 40 c3 02 00 1f c0
>f5b8	17 fa 0f c1 85 8e 82 4a 44 28 41 6d cf 21 44 cf
>f5c8	2e 40 c3 02 00 1f c0 18 04 10 c1 85 8e 82 4a 44
>f5d8	29 41 6d cf 21 4b 6d cf 2e 40 c3 02 00 1f c0 18
>f5e8	0e 10 c1 85 8e 82 4a 44 2a 41 6d cf 21 4b 69 cf
>f5f8	2e 40 c3 02 00 1f c0 17 18 10 c1 85 8e 82 4a 44
>f608	24 43 cf 21 41 50 cf 2e 40 c3 02 00 1f c0 18 22
>f618	10 c1 85 8e 82 4a 44 25 43 cf 21 41 50 60 cf 2e
>f628	40 c3 02 01 ff c0 22 2c 10 c1 85 8e 82 44 46 c3
>f638	02 53 ff 20 21 47 68 cf 21 21 43 61 c3 02 47 ff
>f648	cf 2e 40 c3 02 00 1f c0 21 36 10 c1 85 8e 82 44
>f658	46 c3 02 53 ff 21 21 47 68 cf 21 4b 6e c3 02 53
>f668	ff cf 2e 40 c3 02 00 2f c0 24 40 10 c1 85 8e 82
>f678	44 46 c3 02 53 ff 22 21 47 68 cf 21 21 5f 51 72
>f688	c3 02 64 ff cf 2e 54 41 c3 02 14 6f c0 21 4a 10
>f698	c1 85 8e 82 44 46 c3 02 53 ff 23 21 47 68 cf 21
>f6a8	21 40 c3 02 53 8f cf 2e 40 c3 02 01 1f c0 1c 54
>f6b8	10 c1 85 8e 82 44 46 c3 02 53 ff 2d 21 47 68 cf
>f6c8	21 40 cf 2e 40 c3 02 00 1f c0 1c 5e 10 c1 85 8e
>f6d8	82 44 46 c3 02 53 ff 2e 21 47 68 cf 21 40 cf 2e
>f6e8	40 c3 02 00 1f c0 1c 68 10 c1 85 8e 82 44 46 c3
>f6f8	02 53 ff 30 21 47 68 cf 21 40 cf 2e 40 c3 02 00
>f708	1f c0 1d 72 10 c1 85 8e 82 44 46 c3 02 53 ff 2b
>f718	21 47 68 cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1d
>f728	7c 10 c1 85 8e 82 44 46 c3 02 53 ff 2c 21 47 68
>f738	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1d 86 10 c1
>f748	85 8e 82 44 46 c3 02 53 ff 2f 21 47 68 cf 21 21
>f758	41 cf 2e 40 c3 02 00 1f c0 17 90 10 c1 85 8e 82
>f768	46 79 28 49 52 cf 21 50 cf 2e 40 c3 02 00 1f c0
>f778	18 9a 10 c1 85 8e 82 46 79 29 49 52 cf 21 4f 7b
>f788	cf 2e 40 c3 02 00 2f c0 18 a4 10 c1 85 8e 82 46
>f798	79 2a 49 52 cf 21 4f 6b cf 2e 40 c3 02 00 2f c0
>f7a8	17 ae 10 c1 85 8e 82 46 79 24 40 cf 21 46 79 cf
>f7b8	2e 40 c3 02 00 1f c0 17 b8 10 c1 85 8e 82 46 79
>f7c8	25 40 cf 21 46 79 cf 2e 40 c3 02 00 1f c0 19 c2
>f7d8	10 c1 85 8e 82 48 58 20 21 42 47 cf 21 46 51 cf
>f7e8	2e 40 c3 02 00 1f c0 19 cc 10 c1 85 8e 82 48 58
>f7f8	21 21 42 47 cf 21 4a 5f cf 2e 40 c3 02 00 1f c0
>f808	1b d6 10 c1 85 8e 82 48 58 22 21 42 47 cf 21 21
>f818	51 6a 68 cf 2e 4b 53 c3 01 6f c0 1e e0 10 c1 85
>f828	8e 82 48 58 23 21 42 47 cf 21 21 43 c3 03 97 04
>f838	ff cf 2e 40 c3 02 07 9f c0 18 ea 10 c1 85 8e 82
>f848	48 58 2d 21 42 47 cf 21 40 cf 2e 40 c3 02 00 1f
>f858	c0 18 f4 10 c1 85 8e 82 48 58 2e 21 42 47 cf 21
>f868	40 cf 2e 40 c3 02 00 1f c0 18 fe 10 c1 85 8e 82
>f878	48 58 30 21 42 47 cf 21 40 cf 2e 40 c3 02 00 1f
>f888	c0 19 08 11 c1 85 8e 82 48 58 2b 21 42 47 cf 21
>f898	21 41 cf 2e 40 c3 02 00 1f c0 19 12 11 c1 85 8e
>f8a8	82 48 58 2c 21 42 47 cf 21 21 41 cf 2e 40 c3 02
>f8b8	00 1f c0 19 1c 11 c1 85 8e 82 48 58 2f 21 42 47
>f8c8	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 18 26 11 c1
>f8d8	85 8e 82 4f 5c 28 42 6b cf 21 42 48 cf 2e 40 c3
>f8e8	02 00 1f c0 18 30 11 c1 85 8e 82 4f 5c 29 42 6b
>f8f8	cf 21 4f 7f cf 2e 40 c3 02 00 2f c0 18 3a 11 c1
>f908	85 8e 82 4f 5c 2a 42 6b cf 21 4d 77 cf 2e 40 c3
>f918	02 00 2f c0 17 44 11 c1 85 8e 82 4f 5c 24 43 cf
>f928	21 41 7b cf 2e 40 c3 02 00 1f c0 18 4e 11 c1 85
>f938	8e 82 4f 5c 25 43 cf 21 41 7b 60 cf 2e 40 c3 02
>f948	01 6f c0 21 58 11 c1 85 8e 82 21 44 7c c3 02 58
>f958	ff 20 4d 5b cf 21 48 5e c3 02 42 ff cf 2e 40 c3
>f968	02 00 1f c0 22 62 11 c1 85 8e 82 21 44 7c c3 02
>f978	58 ff 21 4d 5b cf 21 21 52 57 c3 02 58 ff cf 2e
>f988	40 c3 02 00 2f c0 25 6c 11 c1 85 8e 82 21 44 7c
>f998	c3 02 58 ff 22 4d 5b cf 21 21 41 42 59 46 c3 02
>f9a8	22 ff cf 2e 6a 5f c3 02 42 2f c0 22 76 11 c1 85
>f9b8	8e 82 21 44 7c c3 02 58 ff 23 4d 5b cf 21 21 40
>f9c8	c3 03 36 85 ff cf 2e 40 c3 02 00 7f c0 1d 80 11
>f9d8	c1 85 8e 82 21 44 7c c3 02 58 ff 2d 4d 5b cf 21
>f9e8	21 41 cf 2e 40 c3 02 00 1f c0 1d 8a 11 c1 85 8e
>f9f8	82 21 44 7c c3 02 58 ff 2e 4d 5b cf 21 21 41 cf
>fa08	2e 40 c3 02 00 1f c0 1c 94 11 c1 85 8e 82 21 44
>fa18	7c c3 02 58 ff 30 4d 5b cf 21 40 cf 2e 40 c3 02
>fa28	00 1f c0 1c 9e 11 c1 85 8e 82 21 44 7c c3 02 58
>fa38	ff 2b 4d 5b cf 21 40 cf 2e 40 c3 02 00 1f c0 1c
>fa48	a8 11 c1 85 8e 82 21 44 7c c3 02 58 ff 2c 4d 5b
>fa58	cf 21 40 cf 2e 40 c3 02 00 1f c0 1d b2 11 c1 85
>fa68	8e 82 21 44 7c c3 02 58 ff 2f 4d 5b cf 21 21 41
>fa78	cf 2e 40 c3 02 00 1f c0 18 bc 11 c1 85 8e 82 47
>fa88	50 28 41 6c cf 21 41 40 cf 2e 40 c3 02 00 1f c0
>fa98	18 c6 11 c1 85 8e 82 47 50 29 41 6c cf 21 47 7c
>faa8	cf 2e 40 c3 02 00 1f c0 18 d0 11 c1 85 8e 82 47
>fab8	50 2a 41 6c cf 21 46 7c cf 2e 40 c3 02 00 1f c0
>fac8	16 da 11 c1 85 8e 82 47 50 24 49 cf 21 40 cf 2e
>fad8	40 c3 02 00 1f c0 18 e4 11 c1 85 8e 82 47 50 25
>fae8	49 cf 21 7a 40 40 cf 2e 40 c3 02 47 5f c0 08 ee
>faf8	11 c9 4f 7f 7f c0 00

;******  End of listing
