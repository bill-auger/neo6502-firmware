
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -q -b --mr65c02 -Wall -L build/basic.lst -o build/basic.bin basic.asm
; Sun Dec  3 11:36:46 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

.c000	4c 03 c0	jmp $c003	boot:	jmp 	ColdStart
.c003					ColdStart:
.c003	4c 55 c4	jmp $c455			jmp 	Command_RUN

;******  Processing file: _include.inc


;******  Processing file: sources/00data/00data_config.inc


;******  Return to file: _include.inc


;******  Processing file: sources/00data/01data.inc

=65280					ControlCommand = ControlPort+0
=65281					ControlFunction = ControlPort+1
=65282					ControlError = ControlPort+2
=65283					ControlStatus = ControlPort+3
=8					StackSize = 8
=$c0					XS_TYPEMASK = $C0
=$80					XS_TYPEBIT = $80
=$80					XS_STRING = $80
=$20					XS_ISREFERENCE = $20
=$10					XS_ISBYTEREFERENCE = $10
.0010					XSStack:
.0010					XSControl:
>0010							.fill 	StackSize
.0018					XSNumber0:
>0018							.fill 	StackSize
.0020					XSNumber1:
>0020							.fill 	StackSize
.0028					XSNumber2:
>0028							.fill 	StackSize
.0030					XSNumber3:
>0030							.fill 	StackSize
.0038					zTemp0:
>0038							.fill 	2
.003a					CodePtr:
>003a							.fill 	2
.0200					ERRLine:
>0200							.fill 	2

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/binary.inc


;******  Return to file: _include.inc


;******  Processing file: sources/generated/errors.inc


;******  Return to file: _include.inc


;******  Processing file: sources/generated/kwdconst.inc

=$20					KWD_PLUS                           = $20 ; +
=$21					KWD_MINUS                          = $21 ; -
=$22					KWD_ASTERISK                       = $22 ; *
=$23					KWD_SLASH                          = $23 ; /
=$24					KWD_GREATERGREATER                 = $24 ; >>
=$25					KWD_LESSLESS                       = $25 ; <<
=$26					KWD_PERCENT                        = $26 ; %
=$27					KWD_BACKSLASH                      = $27 ; \
=$28					KWD_AMPERSAND                      = $28 ; &
=$29					KWD_VBAR                           = $29 ; |
=$2a					KWD_HAT                            = $2a ; ^
=$2b					KWD_GREATER                        = $2b ; >
=$2c					KWD_GREATEREQUAL                   = $2c ; >=
=$2d					KWD_LESS                           = $2d ; <
=$2e					KWD_LESSEQUAL                      = $2e ; <=
=$2f					KWD_LESSGREATER                    = $2f ; <>
=$30					KWD_EQUAL                          = $30 ; =
=$31					KWD_PLING                          = $31 ; !
=$32					KWD_QMARK                          = $32 ; ?
=$80					KWD_SYS_STR                        = $80 ; !!str
=$81					KWD_DOLLAR                         = $81 ; $
=$82					KWD_LPAREN                         = $82 ; (
=$83					KWD_RANDLPAREN                     = $83 ; rand(
=$84					KWD_RNDLPAREN                      = $84 ; rnd(
=$85					KWD_ISVALLPAREN                    = $85 ; isval(
=$86					KWD_INTLPAREN                      = $86 ; int(
=$87					KWD_TIME                           = $87 ; time
=$88					KWD_EVENTLPAREN                    = $88 ; event(
=$89					KWD_INKEYDOLLARLPAREN              = $89 ; inkey$(
=$8a					KWD_ASCLPAREN                      = $8a ; asc(
=$8b					KWD_CHRDOLLARLPAREN                = $8b ; chr$(
=$8c					KWD_SQRLPAREN                      = $8c ; sqr(
=$8d					KWD_LENLPAREN                      = $8d ; len(
=$8e					KWD_ABSLPAREN                      = $8e ; abs(
=$8f					KWD_SGNLPAREN                      = $8f ; sgn(
=$90					KWD_VALLPAREN                      = $90 ; val(
=$91					KWD_STRDOLLARLPAREN                = $91 ; str$(
=$92					KWD_MIDDOLLARLPAREN                = $92 ; mid$(
=$93					KWD_LEFTDOLLARLPAREN               = $93 ; left$(
=$94					KWD_RIGHTDOLLARLPAREN              = $94 ; right$(
=$95					KWD_SINLPAREN                      = $95 ; sin(
=$96					KWD_COSLPAREN                      = $96 ; cos(
=$97					KWD_TANLPAREN                      = $97 ; tan(
=$98					KWD_ATANLPAREN                     = $98 ; atan(
=$99					KWD_LOGLPAREN                      = $99 ; log(
=$9a					KWD_EXPLPAREN                      = $9a ; exp(
=$9b					KWD_KEYLPAREN                      = $9b ; key(
=$b0					KWD_WHILE                          = $b0 ; while
=$b1					KWD_WEND                           = $b1 ; wend
=$b2					KWD_IF                             = $b2 ; if
=$b3					KWD_ENDIF                          = $b3 ; endif
=$b4					KWD_DO                             = $b4 ; do
=$b5					KWD_LOOP                           = $b5 ; loop
=$b6					KWD_REPEAT                         = $b6 ; repeat
=$b7					KWD_UNTIL                          = $b7 ; until
=$b8					KWD_PROC                           = $b8 ; proc
=$b9					KWD_ENDPROC                        = $b9 ; endproc
=$ba					KWD_FOR                            = $ba ; for
=$bb					KWD_NEXT                           = $bb ; next
=$bc					KWD_CASE                           = $bc ; case
=$bd					KWD_ENDCASE                        = $bd ; endcase
=$be					KWD_SYS_UN1                        = $be ; !!un1
=$bf					KWD_THEN                           = $bf ; then
=$c0					KWD_SYS_END                        = $c0 ; !!end
=$c1					KWD_SYS_SH1                        = $c1 ; !!sh1
=$c2					KWD_SYS_SH2                        = $c2 ; !!sh2
=$c3					KWD_SYS_DEC                        = $c3 ; !!dec
=$c4					KWD_TO                             = $c4 ; to
=$c5					KWD_LET                            = $c5 ; let
=$c6					KWD_PRINT                          = $c6 ; print
=$c7					KWD_INPUT                          = $c7 ; input
=$c8					KWD_CALL                           = $c8 ; call
=$c9					KWD_SYS                            = $c9 ; sys
=$ca					KWD_EXIT                           = $ca ; exit
=$cb					KWD_COMMA                          = $cb ; ,
=$cc					KWD_SEMICOLON                      = $cc ; ;
=$cd					KWD_COLON                          = $cd ; :
=$ce					KWD_SQUOTE                         = $ce ; '
=$cf					KWD_RPAREN                         = $cf ; )
=$d0					KWD_READ                           = $d0 ; read
=$d1					KWD_DATA                           = $d1 ; data
=$d2					KWD_LSQ                            = $d2 ; [
=$d3					KWD_RSQ                            = $d3 ; ]
=$d4					KWD_HASH                           = $d4 ; #
=$d5					KWD_PERIOD                         = $d5 ; .
=$d6					KWD_ELSE                           = $d6 ; else
=$d7					KWD_WHEN                           = $d7 ; when
=$d8					KWD_DOWNTO                         = $d8 ; downto
=$180					KWD_CLEAR                          = $180 ; clear
=$181					KWD_NEW                            = $181 ; new
=$182					KWD_RUN                            = $182 ; run
=$183					KWD_STOP                           = $183 ; stop
=$184					KWD_END                            = $184 ; end
=$185					KWD_ASSERT                         = $185 ; assert
=$186					KWD_LIST                           = $186 ; list
=$187					KWD_SAVE                           = $187 ; save
=$188					KWD_LOAD                           = $188 ; load
=$189					KWD_GOSUB                          = $189 ; gosub
=$18a					KWD_GOTO                           = $18a ; goto
=$18b					KWD_RETURN                         = $18b ; return
=$18c					KWD_RESTORE                        = $18c ; restore
=$18d					KWD_DIM                            = $18d ; dim

;******  Return to file: _include.inc


;******  Processing file: sources/generated/neo6502.inc

=$ff00					ControlPort = $ff00
=$ffee					ReadCharacter = $ffee
=$fff1					WriteCharacter = $fff1
=$fff4					WaitMessage = $fff4
=$fff7					SendMessage = $fff7

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/compare.asm

.c006					CMPReturnTrue:
.c006	a9 ff		lda #$ff			lda 	#$FF
.c008	80 02		bra $c00c			bra 	CMPSetTOS
.c00a					CMPReturnFalse:
.c00a	a2 00		ldx #$00			ldx 	#0
.c00c					CMPSetTOS:
.c00c	95 30		sta $30,x			sta 	XSNumber3,x
.c00e	95 28		sta $28,x			sta 	XSNumber2,x
.c010	95 20		sta $20,x			sta 	XSNumber1,x
.c012	95 18		sta $18,x			sta 	XSNumber0,x
.c014	74 10		stz $10,x			stz 	XSControl,x
.c016	4c b5 c1	jmp $c1b5			jmp 	EXPRMainLoop
.c019					CMPCompareEqual:
.c019	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c01c	c9 00		cmp #$00			cmp 	#0
.c01e	f0 e6		beq $c006			beq 	CMPReturnTrue
.c020	80 e8		bra $c00a			bra 	CMPReturnFalse
.c022					CMPCompareLess:
.c022	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c025	c9 ff		cmp #$ff			cmp 	#$FF
.c027	f0 dd		beq $c006			beq 	CMPReturnTrue
.c029	80 df		bra $c00a			bra 	CMPReturnFalse
.c02b					CMPCompareGreater:
.c02b	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c02e	c9 01		cmp #$01			cmp 	#1
.c030	f0 d4		beq $c006			beq 	CMPReturnTrue
.c032	80 d6		bra $c00a			bra 	CMPReturnFalse
.c034					CMPCompareNotEqual:
.c034	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c037	c9 00		cmp #$00			cmp 	#0
.c039	d0 cb		bne $c006			bne 	CMPReturnTrue
.c03b	80 cd		bra $c00a			bra 	CMPReturnFalse
.c03d					CMPCompareLessEqual:
.c03d	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c040	c9 01		cmp #$01			cmp 	#1
.c042	d0 c2		bne $c006			bne 	CMPReturnTrue
.c044	80 c4		bra $c00a			bra 	CMPReturnFalse
.c046					CMPCompareGreaterEqual:
.c046	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c049	c9 ff		cmp #$ff			cmp 	#$FF
.c04b	d0 b9		bne $c006			bne 	CMPReturnTrue
.c04d	80 bb		bra $c00a			bra 	CMPReturnFalse
.c04f					CMPCompareBaseCode:
>c04f	03						.byte 	3
.c050	20 40 c1	jsr $c140			jsr 	DereferenceCheckTypes 		; dereference, check types match.
.c053	30 0b		bmi $c060			bmi 	_CMPTypeError
.c055	70 0e		bvs $c065			bvs 	_CMPString 					; string ?
.c057	a9 06		lda #$06			lda 	#6 							; use coprocessor to compare
.c059	20 28 c3	jsr $c328			jsr 	DOMathCommand
.c05c	ad 03 ff	lda $ff03			lda 	ControlStatus 				; get result.
.c05f	60		rts				rts
.c060					_CMPTypeError:
.c060	a9 02		lda #$02		lda	#2
.c062	4c 39 c8	jmp $c839		jmp	ErrorHandler
.c065					_CMPString:
>c065	03						.byte 	3

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/mathint.asm

.c066					BinaryAnd:
.c066	20 40 c1	jsr $c140			jsr 	DereferenceCheckTypes
.c069	20 32 c1	jsr $c132			jsr 	MICheckBothInteger
.c06c	b5 18		lda $18,x			lda 	XSNumber0,x
.c06e	35 19		and $19,x			and 		XSNumber0+1,x
.c070	95 18		sta $18,x			sta 	XSNumber0,x
.c072	b5 20		lda $20,x			lda 	XSNumber1,x
.c074	35 21		and $21,x			and 		XSNumber1+1,x
.c076	95 20		sta $20,x			sta 	XSNumber1,x
.c078	b5 28		lda $28,x			lda 	XSNumber2,x
.c07a	35 29		and $29,x			and 		XSNumber2+1,x
.c07c	95 28		sta $28,x			sta 	XSNumber2,x
.c07e	b5 30		lda $30,x			lda 	XSNumber3,x
.c080	35 31		and $31,x			and 		XSNumber3+1,x
.c082	95 30		sta $30,x			sta 	XSNumber3,x
.c084	4c b5 c1	jmp $c1b5			jmp 	EXPRMainLoop
.c087					BinaryXor:
.c087	20 40 c1	jsr $c140			jsr 	DereferenceCheckTypes
.c08a	20 32 c1	jsr $c132			jsr 	MICheckBothInteger
.c08d	b5 18		lda $18,x			lda 	XSNumber0,x
.c08f	55 19		eor $19,x			eor 		XSNumber0+1,x
.c091	95 18		sta $18,x			sta 	XSNumber0,x
.c093	b5 20		lda $20,x			lda 	XSNumber1,x
.c095	55 21		eor $21,x			eor 		XSNumber1+1,x
.c097	95 20		sta $20,x			sta 	XSNumber1,x
.c099	b5 28		lda $28,x			lda 	XSNumber2,x
.c09b	55 29		eor $29,x			eor 		XSNumber2+1,x
.c09d	95 28		sta $28,x			sta 	XSNumber2,x
.c09f	b5 30		lda $30,x			lda 	XSNumber3,x
.c0a1	55 31		eor $31,x			eor 		XSNumber3+1,x
.c0a3	95 30		sta $30,x			sta 	XSNumber3,x
.c0a5	4c b5 c1	jmp $c1b5			jmp 	EXPRMainLoop
.c0a8					BinaryOr:
.c0a8	20 40 c1	jsr $c140			jsr 	DereferenceCheckTypes
.c0ab	20 32 c1	jsr $c132			jsr 	MICheckBothInteger
.c0ae	b5 18		lda $18,x			lda 	XSNumber0,x
.c0b0	15 19		ora $19,x			ora 		XSNumber0+1,x
.c0b2	95 18		sta $18,x			sta 	XSNumber0,x
.c0b4	b5 20		lda $20,x			lda 	XSNumber1,x
.c0b6	15 21		ora $21,x			ora 		XSNumber1+1,x
.c0b8	95 20		sta $20,x			sta 	XSNumber1,x
.c0ba	b5 28		lda $28,x			lda 	XSNumber2,x
.c0bc	15 29		ora $29,x			ora 		XSNumber2+1,x
.c0be	95 28		sta $28,x			sta 	XSNumber2,x
.c0c0	b5 30		lda $30,x			lda 	XSNumber3,x
.c0c2	15 31		ora $31,x			ora 		XSNumber3+1,x
.c0c4	95 30		sta $30,x			sta 	XSNumber3,x
.c0c6	4c b5 c1	jmp $c1b5			jmp 	EXPRMainLoop
.c0c9					BinaryShiftLeft:
.c0c9	38		sec				sec
.c0ca	80 01		bra $c0cd			bra 	BinaryShift
.c0cc					BinaryShiftRight:
.c0cc	18		clc				clc
.c0cd					BinaryShift:
.c0cd	08		php				php									; save direction, CS left CC right.
.c0ce	20 40 c1	jsr $c140			jsr 	DereferenceCheckTypes
.c0d1	20 32 c1	jsr $c132			jsr 	MICheckBothInteger
.c0d4	b5 19		lda $19,x			lda 	XSNumber0+1,x 				; if shift >=32 will be zero
.c0d6	29 e0		and #$e0			and 	#$E0
.c0d8	15 21		ora $21,x			ora 	XSNumber1+1,x
.c0da	15 22		ora $22,x			ora 	XSNumber1+2,x
.c0dc	15 23		ora $23,x			ora 	XSNumber1+3,x
.c0de	d0 20		bne $c100			bne 	_BSIsZero
.c0e0	b5 19		lda $19,x			lda 	XSNumber0+1,x 				; check zero at start
.c0e2	f0 24		beq $c108			beq 	_BSExit
.c0e4					_BSLoop:
.c0e4	28		plp				plp 								; access diection
.c0e5	08		php				php
.c0e6	b0 0a		bcs $c0f2			bcs 	_BSLeft
.c0e8	56 30		lsr $30,x			lsr 	XSNumber3,x 				; shift right
.c0ea	76 28		ror $28,x			ror 	XSNumber2,x
.c0ec	76 20		ror $20,x			ror 	XSNumber1,x
.c0ee	76 18		ror $18,x			ror 	XSNumber0,x
.c0f0	80 08		bra $c0fa			bra 	_BSExitLoop
.c0f2					_BSLeft:
.c0f2	16 18		asl $18,x			asl 	XSNumber0,x 				; shift left
.c0f4	36 20		rol $20,x			rol 	XSNumber1,x
.c0f6	36 28		rol $28,x			rol 	XSNumber2,x
.c0f8	36 30		rol $30,x			rol 	XSNumber3,x
.c0fa					_BSExitLoop:
.c0fa	d6 19		dec $19,x			dec 	XSNumber0+1,x 				; do that many times
.c0fc	d0 e6		bne $c0e4			bne 	_BSLoop
.c0fe	80 08		bra $c108			bra 	_BSExit
.c100					_BSIsZero:
.c100	74 18		stz $18,x			stz 	XSNumber0,x					; return zero.
.c102	74 20		stz $20,x			stz 	XSNumber1,x
.c104	74 28		stz $28,x			stz 	XSNumber2,x
.c106	74 30		stz $30,x			stz 	XSNumber3,x
.c108					_BSExit:
.c108	28		plp				plp 								; throw direction.
.c109	4c b5 c1	jmp $c1b5			jmp 	EXPRMainLoop
.c10c					BinRefWord:
.c10c	a9 20		lda #$20			lda 	#XS_ISREFERENCE
.c10e	80 02		bra $c112			bra 	BinRefMain
.c110					BinRefByte:
.c110	a9 30		lda #$30			lda 	#XS_ISREFERENCE|XS_ISBYTEREFERENCE
.c112					BinRefMain:
.c112	48		pha				pha
.c113	18		clc				clc
.c114	b5 18		lda $18,x			lda 	XSNumber0,x
.c116	75 19		adc $19,x			adc 		XSNumber0+1,x
.c118	95 18		sta $18,x			sta 	XSNumber0,x
.c11a	b5 20		lda $20,x			lda 	XSNumber1,x
.c11c	75 21		adc $21,x			adc 		XSNumber1+1,x
.c11e	95 20		sta $20,x			sta 	XSNumber1,x
.c120	b5 28		lda $28,x			lda 	XSNumber2,x
.c122	75 29		adc $29,x			adc 		XSNumber2+1,x
.c124	95 28		sta $28,x			sta 	XSNumber2,x
.c126	b5 30		lda $30,x			lda 	XSNumber3,x
.c128	75 31		adc $31,x			adc 		XSNumber3+1,x
.c12a	95 30		sta $30,x			sta 	XSNumber3,x
.c12c	68		pla				pla
.c12d	95 10		sta $10,x			sta 	XSControl,x
.c12f	4c b5 c1	jmp $c1b5			jmp 	EXPRMainLoop
.c132					MICheckBothInteger:
.c132	b5 10		lda $10,x			lda 	XSControl,x
.c134	15 10		ora $10,x			ora 	XSControl,x
.c136	29 c0		and #$c0			and 	#$C0
.c138	d0 01		bne $c13b			bne 	_MICBIType
.c13a	60		rts				rts
.c13b					_MICBIType:
.c13b	a9 02		lda #$02		lda	#2
.c13d	4c 39 c8	jmp $c839		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/mathstd.asm

.c140					DereferenceCheckTypes:
.c140	20 ac c1	jsr $c1ac			jsr 	DereferenceTerm 			; dereference first
.c143	e8		inx				inx
.c144	20 ac c1	jsr $c1ac			jsr 	DereferenceTerm 			; dereference second
.c147	ca		dex				dex
.c148	b5 10		lda $10,x			lda 	XSControl,x 				; eor top bits, so non zero if different.
.c14a	55 11		eor $11,x			eor 	XSControl+1,x
.c14c	30 03		bmi $c151			bmi 	DRCType 					; type mismatch.
.c14e	34 10		bit $10,x			bit 	XSControl,x 				; and set NV from the actual type
.c150	60		rts				rts
.c151					DRCType:
.c151	a9 02		lda #$02		lda	#2
.c153	4c 39 c8	jmp $c839		jmp	ErrorHandler
.c156					BinaryAdd:
.c156	20 40 c1	jsr $c140			jsr 	DereferenceCheckTypes
.c159	30 f6		bmi $c151			bmi 	DRCType
.c15b	a9 00		lda #$00			lda 	#0
.c15d	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c160	4c b5 c1	jmp $c1b5			jmp 	EXPRMainLoop
.c163					BinaryMinus:
.c163	20 40 c1	jsr $c140			jsr 	DereferenceCheckTypes
.c166	30 e9		bmi $c151			bmi 	DRCType
.c168	a9 01		lda #$01			lda 	#1
.c16a	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c16d	4c b5 c1	jmp $c1b5			jmp 	EXPRMainLoop
.c170					BinaryTimes:
.c170	20 40 c1	jsr $c140			jsr 	DereferenceCheckTypes
.c173	30 dc		bmi $c151			bmi 	DRCType
.c175	a9 02		lda #$02			lda 	#2
.c177	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c17a	4c b5 c1	jmp $c1b5			jmp 	EXPRMainLoop
.c17d					BinaryFDiv:
.c17d	20 40 c1	jsr $c140			jsr 	DereferenceCheckTypes
.c180	30 cf		bmi $c151			bmi 	DRCType
.c182	a9 03		lda #$03			lda 	#3
.c184	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c187					BinaryCheckResult:
.c187	ad 02 ff	lda $ff02			lda 	ControlError
.c18a	d0 03		bne $c18f			bne 	_BCRError
.c18c	4c b5 c1	jmp $c1b5			jmp 	EXPRMainLoop
.c18f					_BCRError:
.c18f	a9 03		lda #$03		lda	#3
.c191	4c 39 c8	jmp $c839		jmp	ErrorHandler
.c194					BinaryUDiv:
.c194	20 40 c1	jsr $c140			jsr 	DereferenceCheckTypes
.c197	30 b8		bmi $c151			bmi 	DRCType
.c199	a9 04		lda #$04			lda 	#4
.c19b	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c19e	80 e7		bra $c187			bra 	BinaryCheckResult
.c1a0					BinaryModulus:
.c1a0	20 40 c1	jsr $c140			jsr 	DereferenceCheckTypes
.c1a3	30 ac		bmi $c151			bmi 	DRCType
.c1a5	a9 05		lda #$05			lda 	#5
.c1a7	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c1aa	80 db		bra $c187			bra 	BinaryCheckResult

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/dereference.asm

.c1ac					DereferenceTerm:
.c1ac	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/expression.asm

.c1ad					EXPEvaluateExpressionRestart:
.c1ad	a2 00		ldx #$00			ldx 	#0 							; start from base of stack.
.c1af					EXPEvaluateExpression:
.c1af	a9 00		lda #$00			lda 	#0 							; current precedence is 0.
.c1b1					EXPEvaluateExpressionPrecedenceA:
.c1b1	48		pha				pha		 							; push on stack.
.c1b2	20 36 c2	jsr $c236			jsr 	EvaluateTerm 				; evaluate term at this level.
.c1b5					EXPRMainLoop:
.c1b5	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.c1b7	29 e0		and #$e0			and 	#$E0 						; is it $20-$3F, e.g. a binary operator.
.c1b9	c9 20		cmp #$20			cmp 	#$20
.c1bb	d0 2e		bne $c1eb			bne 	_EEExit
.c1bd	da		phx				phx 			 					; get binary precedence for current operator -> zTemp0+1
.c1be	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get the operator again
.c1c0	aa		tax				tax
.c1c1	bd e6 c6	lda $c6e6,x			lda 	BinaryPrecedence-$20,x 		; get the binary operator precedence.
.c1c4	85 39		sta $39				sta 	zTemp0+1
.c1c6	fa		plx				plx
.c1c7	68		pla				pla 								; restore current precedence.
.c1c8	c5 39		cmp $39				cmp 	zTemp0+1 					; if >= operator precedence then exit
.c1ca	b0 20		bcs $c1ec			bcs 	_EEExit2
.c1cc	48		pha				pha 								; save current precedence on the 6502 stack.
.c1cd	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get the operator back.
.c1cf	c8		iny				iny 								; consume operator.
.c1d0	48		pha				pha 								; save the operator.
.c1d1	a5 39		lda $39				lda 	zTemp0+1					; get precedence of operator
.c1d3	e8		inx				inx 								; space for it on the stack and do the RHS.
.c1d4	20 b1 c1	jsr $c1b1			jsr 	EXPEvaluateExpressionPrecedenceA
.c1d7	ca		dex				dex 								; back to original value.
.c1d8	68		pla				pla 								; load operator
.c1d9	29 1f		and #$1f			and 	#$1F 						; mask out bits
.c1db	0a		asl a				asl 	a 							; double as look up table, also Clear Carry
.c1dc	69 19		adc #$19			adc 	#(BinaryVectorTable & $FF) 	; work out the address to do the indirect jump.
.c1de	8d e9 c1	sta $c1e9			sta 	_EXPRIndirectJump+1
.c1e1	a9 c7		lda #$c7			lda 	#(BinaryVectorTable >> 8)
.c1e3	69 00		adc #$00			adc 	#0
.c1e5	8d ea c1	sta $c1ea			sta 	_EXPRIndirectJump+2
.c1e8					_EXPRIndirectJump:
.c1e8	6c ff ff	jmp ($ffff)			jmp 	($FFFF) 					; jump to the code routine, loops back to EXPRMainLoop
.c1eb					_EEExit:
.c1eb	68		pla				pla 								; throw precedence
.c1ec					_EEExit2:
.c1ec	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/exprutils.asm

.c1ed					EXPEvalNumber:
.c1ed	20 af c1	jsr $c1af			jsr 	EXPEvaluateExpression 		; get a value
.c1f0	20 ac c1	jsr $c1ac			jsr 	DereferenceTerm 			; dereference it
.c1f3	34 10		bit $10,x			bit 	XSControl,x	 				; fail if string
.c1f5	30 01		bmi $c1f8			bmi 	EVUType
.c1f7	60		rts				rts
.c1f8					EVUType:
.c1f8	a9 02		lda #$02		lda	#2
.c1fa	4c 39 c8	jmp $c839		jmp	ErrorHandler
.c1fd					EXPEvalInteger:
.c1fd	20 ed c1	jsr $c1ed			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.c200	34 10		bit $10,x			bit 	XSControl,x 				; integer ?
.c202	f0 05		beq $c209			beq 	_EEIExit
.c204	a9 11		lda #$11			lda 	#17 						; no, make it integer
.c206	20 28 c3	jsr $c328			jsr 	DOMathCommand
.c209					_EEIExit:
.c209	60		rts				rts
.c20a					EXPEvalInteger16:
.c20a	20 fd c1	jsr $c1fd			jsr 	EXPEvalInteger 				; get integer
.c20d	b5 30		lda $30,x			lda 	XSNumber3,x
.c20f	15 28		ora $28,x			ora 	XSNumber2,x
.c211	d0 1e		bne $c231			bne 	EVURange
.c213	60		rts				rts
.c214					EXPEvalInteger8:
.c214	20 fd c1	jsr $c1fd			jsr 	EXPEvalInteger 				; get integer
.c217	b5 20		lda $20,x			lda 	XSNumber1,x 				; range 00-FF
.c219	d0 16		bne $c231			bne 	EVURange
.c21b	b5 18		lda $18,x			lda 	XSNumber0,x
.c21d	60		rts				rts
.c21e					EXPEvalString:
.c21e	20 af c1	jsr $c1af			jsr 	EXPEvaluateExpression 		; get a value
.c221	20 ac c1	jsr $c1ac			jsr 	DereferenceTerm 			; dereference it
.c224	34 10		bit $10,x			bit 	XSControl,x	 				; fail if string
.c226	10 d0		bpl $c1f8			bpl 	EVUType
.c228	b5 18		lda $18,x			lda 	XSNumber0,x
.c22a	85 38		sta $38				sta 	zTemp0
.c22c	b5 20		lda $20,x			lda 	XSNumber1,x
.c22e	85 39		sta $39				sta 	zTemp0+1
.c230	60		rts				rts
.c231					EVURange:
.c231	a9 04		lda #$04		lda	#4
.c233	4c 39 c8	jmp $c839		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/term.asm

.c236					EvaluateTerm:
.c236	b1 3a		lda ($3a),y			lda 	(CodePtr),y 				; get next token
.c238	30 0a		bmi $c244			bmi 	_ETKeyword 					; is it a keyword (80-FF) ?
.c23a	0a		asl a				asl		a							; is it a number (40-7F)
.c23b	10 1f		bpl $c25c			bpl		_ETIdentifierOrSpecial 		; if 00-3F then it is an identifier, or a multi purpose unary ! ? -
.c23d	20 c1 c2	jsr $c2c1			jsr 	ExtractTokenisedInteger
.c240	20 07 c3	jsr $c307			jsr 	CheckFollowingDecimal
.c243	60		rts				rts
.c244					_ETKeyword:
.c244	c9 b0		cmp #$b0			cmp 	#$B0 						; is it a unary function ?
.c246	b0 36		bcs $c27e			bcs 	_ETSyntax
.c248	da		phx				phx
.c249	0a		asl a				asl 	a 							; access address to jump
.c24a	aa		tax				tax
.c24b	bd 5b c7	lda $c75b,x			lda 	StandardVectorTable,x
.c24e	8d 5a c2	sta $c25a			sta 	_ETVector+1
.c251	bd 5c c7	lda $c75c,x			lda 	StandardVectorTable+1,x
.c254	8d 5b c2	sta $c25b			sta 	_ETVector+2
.c257	fa		plx				plx 								; restore stack pos and go there.
.c258	c8		iny				iny 								; consume
.c259					_ETVector:
.c259	4c ff ff	jmp $ffff			jmp 	$FFFF
.c25c					_ETIdentifierOrSpecial:
.c25c	0a		asl a			 	asl 	a 							; bit 5 now in sign slot
.c25d	10 40		bpl $c29f		 	bpl 	_ETIsIdentifier  			; 0 it is 00-1F e.g. identifier
.c25f	b1 3a		lda ($3a),y		 	lda 	(codePtr),y 				; get and consume. clearer than reuse
.c261	c8		iny			 	iny
.c262	c9 21		cmp #$21		 	cmp 	#KWD_MINUS 					; negation.
.c264	d0 10		bne $c276		 	bne 	_ETCheckReference
.c266	20 36 c2	jsr $c236		 	jsr 	EvaluateTerm 				; it's minus *something*.
.c269	20 ac c1	jsr $c1ac		 	jsr 	DereferenceTerm 			; dereference it.
.c26c	b5 10		lda $10,x		 	lda 	XSControl,x 				; numeric term ?
.c26e	30 2a		bmi $c29a		 	bmi 	_ETBadType
.c270	a9 10		lda #$10		 	lda 	#16 						; negation function - needs optimising for ints
.c272	20 28 c3	jsr $c328		 	jsr 	DoMathCommand 				; work it out
.c275	60		rts			 	rts
.c276					_ETCheckReference:
.c276	c9 32		cmp #$32			cmp 	#KWD_QMARK
.c278	f0 09		beq $c283			beq 	_ETHaveReference
.c27a	49 31		eor #$31			eor 	#KWD_PLING
.c27c	f0 05		beq $c283			beq 	_ETHaveReference
.c27e					_ETSyntax:
.c27e	a9 01		lda #$01		lda	#1
.c280	4c 39 c8	jmp $c839		jmp	ErrorHandler
.c283					_ETHaveReference:
.c283	48		pha				pha 								; save type.
.c284	20 36 c2	jsr $c236		 	jsr 	EvaluateTerm 				; get reference address
.c287	20 ac c1	jsr $c1ac		 	jsr 	DereferenceTerm
.c28a	b5 10		lda $10,x		 	lda 	XSControl,x 				; must be integer
.c28c	29 c0		and #$c0		 	and 	#XS_TYPEMASK
.c28e	d0 0a		bne $c29a		 	bne 	_ETBadType
.c290	68		pla			 	pla 								; get type of reference back
.c291	f0 02		beq $c295		 	beq 	_ETIsWord 					; if zero, it's a word reference
.c293	a9 10		lda #$10		 	lda 	#XS_ISBYTEREFERENCE
.c295					_ETIsWord:
.c295	09 20		ora #$20			ora 	#XS_ISREFERENCE 			; now $20 / $30 for word/byte reference
.c297	95 10		sta $10,x			sta 	XSControl,x 				; update type
.c299	60		rts				rts
.c29a					_ETBadType:
.c29a	a9 02		lda #$02		lda	#2
.c29c	4c 39 c8	jmp $c839		jmp	ErrorHandler
.c29f					_ETIsIdentifier:
>c29f	03						.byte 	3
.c2a0	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get the MSB of the identifier address.
.c2a2	c8		iny				iny
.c2a3	18		clc				clc
.c2a4	69 c9		adc #$c9			adc 	#Program >> 8 				; convert to a real address.
.c2a6	95 20		sta $20,x			sta 	XSNumber1,x
.c2a8	85 39		sta $39				sta 	zTemp0+1
.c2aa	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; LSB - on a page boundary
.c2ac	95 18		sta $18,x			sta 	XSNumber0,x
.c2ae	85 38		sta $38				sta 	zTemp0
.c2b0	74 28		stz $28,x			stz 	XSNumber2,x 				; neatness
.c2b2	74 30		stz $30,x			stz 	XSNumber3,x
.c2b4	5a		phy				phy 								; read and update the type/control
.c2b5	a0 04		ldy #$04			ldy 	#4
.c2b7	b1 38		lda ($38),y			lda 	(zTemp0),y
.c2b9	29 c0		and #$c0			and 	#XS_TYPEMASK 				; type info
.c2bb	09 20		ora #$20			ora 	#XS_ISREFERENCE 			; set reference bit (is word)
.c2bd	7a		ply				ply
.c2be	95 10		sta $10,x			sta 	XSControl,x
.c2c0	60		rts				rts
.c2c1					ExtractTokenisedInteger:
.c2c1	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get first token, known to be 40-7F
.c2c3	29 3f		and #$3f			and 	#$3F 						; mask off upper bits
.c2c5	95 18		sta $18,x			sta 	XSNumber0,x 				; initial value.
.c2c7	74 20		stz $20,x			stz 	XSNumber1,x
.c2c9	74 28		stz $28,x			stz 	XSNumber2,x
.c2cb	74 30		stz $30,x			stz 	XSNumber3,x
.c2cd	74 10		stz $10,x			stz 	XSControl,x 				; integer constant
.c2cf					_ETConstant:
.c2cf	c8		iny				iny 								; look at next
.c2d0	b1 3a		lda ($3a),y			lda 	(CodePtr),y
.c2d2	29 c0		and #$c0			and 	#$C0 						; is it $40..$7F
.c2d4	c9 40		cmp #$40			cmp 	#$40
.c2d6	d0 2e		bne $c306			bne 	_ETExit
.c2d8	b5 30		lda $30,x			lda 	XSNumber3,x 				; save the upper byte.
.c2da	48		pha				pha
.c2db	b5 28		lda $28,x			lda 	XSNumber2,x 				; multiply old by 256
.c2dd	95 30		sta $30,x			sta 	XSNumber3,x
.c2df	b5 20		lda $20,x			lda 	XSNumber1,x
.c2e1	95 28		sta $28,x			sta 	XSNumber2,x
.c2e3	b5 18		lda $18,x			lda 	XSNumber0,x
.c2e5	95 20		sta $20,x			sta 	XSNumber1,x
.c2e7	74 18		stz $18,x			stz 	XSNumber0,x
.c2e9	68		pla				pla 								; old MS Byte
.c2ea	4a		lsr a				lsr 	a 							; shift right twice
.c2eb	76 30		ror $30,x			ror 	XSNumber3,x
.c2ed	76 28		ror $28,x			ror 	XSNumber2,x
.c2ef	76 20		ror $20,x			ror 	XSNumber1,x
.c2f1	76 18		ror $18,x			ror 	XSNumber0,x
.c2f3	4a		lsr a				lsr 	a
.c2f4	76 30		ror $30,x			ror 	XSNumber3,x
.c2f6	76 28		ror $28,x			ror 	XSNumber2,x
.c2f8	76 20		ror $20,x			ror 	XSNumber1,x
.c2fa	76 18		ror $18,x			ror 	XSNumber0,x
.c2fc	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; or the lower 6 bits in.
.c2fe	29 3f		and #$3f			and 	#$3F
.c300	15 18		ora $18,x			ora 	XSNumber0,x
.c302	95 18		sta $18,x			sta 	XSNumber0,x
.c304	80 c9		bra $c2cf			bra 	_ETConstant
.c306					_ETExit:
.c306	60		rts				rts
.c307					CheckFollowingDecimal:
.c307	b1 3a		lda ($3a),y			lda 	(CodePtr),y 				; what follows ?
.c309	c9 c3		cmp #$c3			cmp 	#KWD_SYS_DEC 				; decimal ?
.c30b	d0 1a		bne $c327			bne 	_CFDExit
.c30d	98		tya				tya 								; get address of decimal data
.c30e	1a		inc a				inc 	a
.c30f	38		sec				sec
.c310	65 3a		adc $3a				adc 	CodePtr
.c312	8d 08 ff	sta $ff08			sta 	ControlPort+8 				; param slot 2 = address of decimal data.
.c315	a5 3b		lda $3b				lda 	CodePtr+1
.c317	69 00		adc #$00			adc 	#0
.c319	8d 09 ff	sta $ff09			sta 	ControlPort+9
.c31c	a9 20		lda #$20			lda 	#32 						; decimal expand code.
.c31e	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c321	c8		iny				iny 								; get length and add it +1 for the length
.c322	98		tya				tya
.c323	38		sec				sec
.c324	71 3a		adc ($3a),y			adc 	(CodePtr),y
.c326	a8		tay				tay
.c327					_CFDExit:
.c327	60		rts				rts
.c328					DoMathCommand:
.c328	48		pha				pha
.c329	20 f4 ff	jsr $fff4		jsr 	WaitMessage
.c32c	8d 01 ff	sta $ff01			sta 	ControlFunction
.c32f	8a		txa				txa
.c330	18		clc				clc
.c331	69 10		adc #$10			adc 	#XSStack & $FF
.c333	8d 04 ff	sta $ff04			sta 	ControlPort+4
.c336	a9 00		lda #$00			lda 	#XSStack >> 8
.c338	69 00		adc #$00			adc 	#0
.c33a	8d 05 ff	sta $ff05			sta 	ControlPort+5
.c33d	a9 08		lda #$08			lda 	#8
.c33f	8d 06 ff	sta $ff06			sta 	ControlPort+6
.c342	a9 04		lda #$04			lda 	#4
.c344	8d 00 ff	sta $ff00			sta 	ControlCommand 				; do command
.c347	20 f4 ff	jsr $fff4		jsr 	WaitMessage
.c34a	68		pla				pla				; wait for result.
.c34b	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/asc.asm

.c34c					EXPUnaryAsc:
.c34c	20 1e c2	jsr $c21e			jsr 	EXPEvalString 					; string to R0, zTemp0
.c34f	20 15 c8	jsr $c815			jsr 	ERRCheckRParen 					; )
.c352	b2 38		lda ($38)			lda 	(zTemp0) 						; length 0 ?
.c354	f0 06		beq $c35c			beq 	_EXAZero 						; if so return 0
.c356	5a		phy				phy 									; otherwise get first character
.c357	a0 01		ldy #$01			ldy 	#1
.c359	b1 38		lda ($38),y			lda 	(zTemp0),y
.c35b	7a		ply				ply
.c35c					_EXAZero:
.c35c	4c 6e c3	jmp $c36e			jmp 	EXPUnaryReturnA

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/dollar.asm

.c35f					EXPUnaryNull:
.c35f	20 af c1	jsr $c1af			jsr 	EXPEvaluateExpression 		; get a value
.c362	20 ac c1	jsr $c1ac			jsr 	DereferenceTerm 			; dereference it
.c365	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/len.asm

.c366					EXPUnaryLen:
.c366	20 1e c2	jsr $c21e			jsr 	EXPEvalString 					; string to R0, zTemp0
.c369	20 15 c8	jsr $c815			jsr 	ERRCheckRParen 					; )
.c36c	b2 38		lda ($38)			lda 	(zTemp0) 						; first byte is the length
.c36e					EXPUnaryReturnA:
.c36e	95 18		sta $18,x			sta 	XSNumber0,x
.c370	74 20		stz $20,x			stz 	XSNumber1,x
.c372	74 28		stz $28,x			stz 	XSNumber2,x
.c374	74 30		stz $30,x			stz 	XSNumber3,x
.c376	74 10		stz $10,x			stz 	XSControl,x
.c378	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/simple.asm

.c379					UnaryParenthesis:
.c379	20 af c1	jsr $c1af			jsr 	EXPEvaluateExpression 		; evaluate at stack level X
.c37c	4c 15 c8	jmp $c815			jmp 	ERRCheckRParen	 			; check )
.c37f					DoUnaryFunction:
.c37f	48		pha				pha
.c380	20 af c1	jsr $c1af			jsr 	EXPEvaluateExpression 		; one operand
.c383	68		pla				pla
.c384	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c387	ad 02 ff	lda $ff02			lda 	ControlError
.c38a	d0 03		bne $c38f			bne 	_DUFError
.c38c	4c 15 c8	jmp $c815			jmp 	ERRCheckRParen 				; closing )
.c38f					_DUFError:
.c38f	a9 04		lda #$04		lda	#4
.c391	4c 39 c8	jmp $c839		jmp	ErrorHandler
.c394					UnaryInt:
.c394	a9 11		lda #$11			lda 	#17 						; do appropriate command
.c396	80 e7		bra $c37f			bra 	DoUnaryFunction
.c398					UnarySqr:
.c398	a9 12		lda #$12			lda 	#18 						; do appropriate command
.c39a	80 e3		bra $c37f			bra 	DoUnaryFunction
.c39c					UnarySin:
.c39c	a9 13		lda #$13			lda 	#19 						; do appropriate command
.c39e	80 df		bra $c37f			bra 	DoUnaryFunction
.c3a0					UnaryCos:
.c3a0	a9 14		lda #$14			lda 	#20 						; do appropriate command
.c3a2	80 db		bra $c37f			bra 	DoUnaryFunction
.c3a4					UnaryTan:
.c3a4	a9 15		lda #$15			lda 	#21 						; do appropriate command
.c3a6	80 d7		bra $c37f			bra 	DoUnaryFunction
.c3a8					UnaryATan:
.c3a8	a9 16		lda #$16			lda 	#22 						; do appropriate command
.c3aa	80 d3		bra $c37f			bra 	DoUnaryFunction
.c3ac					UnaryExp:
.c3ac	a9 17		lda #$17			lda 	#23 						; do appropriate command
.c3ae	80 cf		bra $c37f			bra 	DoUnaryFunction
.c3b0					UnaryLog:
.c3b0	a9 18		lda #$18			lda 	#24 						; do appropriate command
.c3b2	80 cb		bra $c37f			bra 	DoUnaryFunction
.c3b4					UnaryAbs:
.c3b4	a9 19		lda #$19			lda 	#25 						; do appropriate command
.c3b6	80 c7		bra $c37f			bra 	DoUnaryFunction
.c3b8					UnarySgn:
.c3b8	a9 1a		lda #$1a			lda 	#26 						; do appropriate command
.c3ba	80 c3		bra $c37f			bra 	DoUnaryFunction
.c3bc					UnaryRnd:
.c3bc	a9 1b		lda #$1b			lda 	#27 						; do appropriate command
.c3be	80 bf		bra $c37f			bra 	DoUnaryFunction
.c3c0					UnaryRand:
.c3c0	a9 1c		lda #$1c			lda 	#28 						; do appropriate command
.c3c2	80 bb		bra $c37f			bra 	DoUnaryFunction

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/string.asm

.c3c4					EXPUnaryInlineString:
.c3c4	18		clc				clc 								; physical address -> TOS
.c3c5	98		tya				tya
.c3c6	65 3a		adc $3a				adc 	codePtr
.c3c8	95 18		sta $18,x			sta 	XSNumber0,x
.c3ca	a5 3b		lda $3b				lda 	codePtr+1
.c3cc	69 00		adc #$00			adc 	#0
.c3ce	95 20		sta $20,x			sta 	XSNumber1,x
.c3d0	74 28		stz $28,x			stz 	XSNumber2,x 				; fill in the rest & type
.c3d2	74 30		stz $30,x			stz 	XSNumber3,x
.c3d4	a9 80		lda #$80			lda 	#XS_STRING 					; make it a string.
.c3d6	95 10		sta $10,x			sta 	XSControl,x
.c3d8	98		tya				tya	 								; skip over it.
.c3d9	38		sec				sec
.c3da	71 3a		adc ($3a),y			adc 	(codePtr),y
.c3dc	a8		tay				tay
.c3dd	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/val.asm

.c3de					EXPUnaryVal:
.c3de	20 00 c4	jsr $c400			jsr 	EXPValBody 						; do the main bit.
.c3e1	d0 01		bne $c3e4			bne 	_EXPUVExit 						; check error.
.c3e3	60		rts				rts
.c3e4					_EXPUVExit:
.c3e4	a9 04		lda #$04		lda	#4
.c3e6	4c 39 c8	jmp $c839		jmp	ErrorHandler
.c3e9					EXPUnaryIsVal:
.c3e9	20 00 c4	jsr $c400			jsr 	EXPValBody 						; do the main bit.
.c3ec	f0 05		beq $c3f3			beq 	EXPUnaryReturnMinus1 			; error code.
.c3ee					EXPUnaryReturnZero:
.c3ee	a9 00		lda #$00		 	lda 	#0 								; returns zerozero no error
.c3f0	4c 6e c3	jmp $c36e		 	jmp 	EXPUnaryReturnA
.c3f3					EXPUnaryReturnMinus1:
.c3f3	a9 ff		lda #$ff			lda 	#$FF 							; returns -1
.c3f5	95 18		sta $18,x			sta 	XSNumber0,x
.c3f7	95 20		sta $20,x			sta 	XSNumber1,x
.c3f9	95 28		sta $28,x			sta 	XSNumber2,x
.c3fb	95 30		sta $30,x			sta 	XSNumber3,x
.c3fd	74 10		stz $10,x			stz 	XSControl,x
.c3ff	60		rts				rts
.c400					EXPValBody:
.c400	20 1e c2	jsr $c21e			jsr 	EXPEvalString 					; string to R0, zTemp0
.c403	20 15 c8	jsr $c815			jsr 	ERRCheckRParen 					; )
.c406	a5 38		lda $38				lda 	zTemp0 							; copy address to offset 8/9
.c408	8d 08 ff	sta $ff08			sta 	ControlCommand+8
.c40b	a5 39		lda $39				lda 	zTemp0+1
.c40d	8d 09 ff	sta $ff09			sta 	ControlCommand+9
.c410	a9 21		lda #$21			lda 	#33
.c412	20 28 c3	jsr $c328			jsr 	DoMathCommand
.c415	ad 02 ff	lda $ff02			lda 	ControlError 					; error occurred
.c418	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/assert.asm

.c419					Command_ASSERT:
.c419	a2 00		ldx #$00			ldx 	#0
.c41b	20 ed c1	jsr $c1ed			jsr 	EXPEvalNumber 				; get a number to assert
.c41e	20 29 c4	jsr $c429			jsr 	CheckIfZero
.c421	f0 01		beq $c424			beq 	_CAFail 					; if so, the assert fails.
.c423	60		rts				rts
.c424					_CAFail:
.c424	a9 05		lda #$05		lda	#5
.c426	4c 39 c8	jmp $c839		jmp	ErrorHandler
.c429					CheckIfZero:
.c429	b5 10		lda $10,x			lda 	XSControl,x
.c42b	d0 09		bne $c436			bne 	_CAType
.c42d	b5 18		lda $18,x			lda 	XSNumber0,x
.c42f	15 20		ora $20,x			ora 	XSNumber1,x
.c431	15 28		ora $28,x			ora 	XSNumber2,x
.c433	15 30		ora $30,x			ora 	XSNumber3,x
.c435	60		rts				rts
.c436					_CAType:
.c436	a9 02		lda #$02		lda	#2
.c438	4c 39 c8	jmp $c839		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/commands/clear.asm

.c43b					Command_CLEAR:
.c43b	4c 3e c4	jmp $c43e			jmp 	ClearCode
.c43e					ClearCode:
.c43e	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/comment.asm

.c43f					Command_Comment:
.c43f	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; optional string parameter
.c441	c9 80		cmp #$80			cmp 	#KWD_SYS_STR
.c443	d0 06		bne $c44b			bne 	_CRExit
.c445	c8		iny				iny 								; skip over it, it's a comment.
.c446	98		tya				tya
.c447	38		sec				sec
.c448	71 3a		adc ($3a),y			adc 	(codePtr),y
.c44a	a8		tay				tay
.c44b					_CRExit:
.c44b	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/new.asm

.c44c					Command_NEW:
.c44c	9c 00 c9	stz $c900			stz 	Program 					; Erase current program
.c44f	20 3e c4	jsr $c43e			jsr 	ClearCode 					; Run CLR
.c452	4c a6 c4	jmp $c4a6			jmp 	Command_END 				; Run END

;******  Return to file: _include.inc


;******  Processing file: sources/commands/run.asm

.c455					Command_RUN:
.c455	20 3e c4	jsr $c43e			jsr 	ClearCode					; clear everything out.
>c458	03						.byte 	3
.c459	ad 00 c9	lda $c900			lda 	Program 					; back to the program start, get the count of var pages.
.c45c	18		clc				clc 								; make an actual address.
.c45d	69 c9		adc #$c9			adc 	#(Program >> 8)
.c45f	85 3b		sta $3b				sta 	codePtr+1
.c461	64 3a		stz $3a				stz 	codePtr
.c463	80 0b		bra $c470			bra 	RUNNewLine
.c465					RUNEndOfLine:
.c465	18		clc				clc 								; advance to next line.
.c466	b2 3a		lda ($3a)			lda 	(codePtr)
.c468	65 3a		adc $3a				adc 	codePtr
.c46a	85 3a		sta $3a				sta 	codePtr
.c46c	90 02		bcc $c470			bcc 	_RELNoCarry
.c46e	e6 3b		inc $3b				inc 	codePtr+1
.c470					_RELNoCarry:
.c470					RUNNewLine:
.c470	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.c472	9a		txs				txs
.c473	b2 3a		lda ($3a)			lda 	(codePtr) 					; check off end of program
.c475	f0 2f		beq $c4a6			beq 	Command_END
.c477	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.c479	b1 3a		lda ($3a),y			lda 	(codePtr),y
.c47b	8d 00 02	sta $0200			sta 	ERRLine
.c47e	c8		iny				iny
.c47f	b1 3a		lda ($3a),y			lda 	(codePtr),y
.c481	8d 01 02	sta $0201			sta 	ERRLine+1
.c484	c8		iny				iny 								; offset into codePtr for start of line.
.c485					RUNNewCommand:
.c485					_RNCNoCheck:
.c485	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get next token
.c487	10 1d		bpl $c4a6			bpl		_RUNNotToken 				; probably an identifier
.c489	c8		iny				iny 								; consume token
.c48a	c9 cd		cmp #$cd			cmp 	#KWD_COLON 					; fast skip colon
.c48c	f0 f7		beq $c485			beq 	RUNNewCommand
.c48e	c9 b0		cmp #$b0			cmp 	#$B0 				 		; check unary function ?
.c490	90 0a		bcc $c49c			bcc 	_RUNSyntax
.c492	0a		asl a				asl 	a 							; double into X.
.c493	aa		tax				tax
.c494	20 99 c4	jsr $c499			jsr 	_RUNDispatchMain			; call the main dispatcher
.c497	80 ec		bra $c485			bra 	RUNNewCommand
.c499					_RUNDispatchMain:
.c499	7c 5b c7	jmp ($c75b,x)			jmp 	(StandardVectorTable,x)
.c49c					_RUNSyntax:
.c49c	a9 01		lda #$01		lda	#1
.c49e	4c 39 c8	jmp $c839		jmp	ErrorHandler
.c4a1					_RUNBreak:
.c4a1	a9 06		lda #$06		lda	#6
.c4a3	4c 39 c8	jmp $c839		jmp	ErrorHandler
.c4a6					_RUNNotToken:
.c4a6					Command_END:
.c4a6	4c 30 c8	jmp $c830			jmp 	WarmStart
.c4a9					Command_Shift1_Handler:
.c4a9	b1 3a		lda ($3a),y			lda 	(codePtr),y 				; get token shifted
.c4ab	c8		iny				iny
.c4ac	0a		asl a				asl 	a 							; double into X
.c4ad	aa		tax				tax
.c4ae	7c 3f c7	jmp ($c73f,x)			jmp 	(ExtendedVectorTable,x) 	; and go there.

;******  Return to file: _include.inc


;******  Processing file: sources/commands/stop.asm

.c4b1					Command_STOP:
.c4b1	a9 07		lda #$07		lda	#7
.c4b3	4c 39 c8	jmp $c839		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/commands/sys.asm

.c4b6					Command_Sys:
.c4b6	a2 00		ldx #$00			ldx 	#0
.c4b8	20 0a c2	jsr $c20a			jsr 	EXPEvalInteger16 			; execution address
.c4bb	5a		phy				phy
.c4bc	b5 18		lda $18,x			lda 	XSNumber0,x 				; copy address into subroutine call.
.c4be	8d c7 c4	sta $c4c7			sta 	_SysCall+1
.c4c1	b5 20		lda $20,x			lda 	XSNumber1,x
.c4c3	8d c8 c4	sta $c4c8			sta 	_SysCall+2
.c4c6					_SysCall:
.c4c6	20 ff ff	jsr $ffff			jsr 	$FFFF 						; call the code
.c4c9	7a		ply				ply
.c4ca	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/generated/errors.asm

.c4cb					ErrorMessageText:
>c4cb	73 79 6e 74 61 78 20 65			.text	"syntax error",0
>c4d3	72 72 6f 72 00
>c4d8	74 79 70 65 20 6d 69 73			.text	"type mismatch error",0
>c4e0	6d 61 74 63 68 20 65 72 72 6f 72 00
>c4ec	64 69 76 69 73 69 6f 6e			.text	"division by zero error",0
>c4f4	20 62 79 20 7a 65 72 6f 20 65 72 72 6f 72 00
>c503	6f 75 74 20 6f 66 20 72			.text	"out of range error",0
>c50b	61 6e 67 65 20 65 72 72 6f 72 00
>c516	61 73 73 65 72 74 20 66			.text	"assert failed",0
>c51e	61 69 6c 65 64 00
>c524	62 72 65 61 6b 20 70 72			.text	"break pressed",0
>c52c	65 73 73 65 64 00
>c532	70 72 6f 67 72 61 6d 20			.text	"program stopped",0
>c53a	73 74 6f 70 70 65 64 00

;******  Return to file: _include.inc


;******  Processing file: sources/generated/kwdtext.asm

.c542					BinaryTokenText:
>c542	01 ab					.byte	$01,$ab                       	; $ 20 +
>c544	01 ad					.byte	$01,$ad                       	; $ 21 -
>c546	01 aa					.byte	$01,$aa                       	; $ 22 *
>c548	01 af					.byte	$01,$af                       	; $ 23 /
>c54a	02 3e be				.byte	$02,$3e,$be                   	; $ 24 >>
>c54d	02 3c bc				.byte	$02,$3c,$bc                   	; $ 25 <<
>c550	01 a5					.byte	$01,$a5                       	; $ 26 %
>c552	01 dc					.byte	$01,$dc                       	; $ 27 \
>c554	01 a6					.byte	$01,$a6                       	; $ 28 &
>c556	01 fc					.byte	$01,$fc                       	; $ 29 |
>c558	01 de					.byte	$01,$de                       	; $ 2a ^
>c55a	01 be					.byte	$01,$be                       	; $ 2b >
>c55c	02 3e bd				.byte	$02,$3e,$bd                   	; $ 2c >=
>c55f	01 bc					.byte	$01,$bc                       	; $ 2d <
>c561	02 3c bd				.byte	$02,$3c,$bd                   	; $ 2e <=
>c564	02 3c be				.byte	$02,$3c,$be                   	; $ 2f <>
>c567	01 bd					.byte	$01,$bd                       	; $ 30 =
>c569	01 a1					.byte	$01,$a1                       	; $ 31 !
>c56b	01 bf					.byte	$01,$bf                       	; $ 32 ?
>c56d	ff					.byte	$FF
.c56e					BaseTokenText:
>c56e	00					.byte	$00                           	; $ 80
>c56f	01 a4					.byte	$01,$a4                       	; $ 81 $
>c571	01 a8					.byte	$01,$a8                       	; $ 82 (
>c573	05 52 41 4e 44 a8			.byte	$05,$52,$41,$4e,$44,$a8       	; $ 83 RAND(
>c579	04 52 4e 44 a8				.byte	$04,$52,$4e,$44,$a8           	; $ 84 RND(
>c57e	06 49 53 56 41 4c a8			.byte	$06,$49,$53,$56,$41,$4c,$a8   	; $ 85 ISVAL(
>c585	04 49 4e 54 a8				.byte	$04,$49,$4e,$54,$a8           	; $ 86 INT(
>c58a	04 54 49 4d c5				.byte	$04,$54,$49,$4d,$c5           	; $ 87 TIME
>c58f	06 45 56 45 4e 54 a8			.byte	$06,$45,$56,$45,$4e,$54,$a8   	; $ 88 EVENT(
>c596	07 49 4e 4b 45 59 24 a8			.byte	$07,$49,$4e,$4b,$45,$59,$24,$a8	; $ 89 INKEY$(
>c59e	04 41 53 43 a8				.byte	$04,$41,$53,$43,$a8           	; $ 8a ASC(
>c5a3	05 43 48 52 24 a8			.byte	$05,$43,$48,$52,$24,$a8       	; $ 8b CHR$(
>c5a9	04 53 51 52 a8				.byte	$04,$53,$51,$52,$a8           	; $ 8c SQR(
>c5ae	04 4c 45 4e a8				.byte	$04,$4c,$45,$4e,$a8           	; $ 8d LEN(
>c5b3	04 41 42 53 a8				.byte	$04,$41,$42,$53,$a8           	; $ 8e ABS(
>c5b8	04 53 47 4e a8				.byte	$04,$53,$47,$4e,$a8           	; $ 8f SGN(
>c5bd	04 56 41 4c a8				.byte	$04,$56,$41,$4c,$a8           	; $ 90 VAL(
>c5c2	05 53 54 52 24 a8			.byte	$05,$53,$54,$52,$24,$a8       	; $ 91 STR$(
>c5c8	05 4d 49 44 24 a8			.byte	$05,$4d,$49,$44,$24,$a8       	; $ 92 MID$(
>c5ce	06 4c 45 46 54 24 a8			.byte	$06,$4c,$45,$46,$54,$24,$a8   	; $ 93 LEFT$(
>c5d5	07 52 49 47 48 54 24 a8			.byte	$07,$52,$49,$47,$48,$54,$24,$a8	; $ 94 RIGHT$(
>c5dd	04 53 49 4e a8				.byte	$04,$53,$49,$4e,$a8           	; $ 95 SIN(
>c5e2	04 43 4f 53 a8				.byte	$04,$43,$4f,$53,$a8           	; $ 96 COS(
>c5e7	04 54 41 4e a8				.byte	$04,$54,$41,$4e,$a8           	; $ 97 TAN(
>c5ec	05 41 54 41 4e a8			.byte	$05,$41,$54,$41,$4e,$a8       	; $ 98 ATAN(
>c5f2	04 4c 4f 47 a8				.byte	$04,$4c,$4f,$47,$a8           	; $ 99 LOG(
>c5f7	04 45 58 50 a8				.byte	$04,$45,$58,$50,$a8           	; $ 9a EXP(
>c5fc	04 4b 45 59 a8				.byte	$04,$4b,$45,$59,$a8           	; $ 9b KEY(
>c601	00					.byte	$00                           	; $ 9c
>c602	00					.byte	$00                           	; $ 9d
>c603	00					.byte	$00                           	; $ 9e
>c604	00					.byte	$00                           	; $ 9f
>c605	00					.byte	$00                           	; $ a0
>c606	00					.byte	$00                           	; $ a1
>c607	00					.byte	$00                           	; $ a2
>c608	00					.byte	$00                           	; $ a3
>c609	00					.byte	$00                           	; $ a4
>c60a	00					.byte	$00                           	; $ a5
>c60b	00					.byte	$00                           	; $ a6
>c60c	00					.byte	$00                           	; $ a7
>c60d	00					.byte	$00                           	; $ a8
>c60e	00					.byte	$00                           	; $ a9
>c60f	00					.byte	$00                           	; $ aa
>c610	00					.byte	$00                           	; $ ab
>c611	00					.byte	$00                           	; $ ac
>c612	00					.byte	$00                           	; $ ad
>c613	00					.byte	$00                           	; $ ae
>c614	00					.byte	$00                           	; $ af
>c615	05 57 48 49 4c c5			.byte	$05,$57,$48,$49,$4c,$c5       	; $ b0 WHILE
>c61b	04 57 45 4e c4				.byte	$04,$57,$45,$4e,$c4           	; $ b1 WEND
>c620	02 49 c6				.byte	$02,$49,$c6                   	; $ b2 IF
>c623	05 45 4e 44 49 c6			.byte	$05,$45,$4e,$44,$49,$c6       	; $ b3 ENDIF
>c629	02 44 cf				.byte	$02,$44,$cf                   	; $ b4 DO
>c62c	04 4c 4f 4f d0				.byte	$04,$4c,$4f,$4f,$d0           	; $ b5 LOOP
>c631	06 52 45 50 45 41 d4			.byte	$06,$52,$45,$50,$45,$41,$d4   	; $ b6 REPEAT
>c638	05 55 4e 54 49 cc			.byte	$05,$55,$4e,$54,$49,$cc       	; $ b7 UNTIL
>c63e	04 50 52 4f c3				.byte	$04,$50,$52,$4f,$c3           	; $ b8 PROC
>c643	07 45 4e 44 50 52 4f c3			.byte	$07,$45,$4e,$44,$50,$52,$4f,$c3	; $ b9 ENDPROC
>c64b	03 46 4f d2				.byte	$03,$46,$4f,$d2               	; $ ba FOR
>c64f	04 4e 45 58 d4				.byte	$04,$4e,$45,$58,$d4           	; $ bb NEXT
>c654	04 43 41 53 c5				.byte	$04,$43,$41,$53,$c5           	; $ bc CASE
>c659	07 45 4e 44 43 41 53 c5			.byte	$07,$45,$4e,$44,$43,$41,$53,$c5	; $ bd ENDCASE
>c661	00					.byte	$00                           	; $ be
>c662	04 54 48 45 ce				.byte	$04,$54,$48,$45,$ce           	; $ bf THEN
>c667	00					.byte	$00                           	; $ c0
>c668	00					.byte	$00                           	; $ c1
>c669	00					.byte	$00                           	; $ c2
>c66a	00					.byte	$00                           	; $ c3
>c66b	02 54 cf				.byte	$02,$54,$cf                   	; $ c4 TO
>c66e	03 4c 45 d4				.byte	$03,$4c,$45,$d4               	; $ c5 LET
>c672	05 50 52 49 4e d4			.byte	$05,$50,$52,$49,$4e,$d4       	; $ c6 PRINT
>c678	05 49 4e 50 55 d4			.byte	$05,$49,$4e,$50,$55,$d4       	; $ c7 INPUT
>c67e	04 43 41 4c cc				.byte	$04,$43,$41,$4c,$cc           	; $ c8 CALL
>c683	03 53 59 d3				.byte	$03,$53,$59,$d3               	; $ c9 SYS
>c687	04 45 58 49 d4				.byte	$04,$45,$58,$49,$d4           	; $ ca EXIT
>c68c	01 ac					.byte	$01,$ac                       	; $ cb ,
>c68e	01 bb					.byte	$01,$bb                       	; $ cc ;
>c690	01 ba					.byte	$01,$ba                       	; $ cd :
>c692	01 a7					.byte	$01,$a7                       	; $ ce '
>c694	01 a9					.byte	$01,$a9                       	; $ cf )
>c696	04 52 45 41 c4				.byte	$04,$52,$45,$41,$c4           	; $ d0 READ
>c69b	04 44 41 54 c1				.byte	$04,$44,$41,$54,$c1           	; $ d1 DATA
>c6a0	01 db					.byte	$01,$db                       	; $ d2 [
>c6a2	01 dd					.byte	$01,$dd                       	; $ d3 ]
>c6a4	01 a3					.byte	$01,$a3                       	; $ d4 #
>c6a6	01 ae					.byte	$01,$ae                       	; $ d5 .
>c6a8	04 45 4c 53 c5				.byte	$04,$45,$4c,$53,$c5           	; $ d6 ELSE
>c6ad	04 57 48 45 ce				.byte	$04,$57,$48,$45,$ce           	; $ d7 WHEN
>c6b2	06 44 4f 57 4e 54 cf			.byte	$06,$44,$4f,$57,$4e,$54,$cf   	; $ d8 DOWNTO
>c6b9	ff					.byte	$FF
.c6ba					Shift1TokenText:
>c6ba	05 43 4c 45 41 d2			.byte	$05,$43,$4c,$45,$41,$d2       	; $180 CLEAR
>c6c0	03 4e 45 d7				.byte	$03,$4e,$45,$d7               	; $181 NEW
>c6c4	03 52 55 ce				.byte	$03,$52,$55,$ce               	; $182 RUN
>c6c8	04 53 54 4f d0				.byte	$04,$53,$54,$4f,$d0           	; $183 STOP
>c6cd	03 45 4e c4				.byte	$03,$45,$4e,$c4               	; $184 END
>c6d1	06 41 53 53 45 52 d4			.byte	$06,$41,$53,$53,$45,$52,$d4   	; $185 ASSERT
>c6d8	04 4c 49 53 d4				.byte	$04,$4c,$49,$53,$d4           	; $186 LIST
>c6dd	04 53 41 56 c5				.byte	$04,$53,$41,$56,$c5           	; $187 SAVE
>c6e2	04 4c 4f 41 c4				.byte	$04,$4c,$4f,$41,$c4           	; $188 LOAD
>c6e7	05 47 4f 53 55 c2			.byte	$05,$47,$4f,$53,$55,$c2       	; $189 GOSUB
>c6ed	04 47 4f 54 cf				.byte	$04,$47,$4f,$54,$cf           	; $18a GOTO
>c6f2	06 52 45 54 55 52 ce			.byte	$06,$52,$45,$54,$55,$52,$ce   	; $18b RETURN
>c6f9	07 52 45 53 54 4f 52 c5			.byte	$07,$52,$45,$53,$54,$4f,$52,$c5	; $18c RESTORE
>c701	03 44 49 cd				.byte	$03,$44,$49,$cd               	; $18d DIM
>c705	ff					.byte	$FF
.c706					BinaryPrecedence:
>c706	03					.byte	3		; +
>c707	03					.byte	3		; -
>c708	04					.byte	4		; *
>c709	04					.byte	4		; /
>c70a	04					.byte	4		; >>
>c70b	04					.byte	4		; <<
>c70c	04					.byte	4		; %
>c70d	04					.byte	4		; \
>c70e	01					.byte	1		; &
>c70f	01					.byte	1		; |
>c710	01					.byte	1		; ^
>c711	02					.byte	2		; >
>c712	02					.byte	2		; >=
>c713	02					.byte	2		; <
>c714	02					.byte	2		; <=
>c715	02					.byte	2		; <>
>c716	02					.byte	2		; =
>c717	05					.byte	5		; !
>c718	05					.byte	5		; ?

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_binary.asm

.c719					BinaryVectorTable:
>c719	56 c1					.word	BinaryAdd                ; $20 +
>c71b	63 c1					.word	BinaryMinus              ; $21 -
>c71d	70 c1					.word	BinaryTimes              ; $22 *
>c71f	7d c1					.word	BinaryFDiv               ; $23 /
>c721	cc c0					.word	BinaryShiftRight         ; $24 >>
>c723	c9 c0					.word	BinaryShiftLeft          ; $25 <<
>c725	a0 c1					.word	BinaryModulus            ; $26 %
>c727	94 c1					.word	BinaryUDiv               ; $27 \
>c729	66 c0					.word	BinaryAnd                ; $28 &
>c72b	a8 c0					.word	BinaryOr                 ; $29 |
>c72d	87 c0					.word	BinaryXor                ; $2a ^
>c72f	2b c0					.word	CMPCompareGreater        ; $2b >
>c731	46 c0					.word	CMPCompareGreaterEqual   ; $2c >=
>c733	22 c0					.word	CMPCompareLess           ; $2d <
>c735	3d c0					.word	CMPCompareLessEqual      ; $2e <=
>c737	34 c0					.word	CMPCompareNotEqual       ; $2f <>
>c739	19 c0					.word	CMPCompareEqual          ; $30 =
>c73b	0c c1					.word	BinRefWord               ; $31 !
>c73d	10 c1					.word	BinRefByte               ; $32 ?

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_extended.asm

.c73f					ExtendedVectorTable:
>c73f	3b c4					.word	Command_CLEAR            ; $180 clear
>c741	4c c4					.word	Command_NEW              ; $181 new
>c743	55 c4					.word	Command_RUN              ; $182 run
>c745	b1 c4					.word	Command_STOP             ; $183 stop
>c747	a6 c4					.word	Command_END              ; $184 end
>c749	19 c4					.word	Command_ASSERT           ; $185 assert
>c74b	37 c8					.word	Unimplemented            ; $186 list
>c74d	37 c8					.word	Unimplemented            ; $187 save
>c74f	37 c8					.word	Unimplemented            ; $188 load
>c751	37 c8					.word	Unimplemented            ; $189 gosub
>c753	37 c8					.word	Unimplemented            ; $18a goto
>c755	37 c8					.word	Unimplemented            ; $18b return
>c757	37 c8					.word	Unimplemented            ; $18c restore
>c759	37 c8					.word	Unimplemented            ; $18d dim

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_standard.asm

.c75b					StandardVectorTable:
>c75b	c4 c3					.word	EXPUnaryInlineString     ; $80 !!str
>c75d	5f c3					.word	EXPUnaryNull             ; $81 $
>c75f	79 c3					.word	UnaryParenthesis         ; $82 (
>c761	c0 c3					.word	UnaryRand                ; $83 rand(
>c763	bc c3					.word	UnaryRnd                 ; $84 rnd(
>c765	e9 c3					.word	EXPUnaryIsVal            ; $85 isval(
>c767	94 c3					.word	UnaryInt                 ; $86 int(
>c769	37 c8					.word	Unimplemented            ; $87 time
>c76b	37 c8					.word	Unimplemented            ; $88 event(
>c76d	37 c8					.word	Unimplemented            ; $89 inkey$(
>c76f	4c c3					.word	EXPUnaryAsc              ; $8a asc(
>c771	37 c8					.word	Unimplemented            ; $8b chr$(
>c773	98 c3					.word	UnarySqr                 ; $8c sqr(
>c775	66 c3					.word	EXPUnaryLen              ; $8d len(
>c777	b4 c3					.word	UnaryAbs                 ; $8e abs(
>c779	b8 c3					.word	UnarySgn                 ; $8f sgn(
>c77b	de c3					.word	EXPUnaryVal              ; $90 val(
>c77d	37 c8					.word	Unimplemented            ; $91 str$(
>c77f	37 c8					.word	Unimplemented            ; $92 mid$(
>c781	37 c8					.word	Unimplemented            ; $93 left$(
>c783	37 c8					.word	Unimplemented            ; $94 right$(
>c785	9c c3					.word	UnarySin                 ; $95 sin(
>c787	a0 c3					.word	UnaryCos                 ; $96 cos(
>c789	a4 c3					.word	UnaryTan                 ; $97 tan(
>c78b	a8 c3					.word	UnaryATan                ; $98 atan(
>c78d	b0 c3					.word	UnaryLog                 ; $99 log(
>c78f	ac c3					.word	UnaryExp                 ; $9a exp(
>c791	37 c8					.word	Unimplemented            ; $9b key(
>c793	37 c8					.word	Unimplemented            ; $9c
>c795	37 c8					.word	Unimplemented            ; $9d
>c797	37 c8					.word	Unimplemented            ; $9e
>c799	37 c8					.word	Unimplemented            ; $9f
>c79b	37 c8					.word	Unimplemented            ; $a0
>c79d	37 c8					.word	Unimplemented            ; $a1
>c79f	37 c8					.word	Unimplemented            ; $a2
>c7a1	37 c8					.word	Unimplemented            ; $a3
>c7a3	37 c8					.word	Unimplemented            ; $a4
>c7a5	37 c8					.word	Unimplemented            ; $a5
>c7a7	37 c8					.word	Unimplemented            ; $a6
>c7a9	37 c8					.word	Unimplemented            ; $a7
>c7ab	37 c8					.word	Unimplemented            ; $a8
>c7ad	37 c8					.word	Unimplemented            ; $a9
>c7af	37 c8					.word	Unimplemented            ; $aa
>c7b1	37 c8					.word	Unimplemented            ; $ab
>c7b3	37 c8					.word	Unimplemented            ; $ac
>c7b5	37 c8					.word	Unimplemented            ; $ad
>c7b7	37 c8					.word	Unimplemented            ; $ae
>c7b9	37 c8					.word	Unimplemented            ; $af
>c7bb	37 c8					.word	Unimplemented            ; $b0 while
>c7bd	37 c8					.word	Unimplemented            ; $b1 wend
>c7bf	37 c8					.word	Unimplemented            ; $b2 if
>c7c1	37 c8					.word	Unimplemented            ; $b3 endif
>c7c3	37 c8					.word	Unimplemented            ; $b4 do
>c7c5	37 c8					.word	Unimplemented            ; $b5 loop
>c7c7	37 c8					.word	Unimplemented            ; $b6 repeat
>c7c9	37 c8					.word	Unimplemented            ; $b7 until
>c7cb	37 c8					.word	Unimplemented            ; $b8 proc
>c7cd	37 c8					.word	Unimplemented            ; $b9 endproc
>c7cf	37 c8					.word	Unimplemented            ; $ba for
>c7d1	37 c8					.word	Unimplemented            ; $bb next
>c7d3	37 c8					.word	Unimplemented            ; $bc case
>c7d5	37 c8					.word	Unimplemented            ; $bd endcase
>c7d7	37 c8					.word	Unimplemented            ; $be !!un1
>c7d9	37 c8					.word	Unimplemented            ; $bf then
>c7db	65 c4					.word	RUNEndOfLine             ; $c0 !!end
>c7dd	a9 c4					.word	Command_Shift1_Handler   ; $c1 !!sh1
>c7df	37 c8					.word	Unimplemented            ; $c2 !!sh2
>c7e1	37 c8					.word	Unimplemented            ; $c3 !!dec
>c7e3	37 c8					.word	Unimplemented            ; $c4 to
>c7e5	37 c8					.word	Unimplemented            ; $c5 let
>c7e7	37 c8					.word	Unimplemented            ; $c6 print
>c7e9	37 c8					.word	Unimplemented            ; $c7 input
>c7eb	37 c8					.word	Unimplemented            ; $c8 call
>c7ed	b6 c4					.word	Command_Sys              ; $c9 sys
>c7ef	37 c8					.word	Unimplemented            ; $ca exit
>c7f1	37 c8					.word	Unimplemented            ; $cb ,
>c7f3	37 c8					.word	Unimplemented            ; $cc ;
>c7f5	37 c8					.word	Unimplemented            ; $cd :
>c7f7	3f c4					.word	Command_Comment          ; $ce '
>c7f9	37 c8					.word	Unimplemented            ; $cf )
>c7fb	37 c8					.word	Unimplemented            ; $d0 read
>c7fd	37 c8					.word	Unimplemented            ; $d1 data
>c7ff	37 c8					.word	Unimplemented            ; $d2 [
>c801	37 c8					.word	Unimplemented            ; $d3 ]
>c803	37 c8					.word	Unimplemented            ; $d4 #
>c805	37 c8					.word	Unimplemented            ; $d5 .
>c807	37 c8					.word	Unimplemented            ; $d6 else
>c809	37 c8					.word	Unimplemented            ; $d7 when
>c80b	37 c8					.word	Unimplemented            ; $d8 downto

;******  Return to file: _include.inc


;******  Processing file: sources/support/errors/syntax.asm

.c80d					ERRCheckLParen:
.c80d	b1 3a		lda ($3a),y			lda 	(CodePtr),y
.c80f	c9 82		cmp #$82			cmp 	#KWD_LPAREN
.c811	d0 18		bne $c82b			bne 	ERRSyntaxError
.c813	c8		iny				iny
.c814	60		rts				rts
.c815					ERRCheckRParen:
.c815	b1 3a		lda ($3a),y			lda 	(CodePtr),y
.c817	c9 cf		cmp #$cf			cmp 	#KWD_RPAREN
.c819	d0 10		bne $c82b			bne 	ERRSyntaxError
.c81b	c8		iny				iny
.c81c	60		rts				rts
.c81d					ERRCheckComma:
.c81d	b1 3a		lda ($3a),y			lda 	(CodePtr),y
.c81f	c9 cb		cmp #$cb			cmp 	#KWD_COMMA
.c821	d0 08		bne $c82b			bne 	ERRSyntaxError
.c823	c8		iny				iny
.c824	60		rts				rts
.c825					ERRCheckA:
.c825	d1 3a		cmp ($3a),y			cmp 	(codePtr),y
.c827	d0 02		bne $c82b			bne 	ERRSyntaxError
.c829	c8		iny				iny
.c82a	60		rts				rts
.c82b					ERRSyntaxError:
.c82b	a9 01		lda #$01		lda	#1
.c82d	4c 39 c8	jmp $c839		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Return to file: basic.asm

.c830					WarmStart:
.c830	a9 00		lda #$00			lda 	#$00
.c832	aa		tax				tax
.c833	a8		tay				tay
>c834	03						.byte 	3
.c835	80 f9		bra $c830			bra 	WarmStart
.c837					Unimplemented:
.c837	a9 ff		lda #$ff			lda 	#$FF
.c839					ErrorHandler:
.c839	a2 ee		ldx #$ee			ldx 	#$EE
.c83b	a0 ee		ldy #$ee			ldy 	#$EE
>c83d	03						.byte 	3
.c83e					_EHLoop:
.c83e	80 fe		bra $c83e			bra 	_EHLoop
>c840							.align 	256
.c900					Program:
>c900	01 00 00 00 00 00 00 00				.binary "build/tokenised.dat"
>c908	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 14 times (224 bytes)...
>c9f8	00 00 00 00 00 00 00 00 09 64 00 c9 81 4f 7f 7f
>ca08	c0 00

;******  End of listing
