
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -q -b --mr65c02 -Wall -L build/basic.lst -o build/basic.bin basic.asm
; Tue Dec  5 17:17:07 2023

;Offset	;Hex		;Monitor	;Source

;******  Processing input file: basic.asm

.c000	4c 03 c0	jmp $c003	boot:	jmp 	ColdStart
.c003					ColdStart:
.c003	4c e6 c4	jmp $c4e6			jmp 	Command_RUN

;******  Processing file: _include.inc


;******  Processing file: sources/00data/00data_config.inc

=$c000							HIGHMEMORY = $C000
=8							STACKPAGES = 8

;******  Return to file: _include.inc


;******  Processing file: sources/00data/01data.inc

=65280					ControlCommand = ControlPort+0
=65281					ControlFunction = ControlPort+1
=65282					ControlError = ControlPort+2
=65283					ControlStatus = ControlPort+3
=8					StackSize = 8
=$c0					XS_TYPEMASK = $C0
=$80					XS_TYPEBIT = $80
=$80					XS_STRING = $80
=$20					XS_ISREFERENCE = $20
=$10					XS_ISBYTEREFERENCE = $10
.0010					XSStack:
.0010					XSControl:
>0010							.fill 	StackSize
.0018					XSNumber0:
>0018							.fill 	StackSize
.0020					XSNumber1:
>0020							.fill 	StackSize
.0028					XSNumber2:
>0028							.fill 	StackSize
.0030					XSNumber3:
>0030							.fill 	StackSize
.0038					CodePtr:
>0038							.fill 	2
.003a					basicStack:
>003a							.fill 	2
.003c					zsTemp:
>003c							.fill 	2
.003e					zTemp0:
>003e							.fill 	2
.0200					ERRLine:
>0200							.fill 	2
.0202					InputFlag:
>0202							.fill 	1
.0203					stringInitialised:
>0203							.fill 	1
.0204					stringMemory:
>0204							.fill 	2
.0206					stringTempPointer:
>0206							.fill 	2
.0208					basicStackEnd:
>0208							.fill 	1

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/binary.inc


;******  Return to file: _include.inc


;******  Processing file: sources/generated/errors.inc


;******  Return to file: _include.inc


;******  Processing file: sources/generated/kwdconst.inc

=$20					KWD_PLUS                           = $20 ; +
=$21					KWD_MINUS                          = $21 ; -
=$22					KWD_ASTERISK                       = $22 ; *
=$23					KWD_SLASH                          = $23 ; /
=$24					KWD_GREATERGREATER                 = $24 ; >>
=$25					KWD_LESSLESS                       = $25 ; <<
=$26					KWD_PERCENT                        = $26 ; %
=$27					KWD_BACKSLASH                      = $27 ; \
=$28					KWD_AMPERSAND                      = $28 ; &
=$29					KWD_VBAR                           = $29 ; |
=$2a					KWD_HAT                            = $2a ; ^
=$2b					KWD_GREATER                        = $2b ; >
=$2c					KWD_GREATEREQUAL                   = $2c ; >=
=$2d					KWD_LESS                           = $2d ; <
=$2e					KWD_LESSEQUAL                      = $2e ; <=
=$2f					KWD_LESSGREATER                    = $2f ; <>
=$30					KWD_EQUAL                          = $30 ; =
=$31					KWD_PLING                          = $31 ; !
=$32					KWD_QMARK                          = $32 ; ?
=$80					KWD_SYS_STR                        = $80 ; !!str
=$81					KWD_DOLLAR                         = $81 ; $
=$82					KWD_LPAREN                         = $82 ; (
=$83					KWD_RANDLPAREN                     = $83 ; rand(
=$84					KWD_RNDLPAREN                      = $84 ; rnd(
=$85					KWD_ISVALLPAREN                    = $85 ; isval(
=$86					KWD_INTLPAREN                      = $86 ; int(
=$87					KWD_TIME                           = $87 ; time
=$88					KWD_EVENTLPAREN                    = $88 ; event(
=$89					KWD_INKEYDOLLARLPAREN              = $89 ; inkey$(
=$8a					KWD_ASCLPAREN                      = $8a ; asc(
=$8b					KWD_CHRDOLLARLPAREN                = $8b ; chr$(
=$8c					KWD_SQRLPAREN                      = $8c ; sqr(
=$8d					KWD_LENLPAREN                      = $8d ; len(
=$8e					KWD_ABSLPAREN                      = $8e ; abs(
=$8f					KWD_SGNLPAREN                      = $8f ; sgn(
=$90					KWD_VALLPAREN                      = $90 ; val(
=$91					KWD_STRDOLLARLPAREN                = $91 ; str$(
=$92					KWD_MIDDOLLARLPAREN                = $92 ; mid$(
=$93					KWD_LEFTDOLLARLPAREN               = $93 ; left$(
=$94					KWD_RIGHTDOLLARLPAREN              = $94 ; right$(
=$95					KWD_SINLPAREN                      = $95 ; sin(
=$96					KWD_COSLPAREN                      = $96 ; cos(
=$97					KWD_TANLPAREN                      = $97 ; tan(
=$98					KWD_ATANLPAREN                     = $98 ; atan(
=$99					KWD_LOGLPAREN                      = $99 ; log(
=$9a					KWD_EXPLPAREN                      = $9a ; exp(
=$9b					KWD_KEYLPAREN                      = $9b ; key(
=$b0					KWD_WHILE                          = $b0 ; while
=$b1					KWD_WEND                           = $b1 ; wend
=$b2					KWD_IF                             = $b2 ; if
=$b3					KWD_ENDIF                          = $b3 ; endif
=$b4					KWD_DO                             = $b4 ; do
=$b5					KWD_LOOP                           = $b5 ; loop
=$b6					KWD_REPEAT                         = $b6 ; repeat
=$b7					KWD_UNTIL                          = $b7 ; until
=$b8					KWD_PROC                           = $b8 ; proc
=$b9					KWD_ENDPROC                        = $b9 ; endproc
=$ba					KWD_FOR                            = $ba ; for
=$bb					KWD_NEXT                           = $bb ; next
=$bc					KWD_CASE                           = $bc ; case
=$bd					KWD_ENDCASE                        = $bd ; endcase
=$be					KWD_SYS_UN1                        = $be ; !!un1
=$bf					KWD_THEN                           = $bf ; then
=$c0					KWD_SYS_END                        = $c0 ; !!end
=$c1					KWD_SYS_SH1                        = $c1 ; !!sh1
=$c2					KWD_SYS_SH2                        = $c2 ; !!sh2
=$c3					KWD_SYS_DEC                        = $c3 ; !!dec
=$c4					KWD_TO                             = $c4 ; to
=$c5					KWD_LET                            = $c5 ; let
=$c6					KWD_PRINT                          = $c6 ; print
=$c7					KWD_INPUT                          = $c7 ; input
=$c8					KWD_CALL                           = $c8 ; call
=$c9					KWD_SYS                            = $c9 ; sys
=$ca					KWD_EXIT                           = $ca ; exit
=$cb					KWD_COMMA                          = $cb ; ,
=$cc					KWD_SEMICOLON                      = $cc ; ;
=$cd					KWD_COLON                          = $cd ; :
=$ce					KWD_SQUOTE                         = $ce ; '
=$cf					KWD_RPAREN                         = $cf ; )
=$d0					KWD_READ                           = $d0 ; read
=$d1					KWD_DATA                           = $d1 ; data
=$d2					KWD_LSQ                            = $d2 ; [
=$d3					KWD_RSQ                            = $d3 ; ]
=$d4					KWD_HASH                           = $d4 ; #
=$d5					KWD_PERIOD                         = $d5 ; .
=$d6					KWD_ELSE                           = $d6 ; else
=$d7					KWD_WHEN                           = $d7 ; when
=$d8					KWD_DOWNTO                         = $d8 ; downto
=$180					KWD_CLEAR                          = $180 ; clear
=$181					KWD_NEW                            = $181 ; new
=$182					KWD_RUN                            = $182 ; run
=$183					KWD_STOP                           = $183 ; stop
=$184					KWD_END                            = $184 ; end
=$185					KWD_ASSERT                         = $185 ; assert
=$186					KWD_LIST                           = $186 ; list
=$187					KWD_SAVE                           = $187 ; save
=$188					KWD_LOAD                           = $188 ; load
=$189					KWD_GOSUB                          = $189 ; gosub
=$18a					KWD_GOTO                           = $18a ; goto
=$18b					KWD_RETURN                         = $18b ; return
=$18c					KWD_RESTORE                        = $18c ; restore
=$18d					KWD_DIM                            = $18d ; dim

;******  Return to file: _include.inc


;******  Processing file: sources/generated/neo6502.inc

=$ff00					ControlPort = $ff00
=$ffee					ReadCharacter = $ffee
=$fff1					WriteCharacter = $fff1
=$fff4					WaitMessage = $fff4
=$fff7					SendMessage = $fff7

;******  Return to file: _include.inc


;******  Processing file: sources/support/stack/stack.inc

=$02					STK_REPEAT = $02
=$12					STK_WHILE = $12
=$22					STK_DO = $22
=$39					STK_FOR = $39
=$42					STK_CALL = $42
=$52					STK_GOSUB = $52

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/compare.asm

.c006					CMPReturnTrue:
.c006	a9 ff		lda #$ff			lda 	#$FF
.c008	80 02		bra $c00c			bra 	CMPSetTOS
.c00a					CMPReturnFalse:
.c00a	a9 00		lda #$00			lda 	#0
.c00c					CMPSetTOS:
.c00c	95 30		sta $30,x			sta 	XSNumber3,x
.c00e	95 28		sta $28,x			sta 	XSNumber2,x
.c010	95 20		sta $20,x			sta 	XSNumber1,x
.c012	95 18		sta $18,x			sta 	XSNumber0,x
.c014	74 10		stz $10,x			stz 	XSControl,x
.c016	4c ca c1	jmp $c1ca			jmp 	EXPRMainLoop
.c019					CMPCompareEqual:
.c019	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c01c	c9 00		cmp #$00			cmp 	#0
.c01e	f0 e6		beq $c006			beq 	CMPReturnTrue
.c020	80 e8		bra $c00a			bra 	CMPReturnFalse
.c022					CMPCompareLess:
.c022	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c025	c9 ff		cmp #$ff			cmp 	#$FF
.c027	f0 dd		beq $c006			beq 	CMPReturnTrue
.c029	80 df		bra $c00a			bra 	CMPReturnFalse
.c02b					CMPCompareGreater:
.c02b	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c02e	c9 01		cmp #$01			cmp 	#1
.c030	f0 d4		beq $c006			beq 	CMPReturnTrue
.c032	80 d6		bra $c00a			bra 	CMPReturnFalse
.c034					CMPCompareNotEqual:
.c034	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c037	c9 00		cmp #$00			cmp 	#0
.c039	d0 cb		bne $c006			bne 	CMPReturnTrue
.c03b	80 cd		bra $c00a			bra 	CMPReturnFalse
.c03d					CMPCompareLessEqual:
.c03d	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c040	c9 01		cmp #$01			cmp 	#1
.c042	d0 c2		bne $c006			bne 	CMPReturnTrue
.c044	80 c4		bra $c00a			bra 	CMPReturnFalse
.c046					CMPCompareGreaterEqual:
.c046	20 4f c0	jsr $c04f			jsr 	CMPCompareBaseCode
.c049	c9 ff		cmp #$ff			cmp 	#$FF
.c04b	d0 b9		bne $c006			bne 	CMPReturnTrue
.c04d	80 bb		bra $c00a			bra 	CMPReturnFalse
.c04f					CMPCompareBaseCode:
.c04f	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes 		; dereference, check types match.
.c052	30 0d		bmi $c061			bmi 	_CMPTypeError
.c054	b5 10		lda $10,x			lda 	XSControl,x
.c056	30 0e		bmi $c066			bmi 	_CMPString 					; string ?
.c058	a9 06		lda #$06			lda 	#6 							; use coprocessor to compare
.c05a	20 3c c3	jsr $c33c			jsr 	DOMathCommand
.c05d	ad 03 ff	lda $ff03			lda 	ControlStatus 				; get result.
.c060	60		rts				rts
.c061					_CMPTypeError:
.c061	a9 02		lda #$02		lda	#2
.c063	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c066					_CMPString:
>c066	03						.byte 	3 			; UNIMPLEMENTED

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/mathint.asm

.c067					BinaryAnd:
.c067	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c06a	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c06d	b5 18		lda $18,x			lda 	XSNumber0,x
.c06f	35 19		and $19,x			and 		XSNumber0+1,x
.c071	95 18		sta $18,x			sta 	XSNumber0,x
.c073	b5 20		lda $20,x			lda 	XSNumber1,x
.c075	35 21		and $21,x			and 		XSNumber1+1,x
.c077	95 20		sta $20,x			sta 	XSNumber1,x
.c079	b5 28		lda $28,x			lda 	XSNumber2,x
.c07b	35 29		and $29,x			and 		XSNumber2+1,x
.c07d	95 28		sta $28,x			sta 	XSNumber2,x
.c07f	b5 30		lda $30,x			lda 	XSNumber3,x
.c081	35 31		and $31,x			and 		XSNumber3+1,x
.c083	95 30		sta $30,x			sta 	XSNumber3,x
.c085	4c ca c1	jmp $c1ca			jmp 	EXPRMainLoop
.c088					BinaryXor:
.c088	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c08b	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c08e	b5 18		lda $18,x			lda 	XSNumber0,x
.c090	55 19		eor $19,x			eor 		XSNumber0+1,x
.c092	95 18		sta $18,x			sta 	XSNumber0,x
.c094	b5 20		lda $20,x			lda 	XSNumber1,x
.c096	55 21		eor $21,x			eor 		XSNumber1+1,x
.c098	95 20		sta $20,x			sta 	XSNumber1,x
.c09a	b5 28		lda $28,x			lda 	XSNumber2,x
.c09c	55 29		eor $29,x			eor 		XSNumber2+1,x
.c09e	95 28		sta $28,x			sta 	XSNumber2,x
.c0a0	b5 30		lda $30,x			lda 	XSNumber3,x
.c0a2	55 31		eor $31,x			eor 		XSNumber3+1,x
.c0a4	95 30		sta $30,x			sta 	XSNumber3,x
.c0a6	4c ca c1	jmp $c1ca			jmp 	EXPRMainLoop
.c0a9					BinaryOr:
.c0a9	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c0ac	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c0af	b5 18		lda $18,x			lda 	XSNumber0,x
.c0b1	15 19		ora $19,x			ora 		XSNumber0+1,x
.c0b3	95 18		sta $18,x			sta 	XSNumber0,x
.c0b5	b5 20		lda $20,x			lda 	XSNumber1,x
.c0b7	15 21		ora $21,x			ora 		XSNumber1+1,x
.c0b9	95 20		sta $20,x			sta 	XSNumber1,x
.c0bb	b5 28		lda $28,x			lda 	XSNumber2,x
.c0bd	15 29		ora $29,x			ora 		XSNumber2+1,x
.c0bf	95 28		sta $28,x			sta 	XSNumber2,x
.c0c1	b5 30		lda $30,x			lda 	XSNumber3,x
.c0c3	15 31		ora $31,x			ora 		XSNumber3+1,x
.c0c5	95 30		sta $30,x			sta 	XSNumber3,x
.c0c7	4c ca c1	jmp $c1ca			jmp 	EXPRMainLoop
.c0ca					BinaryShiftLeft:
.c0ca	38		sec				sec
.c0cb	80 01		bra $c0ce			bra 	BinaryShift
.c0cd					BinaryShiftRight:
.c0cd	18		clc				clc
.c0ce					BinaryShift:
.c0ce	08		php				php									; save direction, CS left CC right.
.c0cf	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c0d2	20 33 c1	jsr $c133			jsr 	MICheckBothInteger
.c0d5	b5 19		lda $19,x			lda 	XSNumber0+1,x 				; if shift >=32 will be zero
.c0d7	29 e0		and #$e0			and 	#$E0
.c0d9	15 21		ora $21,x			ora 	XSNumber1+1,x
.c0db	15 22		ora $22,x			ora 	XSNumber1+2,x
.c0dd	15 23		ora $23,x			ora 	XSNumber1+3,x
.c0df	d0 20		bne $c101			bne 	_BSIsZero
.c0e1	b5 19		lda $19,x			lda 	XSNumber0+1,x 				; check zero at start
.c0e3	f0 24		beq $c109			beq 	_BSExit
.c0e5					_BSLoop:
.c0e5	28		plp				plp 								; access diection
.c0e6	08		php				php
.c0e7	b0 0a		bcs $c0f3			bcs 	_BSLeft
.c0e9	56 30		lsr $30,x			lsr 	XSNumber3,x 				; shift right
.c0eb	76 28		ror $28,x			ror 	XSNumber2,x
.c0ed	76 20		ror $20,x			ror 	XSNumber1,x
.c0ef	76 18		ror $18,x			ror 	XSNumber0,x
.c0f1	80 08		bra $c0fb			bra 	_BSExitLoop
.c0f3					_BSLeft:
.c0f3	16 18		asl $18,x			asl 	XSNumber0,x 				; shift left
.c0f5	36 20		rol $20,x			rol 	XSNumber1,x
.c0f7	36 28		rol $28,x			rol 	XSNumber2,x
.c0f9	36 30		rol $30,x			rol 	XSNumber3,x
.c0fb					_BSExitLoop:
.c0fb	d6 19		dec $19,x			dec 	XSNumber0+1,x 				; do that many times
.c0fd	d0 e6		bne $c0e5			bne 	_BSLoop
.c0ff	80 08		bra $c109			bra 	_BSExit
.c101					_BSIsZero:
.c101	74 18		stz $18,x			stz 	XSNumber0,x					; return zero.
.c103	74 20		stz $20,x			stz 	XSNumber1,x
.c105	74 28		stz $28,x			stz 	XSNumber2,x
.c107	74 30		stz $30,x			stz 	XSNumber3,x
.c109					_BSExit:
.c109	28		plp				plp 								; throw direction.
.c10a	4c ca c1	jmp $c1ca			jmp 	EXPRMainLoop
.c10d					BinRefWord:
.c10d	a9 20		lda #$20			lda 	#XS_ISREFERENCE
.c10f	80 02		bra $c113			bra 	BinRefMain
.c111					BinRefByte:
.c111	a9 30		lda #$30			lda 	#XS_ISREFERENCE|XS_ISBYTEREFERENCE
.c113					BinRefMain:
.c113	48		pha				pha
.c114	18		clc				clc
.c115	b5 18		lda $18,x			lda 	XSNumber0,x
.c117	75 19		adc $19,x			adc 		XSNumber0+1,x
.c119	95 18		sta $18,x			sta 	XSNumber0,x
.c11b	b5 20		lda $20,x			lda 	XSNumber1,x
.c11d	75 21		adc $21,x			adc 		XSNumber1+1,x
.c11f	95 20		sta $20,x			sta 	XSNumber1,x
.c121	b5 28		lda $28,x			lda 	XSNumber2,x
.c123	75 29		adc $29,x			adc 		XSNumber2+1,x
.c125	95 28		sta $28,x			sta 	XSNumber2,x
.c127	b5 30		lda $30,x			lda 	XSNumber3,x
.c129	75 31		adc $31,x			adc 		XSNumber3+1,x
.c12b	95 30		sta $30,x			sta 	XSNumber3,x
.c12d	68		pla				pla
.c12e	95 10		sta $10,x			sta 	XSControl,x
.c130	4c ca c1	jmp $c1ca			jmp 	EXPRMainLoop
.c133					MICheckBothInteger:
.c133	b5 10		lda $10,x			lda 	XSControl,x
.c135	15 10		ora $10,x			ora 	XSControl,x
.c137	29 c0		and #$c0			and 	#$C0
.c139	d0 01		bne $c13c			bne 	_MICBIType
.c13b	60		rts				rts
.c13c					_MICBIType:
.c13c	a9 02		lda #$02		lda	#2
.c13e	4c f8 c9	jmp $c9f8		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/binary/mathstd.asm

.c141					DereferenceCheckTypes:
.c141	20 ad c1	jsr $c1ad			jsr 	DereferenceTOS 				; dereference first
.c144	e8		inx				inx
.c145	20 ad c1	jsr $c1ad			jsr 	DereferenceTOS 				; dereference second
.c148	ca		dex				dex
.c149	b5 10		lda $10,x			lda 	XSControl,x 				; eor top bits, so non zero if different.
.c14b	55 11		eor $11,x			eor 	XSControl+1,x
.c14d	30 03		bmi $c152			bmi 	DRCType 					; type mismatch.
.c14f	34 10		bit $10,x			bit 	XSControl,x 				; and set NV from the actual type
.c151	60		rts				rts
.c152					DRCType:
.c152	a9 02		lda #$02		lda	#2
.c154	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c157					BinaryAdd:
.c157	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c15a	30 f6		bmi $c152			bmi 	DRCType
.c15c	a9 00		lda #$00			lda 	#0
.c15e	20 3c c3	jsr $c33c			jsr 	DoMathCommand
.c161	4c ca c1	jmp $c1ca			jmp 	EXPRMainLoop
.c164					BinaryMinus:
.c164	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c167	30 e9		bmi $c152			bmi 	DRCType
.c169	a9 01		lda #$01			lda 	#1
.c16b	20 3c c3	jsr $c33c			jsr 	DoMathCommand
.c16e	4c ca c1	jmp $c1ca			jmp 	EXPRMainLoop
.c171					BinaryTimes:
.c171	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c174	30 dc		bmi $c152			bmi 	DRCType
.c176	a9 02		lda #$02			lda 	#2
.c178	20 3c c3	jsr $c33c			jsr 	DoMathCommand
.c17b	4c ca c1	jmp $c1ca			jmp 	EXPRMainLoop
.c17e					BinaryFDiv:
.c17e	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c181	30 cf		bmi $c152			bmi 	DRCType
.c183	a9 03		lda #$03			lda 	#3
.c185	20 3c c3	jsr $c33c			jsr 	DoMathCommand
.c188					BinaryCheckResult:
.c188	ad 02 ff	lda $ff02			lda 	ControlError
.c18b	d0 03		bne $c190			bne 	_BCRError
.c18d	4c ca c1	jmp $c1ca			jmp 	EXPRMainLoop
.c190					_BCRError:
.c190	a9 03		lda #$03		lda	#3
.c192	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c195					BinaryUDiv:
.c195	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c198	30 b8		bmi $c152			bmi 	DRCType
.c19a	a9 04		lda #$04			lda 	#4
.c19c	20 3c c3	jsr $c33c			jsr 	DoMathCommand
.c19f	80 e7		bra $c188			bra 	BinaryCheckResult
.c1a1					BinaryModulus:
.c1a1	20 41 c1	jsr $c141			jsr 	DereferenceCheckTypes
.c1a4	30 ac		bmi $c152			bmi 	DRCType
.c1a6	a9 05		lda #$05			lda 	#5
.c1a8	20 3c c3	jsr $c33c			jsr 	DoMathCommand
.c1ab	80 db		bra $c188			bra 	BinaryCheckResult

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/dereference.asm

.c1ad					DereferenceTOS:
.c1ad	b5 10		lda $10,x			lda 	XSControl,x 				; check if reference ?
.c1af	29 20		and #$20			and 	#XS_ISREFERENCE
.c1b1	f0 0e		beq $c1c1			beq 	_DRTExit 					; no, exit
.c1b3	b5 18		lda $18,x			lda 	XSNumber0,x 				; copy address to zTemp0
.c1b5	85 3e		sta $3e				sta 	zTemp0
.c1b7	b5 20		lda $20,x			lda 	XSNumber1,x
.c1b9	85 3f		sta $3f				sta 	zTemp0+1
.c1bb	b5 10		lda $10,x			lda 	XSControl,x 				; clear reference bits.
.c1bd	29 cf		and #$cf			and 	#$FF-XS_ISREFERENCE-XS_ISBYTEREFERENCE
.c1bf	95 10		sta $10,x			sta 	XSControl,x
.c1c1					_DRTExit:
.c1c1	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/expression.asm

.c1c2					EXPEvaluateExpressionAt0:
.c1c2	a2 00		ldx #$00			ldx 	#0 							; start from base of stack.
.c1c4					EXPEvaluateExpressionAtX:
.c1c4	a9 00		lda #$00			lda 	#0 							; current precedence is 0.
.c1c6					EXPEvaluateExpressionPrecedenceA:
.c1c6	48		pha				pha		 							; push on stack.
.c1c7	20 4b c2	jsr $c24b			jsr 	EvaluateTerm 				; evaluate term at this level.
.c1ca					EXPRMainLoop:
.c1ca	b1 38		lda ($38),y			lda 	(codePtr),y 				; what follows needs to be a binary operator
.c1cc	29 e0		and #$e0			and 	#$E0 						; is it $20-$3F, e.g. a binary operator.
.c1ce	c9 20		cmp #$20			cmp 	#$20
.c1d0	d0 2e		bne $c200			bne 	_EEExit
.c1d2	da		phx				phx 			 					; get binary precedence for current operator -> zTemp0+1
.c1d3	b1 38		lda ($38),y			lda 	(codePtr),y 				; get the operator again
.c1d5	aa		tax				tax
.c1d6	bd b7 c7	lda $c7b7,x			lda 	BinaryPrecedence-$20,x 		; get the binary operator precedence.
.c1d9	85 3f		sta $3f				sta 	zTemp0+1
.c1db	fa		plx				plx
.c1dc	68		pla				pla 								; restore current precedence.
.c1dd	c5 3f		cmp $3f				cmp 	zTemp0+1 					; if >= operator precedence then exit
.c1df	b0 20		bcs $c201			bcs 	_EEExit2
.c1e1	48		pha				pha 								; save current precedence on the 6502 stack.
.c1e2	b1 38		lda ($38),y			lda 	(codePtr),y 				; get the operator back.
.c1e4	c8		iny				iny 								; consume operator.
.c1e5	48		pha				pha 								; save the operator.
.c1e6	a5 3f		lda $3f				lda 	zTemp0+1					; get precedence of operator
.c1e8	e8		inx				inx 								; space for it on the stack and do the RHS.
.c1e9	20 c6 c1	jsr $c1c6			jsr 	EXPEvaluateExpressionPrecedenceA
.c1ec	ca		dex				dex 								; back to original value.
.c1ed	68		pla				pla 								; load operator
.c1ee	29 1f		and #$1f			and 	#$1F 						; mask out bits
.c1f0	0a		asl a				asl 	a 							; double as look up table, also Clear Carry
.c1f1	69 ea		adc #$ea			adc 	#(BinaryVectorTable & $FF) 	; work out the address to do the indirect jump.
.c1f3	8d fe c1	sta $c1fe			sta 	_EXPRIndirectJump+1
.c1f6	a9 c7		lda #$c7			lda 	#(BinaryVectorTable >> 8)
.c1f8	69 00		adc #$00			adc 	#0
.c1fa	8d ff c1	sta $c1ff			sta 	_EXPRIndirectJump+2
.c1fd					_EXPRIndirectJump:
.c1fd	6c ff ff	jmp ($ffff)			jmp 	($FFFF) 					; jump to the code routine, loops back to EXPRMainLoop
.c200					_EEExit:
.c200	68		pla				pla 								; throw precedence
.c201					_EEExit2:
.c201	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/exprutils.asm

.c202					EXPEvalNumber:
.c202	20 c4 c1	jsr $c1c4			jsr 	EXPEvaluateExpressionAtX	; get a value
.c205	20 ad c1	jsr $c1ad			jsr 	DereferenceTOS				; dereference it
.c208	34 10		bit $10,x			bit 	XSControl,x	 				; fail if string
.c20a	30 01		bmi $c20d			bmi 	EVUType
.c20c	60		rts				rts
.c20d					EVUType:
.c20d	a9 02		lda #$02		lda	#2
.c20f	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c212					EXPEvalInteger:
.c212	20 02 c2	jsr $c202			jsr 	EXPEvalNumber 				; get number, coeerce to integer.
.c215	34 10		bit $10,x			bit 	XSControl,x 				; integer ?
.c217	f0 05		beq $c21e			beq 	_EEIExit
.c219	a9 11		lda #$11			lda 	#17 						; no, make it integer
.c21b	20 3c c3	jsr $c33c			jsr 	DOMathCommand
.c21e					_EEIExit:
.c21e	60		rts				rts
.c21f					EXPEvalInteger16:
.c21f	20 12 c2	jsr $c212			jsr 	EXPEvalInteger 				; get integer
.c222	b5 30		lda $30,x			lda 	XSNumber3,x
.c224	15 28		ora $28,x			ora 	XSNumber2,x
.c226	d0 1e		bne $c246			bne 	EVURange
.c228	60		rts				rts
.c229					EXPEvalInteger8:
.c229	20 12 c2	jsr $c212			jsr 	EXPEvalInteger 				; get integer
.c22c	b5 20		lda $20,x			lda 	XSNumber1,x 				; range 00-FF
.c22e	d0 16		bne $c246			bne 	EVURange
.c230	b5 18		lda $18,x			lda 	XSNumber0,x
.c232	60		rts				rts
.c233					EXPEvalString:
.c233	20 c4 c1	jsr $c1c4			jsr 	EXPEvaluateExpressionAtX 	; get a value
.c236	20 ad c1	jsr $c1ad			jsr 	DereferenceTOS 				; dereference it
.c239	34 10		bit $10,x			bit 	XSControl,x	 				; fail if not string
.c23b	10 d0		bpl $c20d			bpl 	EVUType
.c23d	b5 18		lda $18,x			lda 	XSNumber0,x
.c23f	85 3e		sta $3e				sta 	zTemp0
.c241	b5 20		lda $20,x			lda 	XSNumber1,x
.c243	85 3f		sta $3f				sta 	zTemp0+1
.c245	60		rts				rts
.c246					EVURange:
.c246	a9 04		lda #$04		lda	#4
.c248	4c f8 c9	jmp $c9f8		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/term.asm

.c24b					EvaluateTerm:
.c24b	b1 38		lda ($38),y			lda 	(CodePtr),y 				; get next token
.c24d	30 0a		bmi $c259			bmi 	_ETKeyword 					; is it a keyword (80-FF) ?
.c24f	0a		asl a				asl		a							; is it a number (40-7F)
.c250	10 1f		bpl $c271			bpl		_ETIdentifierOrSpecial 		; if 00-3F then it is an identifier, or a multi purpose unary ! ? -
.c252	20 d5 c2	jsr $c2d5			jsr 	ExtractTokenisedInteger
.c255	20 1b c3	jsr $c31b			jsr 	CheckFollowingDecimal
.c258	60		rts				rts
.c259					_ETKeyword:
.c259	c9 b0		cmp #$b0			cmp 	#$B0 						; is it a unary function ?
.c25b	b0 36		bcs $c293			bcs 	_ETSyntax
.c25d	da		phx				phx
.c25e	0a		asl a				asl 	a 							; access address to jump
.c25f	aa		tax				tax
.c260	bd 2c c8	lda $c82c,x			lda 	StandardVectorTable,x
.c263	8d 6f c2	sta $c26f			sta 	_ETVector+1
.c266	bd 2d c8	lda $c82d,x			lda 	StandardVectorTable+1,x
.c269	8d 70 c2	sta $c270			sta 	_ETVector+2
.c26c	fa		plx				plx 								; restore stack pos and go there.
.c26d	c8		iny				iny 								; consume
.c26e					_ETVector:
.c26e	4c ff ff	jmp $ffff			jmp 	$FFFF
.c271					_ETIdentifierOrSpecial:
.c271	0a		asl a			 	asl 	a 							; bit 5 now in sign slot
.c272	10 40		bpl $c2b4		 	bpl 	_ETIsIdentifier  			; 0 it is 00-1F e.g. identifier
.c274	b1 38		lda ($38),y		 	lda 	(codePtr),y 				; get and consume. clearer than reuse
.c276	c8		iny			 	iny
.c277	c9 21		cmp #$21		 	cmp 	#KWD_MINUS 					; negation.
.c279	d0 10		bne $c28b		 	bne 	_ETCheckReference
.c27b	20 4b c2	jsr $c24b		 	jsr 	EvaluateTerm 				; it's minus *something*.
.c27e	20 ad c1	jsr $c1ad		 	jsr 	DereferenceTOS 				; dereference it.
.c281	b5 10		lda $10,x		 	lda 	XSControl,x 				; numeric term ?
.c283	30 2a		bmi $c2af		 	bmi 	_ETBadType
.c285	a9 10		lda #$10		 	lda 	#16 						; negation function - needs optimising for ints
.c287	20 3c c3	jsr $c33c		 	jsr 	DoMathCommand 				; work it out
.c28a	60		rts			 	rts
.c28b					_ETCheckReference:
.c28b	c9 32		cmp #$32			cmp 	#KWD_QMARK
.c28d	f0 09		beq $c298			beq 	_ETHaveReference
.c28f	49 31		eor #$31			eor 	#KWD_PLING
.c291	f0 05		beq $c298			beq 	_ETHaveReference
.c293					_ETSyntax:
.c293	a9 01		lda #$01		lda	#1
.c295	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c298					_ETHaveReference:
.c298	48		pha				pha 								; save type.
.c299	20 4b c2	jsr $c24b		 	jsr 	EvaluateTerm 				; get reference address
.c29c	20 ad c1	jsr $c1ad		 	jsr 	DereferenceTOS
.c29f	b5 10		lda $10,x		 	lda 	XSControl,x 				; must be integer
.c2a1	29 c0		and #$c0		 	and 	#XS_TYPEMASK
.c2a3	d0 0a		bne $c2af		 	bne 	_ETBadType
.c2a5	68		pla			 	pla 								; get type of reference back
.c2a6	f0 02		beq $c2aa		 	beq 	_ETIsWord 					; if zero, it's a word reference
.c2a8	a9 10		lda #$10		 	lda 	#XS_ISBYTEREFERENCE
.c2aa					_ETIsWord:
.c2aa	09 20		ora #$20			ora 	#XS_ISREFERENCE 			; now $20 / $30 for word/byte reference
.c2ac	95 10		sta $10,x			sta 	XSControl,x 				; update type
.c2ae	60		rts				rts
.c2af					_ETBadType:
.c2af	a9 02		lda #$02		lda	#2
.c2b1	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c2b4					_ETIsIdentifier:
.c2b4	b1 38		lda ($38),y			lda 	(codePtr),y 				; get the MSB of the identifier address.
.c2b6	c8		iny				iny
.c2b7	18		clc				clc
.c2b8	69 ca		adc #$ca			adc 	#Program >> 8 				; convert to a real address.
.c2ba	95 20		sta $20,x			sta 	XSNumber1,x
.c2bc	85 3f		sta $3f				sta 	zTemp0+1
.c2be	b1 38		lda ($38),y			lda 	(codePtr),y 				; LSB - on a page boundary
.c2c0	95 18		sta $18,x			sta 	XSNumber0,x
.c2c2	85 3e		sta $3e				sta 	zTemp0
.c2c4	74 28		stz $28,x			stz 	XSNumber2,x 				; neatness
.c2c6	74 30		stz $30,x			stz 	XSNumber3,x
.c2c8	5a		phy				phy 								; read and update the type/control
.c2c9	a0 04		ldy #$04			ldy 	#4
.c2cb	b1 3e		lda ($3e),y			lda 	(zTemp0),y
.c2cd	29 c0		and #$c0			and 	#XS_TYPEMASK 				; type info
.c2cf	09 20		ora #$20			ora 	#XS_ISREFERENCE 			; set reference bit (is word)
.c2d1	7a		ply				ply
.c2d2	95 10		sta $10,x			sta 	XSControl,x
.c2d4	60		rts				rts
.c2d5					ExtractTokenisedInteger:
.c2d5	b1 38		lda ($38),y			lda 	(codePtr),y 				; get first token, known to be 40-7F
.c2d7	29 3f		and #$3f			and 	#$3F 						; mask off upper bits
.c2d9	95 18		sta $18,x			sta 	XSNumber0,x 				; initial value.
.c2db	74 20		stz $20,x			stz 	XSNumber1,x
.c2dd	74 28		stz $28,x			stz 	XSNumber2,x
.c2df	74 30		stz $30,x			stz 	XSNumber3,x
.c2e1	74 10		stz $10,x			stz 	XSControl,x 				; integer constant
.c2e3					_ETConstant:
.c2e3	c8		iny				iny 								; look at next
.c2e4	b1 38		lda ($38),y			lda 	(CodePtr),y
.c2e6	29 c0		and #$c0			and 	#$C0 						; is it $40..$7F
.c2e8	c9 40		cmp #$40			cmp 	#$40
.c2ea	d0 2e		bne $c31a			bne 	_ETExit
.c2ec	b5 30		lda $30,x			lda 	XSNumber3,x 				; save the upper byte.
.c2ee	48		pha				pha
.c2ef	b5 28		lda $28,x			lda 	XSNumber2,x 				; multiply old by 256
.c2f1	95 30		sta $30,x			sta 	XSNumber3,x
.c2f3	b5 20		lda $20,x			lda 	XSNumber1,x
.c2f5	95 28		sta $28,x			sta 	XSNumber2,x
.c2f7	b5 18		lda $18,x			lda 	XSNumber0,x
.c2f9	95 20		sta $20,x			sta 	XSNumber1,x
.c2fb	74 18		stz $18,x			stz 	XSNumber0,x
.c2fd	68		pla				pla 								; old MS Byte
.c2fe	4a		lsr a				lsr 	a 							; shift right twice
.c2ff	76 30		ror $30,x			ror 	XSNumber3,x
.c301	76 28		ror $28,x			ror 	XSNumber2,x
.c303	76 20		ror $20,x			ror 	XSNumber1,x
.c305	76 18		ror $18,x			ror 	XSNumber0,x
.c307	4a		lsr a				lsr 	a
.c308	76 30		ror $30,x			ror 	XSNumber3,x
.c30a	76 28		ror $28,x			ror 	XSNumber2,x
.c30c	76 20		ror $20,x			ror 	XSNumber1,x
.c30e	76 18		ror $18,x			ror 	XSNumber0,x
.c310	b1 38		lda ($38),y			lda 	(codePtr),y 				; or the lower 6 bits in.
.c312	29 3f		and #$3f			and 	#$3F
.c314	15 18		ora $18,x			ora 	XSNumber0,x
.c316	95 18		sta $18,x			sta 	XSNumber0,x
.c318	80 c9		bra $c2e3			bra 	_ETConstant
.c31a					_ETExit:
.c31a	60		rts				rts
.c31b					CheckFollowingDecimal:
.c31b	b1 38		lda ($38),y			lda 	(CodePtr),y 				; what follows ?
.c31d	c9 c3		cmp #$c3			cmp 	#KWD_SYS_DEC 				; decimal ?
.c31f	d0 1a		bne $c33b			bne 	_CFDExit
.c321	98		tya				tya 								; get address of decimal data
.c322	1a		inc a				inc 	a
.c323	38		sec				sec
.c324	65 38		adc $38				adc 	CodePtr
.c326	8d 08 ff	sta $ff08			sta 	ControlPort+8 				; param slot 2 = address of decimal data.
.c329	a5 39		lda $39				lda 	CodePtr+1
.c32b	69 00		adc #$00			adc 	#0
.c32d	8d 09 ff	sta $ff09			sta 	ControlPort+9
.c330	a9 20		lda #$20			lda 	#32 						; decimal expand code.
.c332	20 3c c3	jsr $c33c			jsr 	DoMathCommand
.c335	c8		iny				iny 								; get length and add it +1 for the length
.c336	98		tya				tya
.c337	38		sec				sec
.c338	71 38		adc ($38),y			adc 	(CodePtr),y
.c33a	a8		tay				tay
.c33b					_CFDExit:
.c33b	60		rts				rts
.c33c					DoMathCommand:
.c33c	48		pha				pha
.c33d	20 f4 ff	jsr $fff4		jsr 	WaitMessage
.c340	8d 01 ff	sta $ff01			sta 	ControlFunction
.c343	8a		txa				txa
.c344	18		clc				clc
.c345	69 10		adc #$10			adc 	#XSStack & $FF
.c347	8d 04 ff	sta $ff04			sta 	ControlPort+4
.c34a	a9 00		lda #$00			lda 	#XSStack >> 8
.c34c	69 00		adc #$00			adc 	#0
.c34e	8d 05 ff	sta $ff05			sta 	ControlPort+5
.c351	a9 08		lda #$08			lda 	#8
.c353	8d 06 ff	sta $ff06			sta 	ControlPort+6
.c356	a9 04		lda #$04			lda 	#4
.c358	8d 00 ff	sta $ff00			sta 	ControlCommand 				; do command
.c35b	20 f4 ff	jsr $fff4		jsr 	WaitMessage
.c35e	68		pla				pla				; wait for result.
.c35f	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/asc.asm

.c360					EXPUnaryAsc:
.c360	20 33 c2	jsr $c233			jsr 	EXPEvalString 					; string to R0, zTemp0
.c363	20 e6 c8	jsr $c8e6			jsr 	ERRCheckRParen 					; )
.c366	b2 3e		lda ($3e)			lda 	(zTemp0) 						; length 0 ?
.c368	f0 06		beq $c370			beq 	_EXAZero 						; if so return 0
.c36a	5a		phy				phy 									; otherwise get first character
.c36b	a0 01		ldy #$01			ldy 	#1
.c36d	b1 3e		lda ($3e),y			lda 	(zTemp0),y
.c36f	7a		ply				ply
.c370					_EXAZero:
.c370	4c 7f c3	jmp $c37f			jmp 	EXPUnaryReturnA

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/dollar.asm

.c373					EXPUnaryNull:
.c373	20 12 c2	jsr $c212			jsr 	EXPEvalInteger 				; get a value
.c376	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/len.asm

.c377					EXPUnaryLen:
.c377	20 33 c2	jsr $c233			jsr 	EXPEvalString 					; string to R0, zTemp0
.c37a	20 e6 c8	jsr $c8e6			jsr 	ERRCheckRParen 					; )
.c37d	b2 3e		lda ($3e)			lda 	(zTemp0) 						; first byte is the length
.c37f					EXPUnaryReturnA:
.c37f	95 18		sta $18,x			sta 	XSNumber0,x
.c381	74 20		stz $20,x			stz 	XSNumber1,x
.c383	74 28		stz $28,x			stz 	XSNumber2,x
.c385	74 30		stz $30,x			stz 	XSNumber3,x
.c387	74 10		stz $10,x			stz 	XSControl,x
.c389	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/simple.asm

.c38a					UnaryParenthesis:
.c38a	20 c4 c1	jsr $c1c4			jsr 	EXPEvaluateExpressionAtX	; evaluate at stack level X
.c38d	20 ad c1	jsr $c1ad			jsr 	DereferenceTOS 				; dereference it.
.c390	4c e6 c8	jmp $c8e6			jmp 	ERRCheckRParen	 			; check )
.c393					DoUnaryFunction:
.c393	48		pha				pha
.c394	20 02 c2	jsr $c202			jsr 	EXPEvalNumber 				; one operand
.c397	68		pla				pla
.c398	20 3c c3	jsr $c33c			jsr 	DoMathCommand
.c39b	ad 02 ff	lda $ff02			lda 	ControlError
.c39e	d0 03		bne $c3a3			bne 	_DUFError
.c3a0	4c e6 c8	jmp $c8e6			jmp 	ERRCheckRParen 				; closing )
.c3a3					_DUFError:
.c3a3	a9 04		lda #$04		lda	#4
.c3a5	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c3a8					UnaryInt:
.c3a8	a9 11		lda #$11			lda 	#17 						; do appropriate command
.c3aa	80 e7		bra $c393			bra 	DoUnaryFunction
.c3ac					UnarySqr:
.c3ac	a9 12		lda #$12			lda 	#18 						; do appropriate command
.c3ae	80 e3		bra $c393			bra 	DoUnaryFunction
.c3b0					UnarySin:
.c3b0	a9 13		lda #$13			lda 	#19 						; do appropriate command
.c3b2	80 df		bra $c393			bra 	DoUnaryFunction
.c3b4					UnaryCos:
.c3b4	a9 14		lda #$14			lda 	#20 						; do appropriate command
.c3b6	80 db		bra $c393			bra 	DoUnaryFunction
.c3b8					UnaryTan:
.c3b8	a9 15		lda #$15			lda 	#21 						; do appropriate command
.c3ba	80 d7		bra $c393			bra 	DoUnaryFunction
.c3bc					UnaryATan:
.c3bc	a9 16		lda #$16			lda 	#22 						; do appropriate command
.c3be	80 d3		bra $c393			bra 	DoUnaryFunction
.c3c0					UnaryExp:
.c3c0	a9 17		lda #$17			lda 	#23 						; do appropriate command
.c3c2	80 cf		bra $c393			bra 	DoUnaryFunction
.c3c4					UnaryLog:
.c3c4	a9 18		lda #$18			lda 	#24 						; do appropriate command
.c3c6	80 cb		bra $c393			bra 	DoUnaryFunction
.c3c8					UnaryAbs:
.c3c8	a9 19		lda #$19			lda 	#25 						; do appropriate command
.c3ca	80 c7		bra $c393			bra 	DoUnaryFunction
.c3cc					UnarySgn:
.c3cc	a9 1a		lda #$1a			lda 	#26 						; do appropriate command
.c3ce	80 c3		bra $c393			bra 	DoUnaryFunction
.c3d0					UnaryRnd:
.c3d0	a9 1b		lda #$1b			lda 	#27 						; do appropriate command
.c3d2	80 bf		bra $c393			bra 	DoUnaryFunction
.c3d4					UnaryRand:
.c3d4	a9 1c		lda #$1c			lda 	#28 						; do appropriate command
.c3d6	80 bb		bra $c393			bra 	DoUnaryFunction

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/string.asm

.c3d8					EXPUnaryInlineString:
.c3d8	18		clc				clc 								; physical address -> TOS
.c3d9	98		tya				tya
.c3da	65 38		adc $38				adc 	codePtr
.c3dc	95 18		sta $18,x			sta 	XSNumber0,x
.c3de	a5 39		lda $39				lda 	codePtr+1
.c3e0	69 00		adc #$00			adc 	#0
.c3e2	95 20		sta $20,x			sta 	XSNumber1,x
.c3e4	74 28		stz $28,x			stz 	XSNumber2,x 				; fill in the rest & type
.c3e6	74 30		stz $30,x			stz 	XSNumber3,x
.c3e8	a9 80		lda #$80			lda 	#XS_STRING 					; make it a string.
.c3ea	95 10		sta $10,x			sta 	XSControl,x
.c3ec	98		tya				tya	 								; skip over it.
.c3ed	38		sec				sec
.c3ee	71 38		adc ($38),y			adc 	(codePtr),y
.c3f0	a8		tay				tay
.c3f1	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/arithmetic/unary/val.asm

.c3f2					EXPUnaryVal:
.c3f2	20 14 c4	jsr $c414			jsr 	EXPValBody 						; do the main bit.
.c3f5	d0 01		bne $c3f8			bne 	_EXPUVExit 						; check error.
.c3f7	60		rts				rts
.c3f8					_EXPUVExit:
.c3f8	a9 04		lda #$04		lda	#4
.c3fa	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c3fd					EXPUnaryIsVal:
.c3fd	20 14 c4	jsr $c414			jsr 	EXPValBody 						; do the main bit.
.c400	f0 05		beq $c407			beq 	EXPUnaryReturnMinus1 			; error code.
.c402					EXPUnaryReturnZero:
.c402	a9 00		lda #$00		 	lda 	#0 								; returns zerozero no error
.c404	4c 7f c3	jmp $c37f		 	jmp 	EXPUnaryReturnA
.c407					EXPUnaryReturnMinus1:
.c407	a9 ff		lda #$ff			lda 	#$FF 							; returns -1
.c409	95 18		sta $18,x			sta 	XSNumber0,x
.c40b	95 20		sta $20,x			sta 	XSNumber1,x
.c40d	95 28		sta $28,x			sta 	XSNumber2,x
.c40f	95 30		sta $30,x			sta 	XSNumber3,x
.c411	74 10		stz $10,x			stz 	XSControl,x
.c413	60		rts				rts
.c414					EXPValBody:
.c414	20 33 c2	jsr $c233			jsr 	EXPEvalString 					; string to R0, zTemp0
.c417	20 e6 c8	jsr $c8e6			jsr 	ERRCheckRParen 					; )
.c41a	a5 3e		lda $3e				lda 	zTemp0 							; copy address to offset 8/9
.c41c	8d 08 ff	sta $ff08			sta 	ControlCommand+8
.c41f	a5 3f		lda $3f				lda 	zTemp0+1
.c421	8d 09 ff	sta $ff09			sta 	ControlCommand+9
.c424	a9 21		lda #$21			lda 	#33
.c426	20 3c c3	jsr $c33c			jsr 	DoMathCommand
.c429	ad 02 ff	lda $ff02			lda 	ControlError 					; error occurred
.c42c	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/assert.asm

.c42d					Command_ASSERT:
.c42d	a2 00		ldx #$00			ldx 	#0
.c42f	20 02 c2	jsr $c202			jsr 	EXPEvalNumber 				; get a number to assert
.c432	20 3d c4	jsr $c43d			jsr 	CheckIfZero
.c435	f0 01		beq $c438			beq 	_CAFail 					; if so, the assert fails.
.c437	60		rts				rts
.c438					_CAFail:
.c438	a9 05		lda #$05		lda	#5
.c43a	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c43d					CheckIfZero:
.c43d	b5 10		lda $10,x			lda 	XSControl,x
.c43f	d0 09		bne $c44a			bne 	_CAType
.c441	b5 18		lda $18,x			lda 	XSNumber0,x
.c443	15 20		ora $20,x			ora 	XSNumber1,x
.c445	15 28		ora $28,x			ora 	XSNumber2,x
.c447	15 30		ora $30,x			ora 	XSNumber3,x
.c449	60		rts				rts
.c44a					_CAType:
.c44a	a9 02		lda #$02		lda	#2
.c44c	4c f8 c9	jmp $c9f8		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/commands/clear.asm

.c44f					Command_CLEAR:
.c44f	4c 52 c4	jmp $c452			jmp 	ClearCode
.c452					ClearCode:
.c452	a9 c0		lda #$c0			lda 	#HIGHMEMORY >> 8 			; reset the stack.
.c454	20 70 c9	jsr $c970			jsr 	StackReset
.c457	20 84 c9	jsr $c984			jsr 	StringSystemInitialise
.c45a	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/comment.asm

.c45b					Command_Comment:
.c45b	b1 38		lda ($38),y			lda 	(codePtr),y 				; optional string parameter
.c45d	c9 80		cmp #$80			cmp 	#KWD_SYS_STR
.c45f	d0 06		bne $c467			bne 	_CRExit
.c461	c8		iny				iny 								; skip over it, it's a comment.
.c462	98		tya				tya
.c463	38		sec				sec
.c464	71 38		adc ($38),y			adc 	(codePtr),y
.c466	a8		tay				tay
.c467					_CRExit:
.c467	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/commands/inputprint.asm

.c468					Command_Input:
.c468	a9 ff		lda #$ff			lda 	#$FF 						; this flag determines input ($FF) output $(00)
.c46a	8d 02 02	sta $0202			sta 	InputFlag
.c46d	80 03		bra $c472			bra 	Command_IP_Main
.c46f					Command_Print:
.c46f	9c 02 02	stz $0202			stz 	InputFlag
.c472					Command_IP_Main:
.c472	18		clc				clc 								; carry being clear means last print wasn't comma/semicolon
.c473					_CPLoop:
.c473	08		php				php 								; save "last action" flag
.c474	b1 38		lda ($38),y			lda 	(codePtr),y 				; get next character
.c476	c9 c0		cmp #$c0			cmp  	#KWD_SYS_END 				; end of line or colon, exit now.
.c478	f0 41		beq $c4bb			beq 	_CPExit 					; without consuming
.c47a	c9 cd		cmp #$cd			cmp 	#KWD_COLON
.c47c	f0 3d		beq $c4bb			beq 	_CPExit
.c47e	68		pla				pla 								; throw last action flag
.c47f	b1 38		lda ($38),y			lda 	(codePtr),y 				; next character and consume
.c481	c8		iny				iny
.c482	c9 cc		cmp #$cc			cmp 	#KWD_SEMICOLON				; is it a semicolon (syntax seperator)
.c484	f0 32		beq $c4b8			beq 	_CPContinueWithSameLine
.c486	c9 cb		cmp #$cb			cmp 	#KWD_COMMA 					; comma (tab)
.c488	f0 29		beq $c4b3			beq 	_CPTab
.c48a	88		dey				dey 								; undo the get.
.c48b	2c 02 02	bit $0202			bit 	InputFlag 					; check for Input
.c48e	10 0b		bpl $c49b			bpl	 	_CPNotInput
.c490	29 c0		and #$c0			and 	#$C0 						; check 40-7F e.g. an identifier.
.c492	c9 40		cmp #$40			cmp 	#$40
.c494	d0 05		bne $c49b			bne 	_CPNotInput
.c496	20 c4 c4	jsr $c4c4			jsr 	_CPInputCode 				; input code
.c499	80 d7		bra $c472			bra 	Command_IP_Main 			; and go round again.
.c49b					_CPNotInput:
.c49b	20 c2 c1	jsr $c1c2			jsr 	EXPEvaluateExpressionAt0 	; evaluate expression.
.c49e	34 10		bit $10,x			bit 	XSControl,x 				; is it a number ?
.c4a0	10 0d		bpl $c4af			bpl 	_CPNumber
.c4a2	5a		phy				phy
.c4a3	18		clc				clc 								; string address to YA
.c4a4	b5 20		lda $20,x			lda 	XSNumber1,x
.c4a6	a8		tay				tay
.c4a7	b5 18		lda $18,x			lda 	XSNumber0,x
.c4a9	20 c4 c4	jsr $c4c4			jsr 	CPPrintYA 					; print YA
.c4ac	7a		ply				ply
.c4ad	80 c3		bra $c472			bra 	Command_IP_Main 			; loop round clearing carry so NL if end
.c4af					_CPNumber:
.c4af	5a		phy				phy
.c4b0	7a		ply				ply
.c4b1	80 bf		bra $c472			bra 	Command_IP_Main				; loop round clearing carry so NL if end
.c4b3					_CPTab:
.c4b3	a9 09		lda #$09			lda 	#9 							; print TAB
.c4b5	20 da c4	jsr $c4da			jsr 	CPPrintA
.c4b8					_CPContinueWithSameLine:
.c4b8	38		sec				sec 								; loop round with carry set, which
.c4b9	80 b8		bra $c473			bra 	_CPLoop 					; will inhibit final CR
.c4bb					_CPExit:
.c4bb	28		plp				plp 								; get last action flag
.c4bc	b0 05		bcs $c4c3			bcs 	_CPExit2  					; carry set, last was semicolon or comma
.c4be	a9 0d		lda #$0d			lda 	#13 						; print new line
.c4c0	20 da c4	jsr $c4da			jsr 	CPPrintA
.c4c3					_CPExit2:
.c4c3	60		rts				rts
.c4c4					_CPInputCode:
.c4c4					CPPrintYA:
.c4c4	85 3e		sta $3e				sta 	zTemp0
.c4c6	84 3f		sty $3f				sty 	zTemp0+1
.c4c8	b2 3e		lda ($3e)			lda 	(zTemp0)
.c4ca	aa		tax				tax
.c4cb	f0 0b		beq $c4d8			beq 	_CPPrintExit
.c4cd	a0 01		ldy #$01			ldy 	#1
.c4cf					_CPPrintAYXLoop:
.c4cf	b1 3e		lda ($3e),y			lda 	(zTemp0),y
.c4d1	20 da c4	jsr $c4da			jsr 	CPPrintA
.c4d4	c8		iny				iny
.c4d5	ca		dex				dex
.c4d6	d0 f7		bne $c4cf			bne 	_CPPrintAYXLoop
.c4d8					_CPPrintExit:
.c4d8	60		rts				rts
.c4d9					CPInputA:
>c4d9	03						.byte 	3
.c4da					CPPrintA:
.c4da	4c f1 ff	jmp $fff1			jmp 	WriteCharacter

;******  Return to file: _include.inc


;******  Processing file: sources/commands/new.asm

.c4dd					Command_NEW:
.c4dd	9c 00 ca	stz $ca00			stz 	Program 					; Erase current program
.c4e0	20 52 c4	jsr $c452			jsr 	ClearCode 					; Run CLR
.c4e3	4c 39 c5	jmp $c539			jmp 	Command_END 				; Run END

;******  Return to file: _include.inc


;******  Processing file: sources/commands/run.asm

.c4e6					Command_RUN:
.c4e6	20 52 c4	jsr $c452			jsr 	ClearCode					; clear everything out.
.c4e9	ad 00 ca	lda $ca00			lda 	Program 					; back to the program start, get the count of var pages.
.c4ec	18		clc				clc 								; make an actual address.
.c4ed	69 ca		adc #$ca			adc 	#(Program >> 8)
.c4ef	85 39		sta $39				sta 	codePtr+1
.c4f1	64 38		stz $38				stz 	codePtr
.c4f3	80 0b		bra $c500			bra 	RUNNewLine
.c4f5					RUNEndOfLine:
.c4f5	18		clc				clc 								; advance to next line.
.c4f6	b2 38		lda ($38)			lda 	(codePtr)
.c4f8	65 38		adc $38				adc 	codePtr
.c4fa	85 38		sta $38				sta 	codePtr
.c4fc	90 02		bcc $c500			bcc 	_RELNoCarry
.c4fe	e6 39		inc $39				inc 	codePtr+1
.c500					_RELNoCarry:
.c500					RUNNewLine:
.c500	a2 ff		ldx #$ff			ldx 	#$FF 						; 6502 stack reset.
.c502	9a		txs				txs
.c503	b2 38		lda ($38)			lda 	(codePtr) 					; check off end of program
.c505	f0 32		beq $c539			beq 	Command_END
.c507	a0 01		ldy #$01			ldy 	#1 							; copy error line#
.c509	b1 38		lda ($38),y			lda 	(codePtr),y
.c50b	8d 00 02	sta $0200			sta 	ERRLine
.c50e	c8		iny				iny
.c50f	b1 38		lda ($38),y			lda 	(codePtr),y
.c511	8d 01 02	sta $0201			sta 	ERRLine+1
.c514	c8		iny				iny 								; offset into codePtr for start of line.
.c515					RUNNewCommand:
.c515	9c 03 02	stz $0203			stz 	stringInitialised 			; reset string system flag.
.c518					_RNCNoCheck:
.c518	b1 38		lda ($38),y			lda 	(codePtr),y 				; get next token
.c51a	10 1d		bpl $c539			bpl		_RUNNotToken 				; probably an identifier
.c51c	c8		iny				iny 								; consume token
.c51d	c9 cd		cmp #$cd			cmp 	#KWD_COLON 					; fast skip colon
.c51f	f0 f4		beq $c515			beq 	RUNNewCommand
.c521	c9 b0		cmp #$b0			cmp 	#$B0 				 		; check unary function ?
.c523	90 0a		bcc $c52f			bcc 	_RUNSyntax
.c525	0a		asl a				asl 	a 							; double into X.
.c526	aa		tax				tax
.c527	20 2c c5	jsr $c52c			jsr 	_RUNDispatchMain			; call the main dispatcher
.c52a	80 e9		bra $c515			bra 	RUNNewCommand
.c52c					_RUNDispatchMain:
.c52c	7c 2c c8	jmp ($c82c,x)			jmp 	(StandardVectorTable,x)
.c52f					_RUNSyntax:
.c52f	a9 01		lda #$01		lda	#1
.c531	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c534					_RUNBreak:
.c534	a9 06		lda #$06		lda	#6
.c536	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c539					_RUNNotToken:
.c539					Command_END:
.c539	4c ef c9	jmp $c9ef			jmp 	WarmStart
.c53c					Command_Shift1_Handler:
.c53c	b1 38		lda ($38),y			lda 	(codePtr),y 				; get token shifted
.c53e	c8		iny				iny
.c53f	0a		asl a				asl 	a 							; double into X
.c540	aa		tax				tax
.c541	7c 10 c8	jmp ($c810,x)			jmp 	(ExtendedVectorTable,x) 	; and go there.

;******  Return to file: _include.inc


;******  Processing file: sources/commands/stop.asm

.c544					Command_STOP:
.c544	a9 07		lda #$07		lda	#7
.c546	4c f8 c9	jmp $c9f8		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/commands/sys.asm

.c549					Command_Sys:
.c549	a2 00		ldx #$00			ldx 	#0
.c54b	20 1f c2	jsr $c21f			jsr 	EXPEvalInteger16 			; execution address
.c54e	5a		phy				phy
.c54f	b5 18		lda $18,x			lda 	XSNumber0,x 				; copy address into subroutine call.
.c551	8d 5a c5	sta $c55a			sta 	_SysCall+1
.c554	b5 20		lda $20,x			lda 	XSNumber1,x
.c556	8d 5b c5	sta $c55b			sta 	_SysCall+2
.c559					_SysCall:
.c559	20 ff ff	jsr $ffff			jsr 	$FFFF 						; call the code
.c55c	7a		ply				ply
.c55d	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/generated/errors.asm

.c55e					ErrorMessageText:
>c55e	73 79 6e 74 61 78 20 65			.text	"syntax error",0
>c566	72 72 6f 72 00
>c56b	74 79 70 65 20 6d 69 73			.text	"type mismatch error",0
>c573	6d 61 74 63 68 20 65 72 72 6f 72 00
>c57f	64 69 76 69 73 69 6f 6e			.text	"division by zero error",0
>c587	20 62 79 20 7a 65 72 6f 20 65 72 72 6f 72 00
>c596	6f 75 74 20 6f 66 20 72			.text	"out of range error",0
>c59e	61 6e 67 65 20 65 72 72 6f 72 00
>c5a9	61 73 73 65 72 74 20 66			.text	"assert failed",0
>c5b1	61 69 6c 65 64 00
>c5b7	62 72 65 61 6b 20 70 72			.text	"break pressed",0
>c5bf	65 73 73 65 64 00
>c5c5	70 72 6f 67 72 61 6d 20			.text	"program stopped",0
>c5cd	73 74 6f 70 70 65 64 00
>c5d5	73 74 72 75 63 74 75 72			.text	"structure imbalance",0
>c5dd	65 20 69 6d 62 61 6c 61 6e 63 65 00
>c5e9	6f 75 74 20 6f 66 20 73			.text	"out of stack space.",0
>c5f1	74 61 63 6b 20 73 70 61 63 65 2e 00
>c5fd	6f 75 74 20 6f 66 20 73			.text	"out of string memory.",0
>c605	74 72 69 6e 67 20 6d 65 6d 6f 72 79 2e 00

;******  Return to file: _include.inc


;******  Processing file: sources/generated/kwdtext.asm

.c613					BinaryTokenText:
>c613	01 ab					.byte	$01,$ab                       	; $ 20 +
>c615	01 ad					.byte	$01,$ad                       	; $ 21 -
>c617	01 aa					.byte	$01,$aa                       	; $ 22 *
>c619	01 af					.byte	$01,$af                       	; $ 23 /
>c61b	02 3e be				.byte	$02,$3e,$be                   	; $ 24 >>
>c61e	02 3c bc				.byte	$02,$3c,$bc                   	; $ 25 <<
>c621	01 a5					.byte	$01,$a5                       	; $ 26 %
>c623	01 dc					.byte	$01,$dc                       	; $ 27 \
>c625	01 a6					.byte	$01,$a6                       	; $ 28 &
>c627	01 fc					.byte	$01,$fc                       	; $ 29 |
>c629	01 de					.byte	$01,$de                       	; $ 2a ^
>c62b	01 be					.byte	$01,$be                       	; $ 2b >
>c62d	02 3e bd				.byte	$02,$3e,$bd                   	; $ 2c >=
>c630	01 bc					.byte	$01,$bc                       	; $ 2d <
>c632	02 3c bd				.byte	$02,$3c,$bd                   	; $ 2e <=
>c635	02 3c be				.byte	$02,$3c,$be                   	; $ 2f <>
>c638	01 bd					.byte	$01,$bd                       	; $ 30 =
>c63a	01 a1					.byte	$01,$a1                       	; $ 31 !
>c63c	01 bf					.byte	$01,$bf                       	; $ 32 ?
>c63e	ff					.byte	$FF
.c63f					BaseTokenText:
>c63f	00					.byte	$00                           	; $ 80
>c640	01 a4					.byte	$01,$a4                       	; $ 81 $
>c642	01 a8					.byte	$01,$a8                       	; $ 82 (
>c644	05 52 41 4e 44 a8			.byte	$05,$52,$41,$4e,$44,$a8       	; $ 83 RAND(
>c64a	04 52 4e 44 a8				.byte	$04,$52,$4e,$44,$a8           	; $ 84 RND(
>c64f	06 49 53 56 41 4c a8			.byte	$06,$49,$53,$56,$41,$4c,$a8   	; $ 85 ISVAL(
>c656	04 49 4e 54 a8				.byte	$04,$49,$4e,$54,$a8           	; $ 86 INT(
>c65b	04 54 49 4d c5				.byte	$04,$54,$49,$4d,$c5           	; $ 87 TIME
>c660	06 45 56 45 4e 54 a8			.byte	$06,$45,$56,$45,$4e,$54,$a8   	; $ 88 EVENT(
>c667	07 49 4e 4b 45 59 24 a8			.byte	$07,$49,$4e,$4b,$45,$59,$24,$a8	; $ 89 INKEY$(
>c66f	04 41 53 43 a8				.byte	$04,$41,$53,$43,$a8           	; $ 8a ASC(
>c674	05 43 48 52 24 a8			.byte	$05,$43,$48,$52,$24,$a8       	; $ 8b CHR$(
>c67a	04 53 51 52 a8				.byte	$04,$53,$51,$52,$a8           	; $ 8c SQR(
>c67f	04 4c 45 4e a8				.byte	$04,$4c,$45,$4e,$a8           	; $ 8d LEN(
>c684	04 41 42 53 a8				.byte	$04,$41,$42,$53,$a8           	; $ 8e ABS(
>c689	04 53 47 4e a8				.byte	$04,$53,$47,$4e,$a8           	; $ 8f SGN(
>c68e	04 56 41 4c a8				.byte	$04,$56,$41,$4c,$a8           	; $ 90 VAL(
>c693	05 53 54 52 24 a8			.byte	$05,$53,$54,$52,$24,$a8       	; $ 91 STR$(
>c699	05 4d 49 44 24 a8			.byte	$05,$4d,$49,$44,$24,$a8       	; $ 92 MID$(
>c69f	06 4c 45 46 54 24 a8			.byte	$06,$4c,$45,$46,$54,$24,$a8   	; $ 93 LEFT$(
>c6a6	07 52 49 47 48 54 24 a8			.byte	$07,$52,$49,$47,$48,$54,$24,$a8	; $ 94 RIGHT$(
>c6ae	04 53 49 4e a8				.byte	$04,$53,$49,$4e,$a8           	; $ 95 SIN(
>c6b3	04 43 4f 53 a8				.byte	$04,$43,$4f,$53,$a8           	; $ 96 COS(
>c6b8	04 54 41 4e a8				.byte	$04,$54,$41,$4e,$a8           	; $ 97 TAN(
>c6bd	05 41 54 41 4e a8			.byte	$05,$41,$54,$41,$4e,$a8       	; $ 98 ATAN(
>c6c3	04 4c 4f 47 a8				.byte	$04,$4c,$4f,$47,$a8           	; $ 99 LOG(
>c6c8	04 45 58 50 a8				.byte	$04,$45,$58,$50,$a8           	; $ 9a EXP(
>c6cd	04 4b 45 59 a8				.byte	$04,$4b,$45,$59,$a8           	; $ 9b KEY(
>c6d2	00					.byte	$00                           	; $ 9c
>c6d3	00					.byte	$00                           	; $ 9d
>c6d4	00					.byte	$00                           	; $ 9e
>c6d5	00					.byte	$00                           	; $ 9f
>c6d6	00					.byte	$00                           	; $ a0
>c6d7	00					.byte	$00                           	; $ a1
>c6d8	00					.byte	$00                           	; $ a2
>c6d9	00					.byte	$00                           	; $ a3
>c6da	00					.byte	$00                           	; $ a4
>c6db	00					.byte	$00                           	; $ a5
>c6dc	00					.byte	$00                           	; $ a6
>c6dd	00					.byte	$00                           	; $ a7
>c6de	00					.byte	$00                           	; $ a8
>c6df	00					.byte	$00                           	; $ a9
>c6e0	00					.byte	$00                           	; $ aa
>c6e1	00					.byte	$00                           	; $ ab
>c6e2	00					.byte	$00                           	; $ ac
>c6e3	00					.byte	$00                           	; $ ad
>c6e4	00					.byte	$00                           	; $ ae
>c6e5	00					.byte	$00                           	; $ af
>c6e6	05 57 48 49 4c c5			.byte	$05,$57,$48,$49,$4c,$c5       	; $ b0 WHILE
>c6ec	04 57 45 4e c4				.byte	$04,$57,$45,$4e,$c4           	; $ b1 WEND
>c6f1	02 49 c6				.byte	$02,$49,$c6                   	; $ b2 IF
>c6f4	05 45 4e 44 49 c6			.byte	$05,$45,$4e,$44,$49,$c6       	; $ b3 ENDIF
>c6fa	02 44 cf				.byte	$02,$44,$cf                   	; $ b4 DO
>c6fd	04 4c 4f 4f d0				.byte	$04,$4c,$4f,$4f,$d0           	; $ b5 LOOP
>c702	06 52 45 50 45 41 d4			.byte	$06,$52,$45,$50,$45,$41,$d4   	; $ b6 REPEAT
>c709	05 55 4e 54 49 cc			.byte	$05,$55,$4e,$54,$49,$cc       	; $ b7 UNTIL
>c70f	04 50 52 4f c3				.byte	$04,$50,$52,$4f,$c3           	; $ b8 PROC
>c714	07 45 4e 44 50 52 4f c3			.byte	$07,$45,$4e,$44,$50,$52,$4f,$c3	; $ b9 ENDPROC
>c71c	03 46 4f d2				.byte	$03,$46,$4f,$d2               	; $ ba FOR
>c720	04 4e 45 58 d4				.byte	$04,$4e,$45,$58,$d4           	; $ bb NEXT
>c725	04 43 41 53 c5				.byte	$04,$43,$41,$53,$c5           	; $ bc CASE
>c72a	07 45 4e 44 43 41 53 c5			.byte	$07,$45,$4e,$44,$43,$41,$53,$c5	; $ bd ENDCASE
>c732	00					.byte	$00                           	; $ be
>c733	04 54 48 45 ce				.byte	$04,$54,$48,$45,$ce           	; $ bf THEN
>c738	00					.byte	$00                           	; $ c0
>c739	00					.byte	$00                           	; $ c1
>c73a	00					.byte	$00                           	; $ c2
>c73b	00					.byte	$00                           	; $ c3
>c73c	02 54 cf				.byte	$02,$54,$cf                   	; $ c4 TO
>c73f	03 4c 45 d4				.byte	$03,$4c,$45,$d4               	; $ c5 LET
>c743	05 50 52 49 4e d4			.byte	$05,$50,$52,$49,$4e,$d4       	; $ c6 PRINT
>c749	05 49 4e 50 55 d4			.byte	$05,$49,$4e,$50,$55,$d4       	; $ c7 INPUT
>c74f	04 43 41 4c cc				.byte	$04,$43,$41,$4c,$cc           	; $ c8 CALL
>c754	03 53 59 d3				.byte	$03,$53,$59,$d3               	; $ c9 SYS
>c758	04 45 58 49 d4				.byte	$04,$45,$58,$49,$d4           	; $ ca EXIT
>c75d	01 ac					.byte	$01,$ac                       	; $ cb ,
>c75f	01 bb					.byte	$01,$bb                       	; $ cc ;
>c761	01 ba					.byte	$01,$ba                       	; $ cd :
>c763	01 a7					.byte	$01,$a7                       	; $ ce '
>c765	01 a9					.byte	$01,$a9                       	; $ cf )
>c767	04 52 45 41 c4				.byte	$04,$52,$45,$41,$c4           	; $ d0 READ
>c76c	04 44 41 54 c1				.byte	$04,$44,$41,$54,$c1           	; $ d1 DATA
>c771	01 db					.byte	$01,$db                       	; $ d2 [
>c773	01 dd					.byte	$01,$dd                       	; $ d3 ]
>c775	01 a3					.byte	$01,$a3                       	; $ d4 #
>c777	01 ae					.byte	$01,$ae                       	; $ d5 .
>c779	04 45 4c 53 c5				.byte	$04,$45,$4c,$53,$c5           	; $ d6 ELSE
>c77e	04 57 48 45 ce				.byte	$04,$57,$48,$45,$ce           	; $ d7 WHEN
>c783	06 44 4f 57 4e 54 cf			.byte	$06,$44,$4f,$57,$4e,$54,$cf   	; $ d8 DOWNTO
>c78a	ff					.byte	$FF
.c78b					Shift1TokenText:
>c78b	05 43 4c 45 41 d2			.byte	$05,$43,$4c,$45,$41,$d2       	; $180 CLEAR
>c791	03 4e 45 d7				.byte	$03,$4e,$45,$d7               	; $181 NEW
>c795	03 52 55 ce				.byte	$03,$52,$55,$ce               	; $182 RUN
>c799	04 53 54 4f d0				.byte	$04,$53,$54,$4f,$d0           	; $183 STOP
>c79e	03 45 4e c4				.byte	$03,$45,$4e,$c4               	; $184 END
>c7a2	06 41 53 53 45 52 d4			.byte	$06,$41,$53,$53,$45,$52,$d4   	; $185 ASSERT
>c7a9	04 4c 49 53 d4				.byte	$04,$4c,$49,$53,$d4           	; $186 LIST
>c7ae	04 53 41 56 c5				.byte	$04,$53,$41,$56,$c5           	; $187 SAVE
>c7b3	04 4c 4f 41 c4				.byte	$04,$4c,$4f,$41,$c4           	; $188 LOAD
>c7b8	05 47 4f 53 55 c2			.byte	$05,$47,$4f,$53,$55,$c2       	; $189 GOSUB
>c7be	04 47 4f 54 cf				.byte	$04,$47,$4f,$54,$cf           	; $18a GOTO
>c7c3	06 52 45 54 55 52 ce			.byte	$06,$52,$45,$54,$55,$52,$ce   	; $18b RETURN
>c7ca	07 52 45 53 54 4f 52 c5			.byte	$07,$52,$45,$53,$54,$4f,$52,$c5	; $18c RESTORE
>c7d2	03 44 49 cd				.byte	$03,$44,$49,$cd               	; $18d DIM
>c7d6	ff					.byte	$FF
.c7d7					BinaryPrecedence:
>c7d7	03					.byte	3		; +
>c7d8	03					.byte	3		; -
>c7d9	04					.byte	4		; *
>c7da	04					.byte	4		; /
>c7db	04					.byte	4		; >>
>c7dc	04					.byte	4		; <<
>c7dd	04					.byte	4		; %
>c7de	04					.byte	4		; \
>c7df	01					.byte	1		; &
>c7e0	01					.byte	1		; |
>c7e1	01					.byte	1		; ^
>c7e2	02					.byte	2		; >
>c7e3	02					.byte	2		; >=
>c7e4	02					.byte	2		; <
>c7e5	02					.byte	2		; <=
>c7e6	02					.byte	2		; <>
>c7e7	02					.byte	2		; =
>c7e8	05					.byte	5		; !
>c7e9	05					.byte	5		; ?

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_binary.asm

.c7ea					BinaryVectorTable:
>c7ea	57 c1					.word	BinaryAdd                ; $20 +
>c7ec	64 c1					.word	BinaryMinus              ; $21 -
>c7ee	71 c1					.word	BinaryTimes              ; $22 *
>c7f0	7e c1					.word	BinaryFDiv               ; $23 /
>c7f2	cd c0					.word	BinaryShiftRight         ; $24 >>
>c7f4	ca c0					.word	BinaryShiftLeft          ; $25 <<
>c7f6	a1 c1					.word	BinaryModulus            ; $26 %
>c7f8	95 c1					.word	BinaryUDiv               ; $27 \
>c7fa	67 c0					.word	BinaryAnd                ; $28 &
>c7fc	a9 c0					.word	BinaryOr                 ; $29 |
>c7fe	88 c0					.word	BinaryXor                ; $2a ^
>c800	2b c0					.word	CMPCompareGreater        ; $2b >
>c802	46 c0					.word	CMPCompareGreaterEqual   ; $2c >=
>c804	22 c0					.word	CMPCompareLess           ; $2d <
>c806	3d c0					.word	CMPCompareLessEqual      ; $2e <=
>c808	34 c0					.word	CMPCompareNotEqual       ; $2f <>
>c80a	19 c0					.word	CMPCompareEqual          ; $30 =
>c80c	0d c1					.word	BinRefWord               ; $31 !
>c80e	11 c1					.word	BinRefByte               ; $32 ?

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_extended.asm

.c810					ExtendedVectorTable:
>c810	4f c4					.word	Command_CLEAR            ; $180 clear
>c812	dd c4					.word	Command_NEW              ; $181 new
>c814	e6 c4					.word	Command_RUN              ; $182 run
>c816	44 c5					.word	Command_STOP             ; $183 stop
>c818	39 c5					.word	Command_END              ; $184 end
>c81a	2d c4					.word	Command_ASSERT           ; $185 assert
>c81c	f6 c9					.word	Unimplemented            ; $186 list
>c81e	f6 c9					.word	Unimplemented            ; $187 save
>c820	f6 c9					.word	Unimplemented            ; $188 load
>c822	f6 c9					.word	Unimplemented            ; $189 gosub
>c824	f6 c9					.word	Unimplemented            ; $18a goto
>c826	f6 c9					.word	Unimplemented            ; $18b return
>c828	f6 c9					.word	Unimplemented            ; $18c restore
>c82a	f6 c9					.word	Unimplemented            ; $18d dim

;******  Return to file: _include.inc


;******  Processing file: sources/generated/vectors_standard.asm

.c82c					StandardVectorTable:
>c82c	d8 c3					.word	EXPUnaryInlineString     ; $80 !!str
>c82e	73 c3					.word	EXPUnaryNull             ; $81 $
>c830	8a c3					.word	UnaryParenthesis         ; $82 (
>c832	d4 c3					.word	UnaryRand                ; $83 rand(
>c834	d0 c3					.word	UnaryRnd                 ; $84 rnd(
>c836	fd c3					.word	EXPUnaryIsVal            ; $85 isval(
>c838	a8 c3					.word	UnaryInt                 ; $86 int(
>c83a	f6 c9					.word	Unimplemented            ; $87 time
>c83c	f6 c9					.word	Unimplemented            ; $88 event(
>c83e	f6 c9					.word	Unimplemented            ; $89 inkey$(
>c840	60 c3					.word	EXPUnaryAsc              ; $8a asc(
>c842	f6 c9					.word	Unimplemented            ; $8b chr$(
>c844	ac c3					.word	UnarySqr                 ; $8c sqr(
>c846	77 c3					.word	EXPUnaryLen              ; $8d len(
>c848	c8 c3					.word	UnaryAbs                 ; $8e abs(
>c84a	cc c3					.word	UnarySgn                 ; $8f sgn(
>c84c	f2 c3					.word	EXPUnaryVal              ; $90 val(
>c84e	f6 c9					.word	Unimplemented            ; $91 str$(
>c850	f6 c9					.word	Unimplemented            ; $92 mid$(
>c852	f6 c9					.word	Unimplemented            ; $93 left$(
>c854	f6 c9					.word	Unimplemented            ; $94 right$(
>c856	b0 c3					.word	UnarySin                 ; $95 sin(
>c858	b4 c3					.word	UnaryCos                 ; $96 cos(
>c85a	b8 c3					.word	UnaryTan                 ; $97 tan(
>c85c	bc c3					.word	UnaryATan                ; $98 atan(
>c85e	c4 c3					.word	UnaryLog                 ; $99 log(
>c860	c0 c3					.word	UnaryExp                 ; $9a exp(
>c862	f6 c9					.word	Unimplemented            ; $9b key(
>c864	f6 c9					.word	Unimplemented            ; $9c
>c866	f6 c9					.word	Unimplemented            ; $9d
>c868	f6 c9					.word	Unimplemented            ; $9e
>c86a	f6 c9					.word	Unimplemented            ; $9f
>c86c	f6 c9					.word	Unimplemented            ; $a0
>c86e	f6 c9					.word	Unimplemented            ; $a1
>c870	f6 c9					.word	Unimplemented            ; $a2
>c872	f6 c9					.word	Unimplemented            ; $a3
>c874	f6 c9					.word	Unimplemented            ; $a4
>c876	f6 c9					.word	Unimplemented            ; $a5
>c878	f6 c9					.word	Unimplemented            ; $a6
>c87a	f6 c9					.word	Unimplemented            ; $a7
>c87c	f6 c9					.word	Unimplemented            ; $a8
>c87e	f6 c9					.word	Unimplemented            ; $a9
>c880	f6 c9					.word	Unimplemented            ; $aa
>c882	f6 c9					.word	Unimplemented            ; $ab
>c884	f6 c9					.word	Unimplemented            ; $ac
>c886	f6 c9					.word	Unimplemented            ; $ad
>c888	f6 c9					.word	Unimplemented            ; $ae
>c88a	f6 c9					.word	Unimplemented            ; $af
>c88c	f6 c9					.word	Unimplemented            ; $b0 while
>c88e	f6 c9					.word	Unimplemented            ; $b1 wend
>c890	f6 c9					.word	Unimplemented            ; $b2 if
>c892	f6 c9					.word	Unimplemented            ; $b3 endif
>c894	f6 c9					.word	Unimplemented            ; $b4 do
>c896	f6 c9					.word	Unimplemented            ; $b5 loop
>c898	f6 c9					.word	Unimplemented            ; $b6 repeat
>c89a	f6 c9					.word	Unimplemented            ; $b7 until
>c89c	f6 c9					.word	Unimplemented            ; $b8 proc
>c89e	f6 c9					.word	Unimplemented            ; $b9 endproc
>c8a0	f6 c9					.word	Unimplemented            ; $ba for
>c8a2	f6 c9					.word	Unimplemented            ; $bb next
>c8a4	f6 c9					.word	Unimplemented            ; $bc case
>c8a6	f6 c9					.word	Unimplemented            ; $bd endcase
>c8a8	f6 c9					.word	Unimplemented            ; $be !!un1
>c8aa	f6 c9					.word	Unimplemented            ; $bf then
>c8ac	f5 c4					.word	RUNEndOfLine             ; $c0 !!end
>c8ae	3c c5					.word	Command_Shift1_Handler   ; $c1 !!sh1
>c8b0	f6 c9					.word	Unimplemented            ; $c2 !!sh2
>c8b2	f6 c9					.word	Unimplemented            ; $c3 !!dec
>c8b4	f6 c9					.word	Unimplemented            ; $c4 to
>c8b6	f6 c9					.word	Unimplemented            ; $c5 let
>c8b8	6f c4					.word	Command_Print            ; $c6 print
>c8ba	68 c4					.word	Command_Input            ; $c7 input
>c8bc	f6 c9					.word	Unimplemented            ; $c8 call
>c8be	49 c5					.word	Command_Sys              ; $c9 sys
>c8c0	f6 c9					.word	Unimplemented            ; $ca exit
>c8c2	f6 c9					.word	Unimplemented            ; $cb ,
>c8c4	f6 c9					.word	Unimplemented            ; $cc ;
>c8c6	f6 c9					.word	Unimplemented            ; $cd :
>c8c8	5b c4					.word	Command_Comment          ; $ce '
>c8ca	f6 c9					.word	Unimplemented            ; $cf )
>c8cc	f6 c9					.word	Unimplemented            ; $d0 read
>c8ce	f6 c9					.word	Unimplemented            ; $d1 data
>c8d0	f6 c9					.word	Unimplemented            ; $d2 [
>c8d2	f6 c9					.word	Unimplemented            ; $d3 ]
>c8d4	f6 c9					.word	Unimplemented            ; $d4 #
>c8d6	f6 c9					.word	Unimplemented            ; $d5 .
>c8d8	f6 c9					.word	Unimplemented            ; $d6 else
>c8da	f6 c9					.word	Unimplemented            ; $d7 when
>c8dc	f6 c9					.word	Unimplemented            ; $d8 downto

;******  Return to file: _include.inc


;******  Processing file: sources/support/errors/syntax.asm

.c8de					ERRCheckLParen:
.c8de	b1 38		lda ($38),y			lda 	(CodePtr),y
.c8e0	c9 82		cmp #$82			cmp 	#KWD_LPAREN
.c8e2	d0 18		bne $c8fc			bne 	ERRSyntaxError
.c8e4	c8		iny				iny
.c8e5	60		rts				rts
.c8e6					ERRCheckRParen:
.c8e6	b1 38		lda ($38),y			lda 	(CodePtr),y
.c8e8	c9 cf		cmp #$cf			cmp 	#KWD_RPAREN
.c8ea	d0 10		bne $c8fc			bne 	ERRSyntaxError
.c8ec	c8		iny				iny
.c8ed	60		rts				rts
.c8ee					ERRCheckComma:
.c8ee	b1 38		lda ($38),y			lda 	(CodePtr),y
.c8f0	c9 cb		cmp #$cb			cmp 	#KWD_COMMA
.c8f2	d0 08		bne $c8fc			bne 	ERRSyntaxError
.c8f4	c8		iny				iny
.c8f5	60		rts				rts
.c8f6					ERRCheckA:
.c8f6	d1 38		cmp ($38),y			cmp 	(codePtr),y
.c8f8	d0 02		bne $c8fc			bne 	ERRSyntaxError
.c8fa	c8		iny				iny
.c8fb	60		rts				rts
.c8fc					ERRSyntaxError:
.c8fc	a9 01		lda #$01		lda	#1
.c8fe	4c f8 c9	jmp $c9f8		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/support/stack/bytes.asm

.c901					StackPushByte:
.c901	48		pha				pha 								; save byte on stack
.c902	a5 3a		lda $3a				lda 	basicStack 					; decrement basic stack pointer
.c904	d0 02		bne $c908			bne 	_SPBNoBorrow
.c906	c6 3b		dec $3b				dec 	basicStack+1 				; borrow
.c908					_SPBNoBorrow:
.c908	c6 3a		dec $3a				dec 	basicStack
.c90a	68		pla				pla 								; get back and write
.c90b	92 3a		sta ($3a)			sta 	(basicStack)
.c90d	60		rts				rts
.c90e					StackPopByte:
.c90e	b2 3a		lda ($3a)			lda 	(basicStack) 				; bump the stack pointer.
.c910	e6 3a		inc $3a				inc 	basicStack
.c912	d0 02		bne $c916			bne 	_SPBNoCarry
.c914	e6 3b		inc $3b				inc 	basicStack+1
.c916					_SPBNoCarry:
.c916	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/support/stack/frames.asm

.c917					StackOpen:
.c917	48		pha				pha 								; save frame byte
.c918	29 0f		and #$0f			and 	#$0F 						; shows the bytes to subtract.
.c91a	0a		asl a				asl 	a 							; claim twice this for storage
.c91b	49 ff		eor #$ff			eor 	#$FF 						; 2's complement addition
.c91d	38		sec				sec 								; so basically subtracting from
.c91e	65 3a		adc $3a				adc 	basicStack 	 				; basicStack
.c920	85 3a		sta $3a				sta 	basicStack
.c922	b0 09		bcs $c92d			bcs 	_SONoBorrow
.c924	c6 3b		dec $3b				dec 	basicStack+1
.c926	a5 3b		lda $3b				lda 	basicStack+1 				; reached the bottom ?
.c928	cd 08 02	cmp $0208			cmp 	basicStackEnd
.c92b	f0 04		beq $c931			beq 	_SOMemory
.c92d					_SONoBorrow:
.c92d	68		pla				pla 								; get marker back and write at TOS
.c92e	92 3a		sta ($3a)			sta 	(basicStack)
.c930	60		rts				rts
.c931					_SOMemory:
.c931	a9 09		lda #$09		lda	#9
.c933	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c936					StackClose:
.c936	b2 3a		lda ($3a)			lda 	(basicStack) 				; get TOS marker
.c938	29 0f		and #$0f			and 	#$0F 						; bytes to add back
.c93a	0a		asl a				asl 	a 							; claim twice this.
.c93b	65 3a		adc $3a				adc 	basicStack 					; add to the stack pointer.
.c93d	85 3a		sta $3a				sta 	basicStack
.c93f	90 02		bcc $c943			bcc 	_SCExit
.c941	e6 3b		inc $3b				inc 	basicStack+1
.c943					_SCExit:
.c943	60		rts				rts
.c944					StackCheckFrame:
.c944	d2 3a		cmp ($3a)			cmp		(basicStack) 				; check  frames match
.c946	d0 01		bne $c949			bne 	_SCFError 					; different, we have structures mixed up
.c948	60		rts				rts
.c949					_SCFError:
.c949	a9 08		lda #$08		lda	#8
.c94b	4c f8 c9	jmp $c9f8		jmp	ErrorHandler

;******  Return to file: _include.inc


;******  Processing file: sources/support/stack/location.asm

.c94e					STKSaveCodePosition:
.c94e	5a		phy				phy
.c94f	98		tya				tya 								; save Y at offset 1.
.c950	a0 01		ldy #$01			ldy 	#1
.c952	91 3a		sta ($3a),y			sta 	(basicStack),y
.c954	a5 38		lda $38				lda 	codePtr 					; save code (low) at 2
.c956	c8		iny				iny
.c957	91 3a		sta ($3a),y			sta 	(basicStack),y
.c959	a5 39		lda $39				lda 	codePtr+1 					; save code (high) at 3
.c95b	c8		iny				iny
.c95c	91 3a		sta ($3a),y			sta 	(basicStack),y
.c95e	7a		ply				ply
.c95f	60		rts				rts
.c960					STKLoadCodePosition:
.c960	a0 03		ldy #$03			ldy 	#3 							; load code pointer back
.c962	b1 3a		lda ($3a),y			lda 	(basicStack),y
.c964	85 39		sta $39				sta 	codePtr+1
.c966	88		dey				dey
.c967	b1 3a		lda ($3a),y			lda 	(basicStack),y
.c969	85 38		sta $38				sta 	codePtr
.c96b	88		dey				dey
.c96c	b1 3a		lda ($3a),y			lda 	(basicStack),y 				; line offset to Y
.c96e	a8		tay				tay
.c96f	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/support/stack/setup.asm

.c970					StackReset:
.c970	48		pha				pha 								; save top of memory
.c971	3a		dec a				dec 	a  							; end of stack = previous byte
.c972	85 3b		sta $3b				sta 	basicStack+1
.c974	a9 ff		lda #$ff			lda 	#$FF
.c976	85 3a		sta $3a				sta 	basicStack
.c978	a9 f0		lda #$f0			lda 	#$F0 						; impossible frame marker - cannot have one with 0 bytes.
.c97a	92 3a		sta ($3a)			sta 	(basicStack) 				; puts a dummy marker at TOS which will never match things like NEXT/RETURN
.c97c	68		pla				pla 								; allocate pages for stack.
.c97d	38		sec				sec
.c97e	e9 08		sbc #$08			sbc 	#STACKPAGES
.c980	8d 08 02	sta $0208			sta 	basicStackEnd 				; when stack MSB hits this, it's out of memory.
.c983	60		rts				rts

;******  Return to file: _include.inc


;******  Processing file: sources/support/strings/stringalloc.asm

.c984					StringSystemInitialise:
.c984	3a		dec a				dec 	a 							; make last byte of previous page.
.c985	8d 05 02	sta $0205			sta 	stringMemory+1
.c988	85 3f		sta $3f				sta 	zTemp0+1
.c98a	a9 ff		lda #$ff			lda 	#$FF
.c98c	8d 04 02	sta $0204			sta 	stringMemory
.c98f	85 3e		sta $3e				sta 	zTemp0
.c991	a9 00		lda #$00			lda 	#0 							; put a zero at the end, so know end of string memory.
.c993	92 3e		sta ($3e)			sta 	(zTemp0)
.c995	60		rts				rts
.c996					StringSpaceInitialise:
.c996	a9 ff		lda #$ff			lda 	#$FF 						; only initialise once (set to $FF, bit used to test it)
.c998	8d 03 02	sta $0203			sta 	stringInitialised
.c99b	ad 04 02	lda $0204			lda 	stringMemory 				; allocate 256 bytes for one concreted string
.c99e	8d 06 02	sta $0206			sta 	stringTempPointer 			; so temporary string space is allocated below that.
.c9a1	ad 05 02	lda $0205			lda 	stringMemory+1
.c9a4	3a		dec a				dec 	a
.c9a5	8d 07 02	sta $0207			sta 	stringTempPointer+1
.c9a8	60		rts				rts
.c9a9					StringTempAllocate:
.c9a9	c9 fd		cmp #$fd			cmp 	#252+1 						; max length of strings
.c9ab	b0 30		bcs $c9dd			bcs 	_STALength
.c9ad	2c 03 02	bit $0203			bit 	stringInitialised 			; already initialised
.c9b0	30 05		bmi $c9b7			bmi 	_STAAllocate 				; then don't call the temp initialise routine
.c9b2	48		pha				pha 								; save value to subtract.
.c9b3	20 96 c9	jsr $c996			jsr 	StringSpaceInitialise 		; initialise string memory allocation
.c9b6	68		pla				pla 								; restore it
.c9b7					_STAAllocate:
.c9b7	49 ff		eor #$ff			eor 	#$FF 						; 2's complement add to StringTempPointer
.c9b9	18		clc				clc  								; deliberate allows one more
.c9ba	6d 06 02	adc $0206			adc 	stringTempPointer 			; subtract from temp pointer
.c9bd	8d 06 02	sta $0206			sta 	stringTempPointer
.c9c0	95 18		sta $18,x			sta 	XSNumber0,x	 				; address in mantissa too
.c9c2	85 3c		sta $3c				sta 	zsTemp 						; and zsTemp
.c9c4	ad 07 02	lda $0207			lda 	stringTempPointer+1
.c9c7	69 ff		adc #$ff			adc 	#$FF
.c9c9	8d 07 02	sta $0207			sta 	stringTempPointer+1
.c9cc	85 3d		sta $3d				sta 	zsTemp+1
.c9ce	95 20		sta $20,x			sta 	XSNumber1,x
.c9d0	74 28		stz $28,x			stz 	XSNumber2,x 				; set the typing data and the upper address bytes.
.c9d2	74 30		stz $30,x			stz 	XSNumber3,x
.c9d4	a9 80		lda #$80			lda 	#XS_STRING					; it's a string.
.c9d6	95 10		sta $10,x			sta 	XSControl,x
.c9d8	a9 00		lda #$00			lda 	#0 							; clear the target string
.c9da	92 3c		sta ($3c)			sta 	(zsTemp)
.c9dc	60		rts				rts
.c9dd					_STALength:
.c9dd	a9 0a		lda #$0a		lda	#10
.c9df	4c f8 c9	jmp $c9f8		jmp	ErrorHandler
.c9e2					StringTempWrite:
.c9e2	5a		phy				phy
.c9e3	48		pha				pha
.c9e4	b2 3c		lda ($3c)			lda 	(zsTemp)
.c9e6	1a		inc a				inc 	a
.c9e7	92 3c		sta ($3c)			sta 	(zsTemp)
.c9e9	a8		tay				tay
.c9ea	68		pla				pla
.c9eb	91 3c		sta ($3c),y			sta 	(zsTemp),y
.c9ed	7a		ply				ply
.c9ee	60		rts				rts

;******  Return to file: _include.inc


;******  Return to file: basic.asm

.c9ef					WarmStart:
.c9ef	a9 00		lda #$00			lda 	#$00
.c9f1	aa		tax				tax
.c9f2	a8		tay				tay
>c9f3	03						.byte 	3
.c9f4	80 f9		bra $c9ef			bra 	WarmStart
.c9f6					Unimplemented:
.c9f6	a9 ff		lda #$ff			lda 	#$FF
.c9f8					ErrorHandler:
.c9f8	a2 ee		ldx #$ee			ldx 	#$EE
.c9fa	a0 ee		ldy #$ee			ldy 	#$EE
>c9fc	03						.byte 	3
.c9fd					_EHLoop:
.c9fd	80 fe		bra $c9fd			bra 	_EHLoop
>c9ff							.align 	256
.ca00					Program:
>ca00	01 07 00 00 00 00 00 c1				.binary "build/tokenised.dat"
>ca08	07 00 00 00 00 00 d8 07 00 00 00 00 00 d9 00 00
>ca18	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;	...repeated 13 times (208 bytes)...
>caf8	00 00 00 00 00 00 00 00 24 64 00 c1 85 8e 82 48
>cb08	5d c3 02 99 ff 20 21 65 c3 02 76 ff cf 21 47 78
>cb18	c3 02 23 ff cf 2e 40 c3 02 00 1f c0 24 6e 00 c1
>cb28	85 8e 82 48 5d c3 02 99 ff 21 21 65 c3 02 76 ff
>cb38	cf 21 49 43 c3 02 75 ff cf 2e 40 c3 02 00 1f c0
>cb48	28 78 00 c1 85 8e 82 48 5d c3 02 99 ff 22 21 65
>cb58	c3 02 76 ff cf 21 21 44 7f 71 c3 03 54 24 ff cf
>cb68	2e 43 4c c3 02 65 5f c0 25 82 00 c1 85 8e 82 48
>cb78	5d c3 02 99 ff 23 21 65 c3 02 76 ff cf 21 21 4e
>cb88	c3 03 35 35 ff cf 2e 40 c3 02 28 7f c0 1f 8c 00
>cb98	c1 85 8e 82 48 5d c3 02 99 ff 2d 21 65 c3 02 76
>cba8	ff cf 21 40 cf 2e 40 c3 02 00 1f c0 1f 96 00 c1
>cbb8	85 8e 82 48 5d c3 02 99 ff 2e 21 65 c3 02 76 ff
>cbc8	cf 21 40 cf 2e 40 c3 02 00 1f c0 1f a0 00 c1 85
>cbd8	8e 82 48 5d c3 02 99 ff 30 21 65 c3 02 76 ff cf
>cbe8	21 40 cf 2e 40 c3 02 00 1f c0 20 aa 00 c1 85 8e
>cbf8	82 48 5d c3 02 99 ff 2b 21 65 c3 02 76 ff cf 21
>cc08	21 41 cf 2e 40 c3 02 00 1f c0 20 b4 00 c1 85 8e
>cc18	82 48 5d c3 02 99 ff 2c 21 65 c3 02 76 ff cf 21
>cc28	21 41 cf 2e 40 c3 02 00 1f c0 20 be 00 c1 85 8e
>cc38	82 48 5d c3 02 99 ff 2f 21 65 c3 02 76 ff cf 21
>cc48	21 41 cf 2e 40 c3 02 00 1f c0 18 c8 00 c1 85 8e
>cc58	82 49 69 28 4f 4e cf 21 49 48 cf 2e 40 c3 02 00
>cc68	1f c0 18 d2 00 c1 85 8e 82 49 69 29 4f 4e cf 21
>cc78	4f 6f cf 2e 40 c3 02 00 2f c0 18 dc 00 c1 85 8e
>cc88	82 49 69 2a 4f 4e cf 21 46 67 cf 2e 40 c3 02 00
>cc98	1f c0 16 e6 00 c1 85 8e 82 49 69 24 4d cf 21 40
>cca8	cf 2e 40 c3 02 00 1f c0 1a f0 00 c1 85 8e 82 21
>ccb8	4a 56 20 45 78 cf 21 21 44 5e cf 2e 40 c3 02 00
>ccc8	1f c0 1a fa 00 c1 85 8e 82 21 4a 56 21 45 78 cf
>ccd8	21 21 50 4e cf 2e 40 c3 02 00 2f c0 1c 04 01 c1
>cce8	85 8e 82 21 4a 56 22 45 78 cf 21 21 7c 71 50 cf
>ccf8	2e 66 79 c3 02 12 ff c0 1e 0e 01 c1 85 8e 82 21
>cd08	4a 56 23 45 78 cf 21 21 41 c3 03 76 06 ff cf 2e
>cd18	40 c3 02 03 5f c0 17 18 01 c1 85 8e 82 45 78 2d
>cd28	45 78 cf 21 40 cf 2e 40 c3 02 00 1f c0 18 22 01
>cd38	c1 85 8e 82 45 78 2e 45 78 cf 21 21 41 cf 2e 40
>cd48	c3 02 00 1f c0 18 2c 01 c1 85 8e 82 45 78 30 45
>cd58	78 cf 21 21 41 cf 2e 40 c3 02 00 1f c0 17 36 01
>cd68	c1 85 8e 82 45 78 2b 45 78 cf 21 40 cf 2e 40 c3
>cd78	02 00 1f c0 18 40 01 c1 85 8e 82 45 78 2c 45 78
>cd88	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 17 4a 01 c1
>cd98	85 8e 82 45 78 2f 45 78 cf 21 40 cf 2e 40 c3 02
>cda8	00 1f c0 18 54 01 c1 85 8e 82 45 57 28 4b 40 cf
>cdb8	21 41 40 cf 2e 40 c3 02 00 1f c0 18 5e 01 c1 85
>cdc8	8e 82 45 57 29 4b 40 cf 21 4f 57 cf 2e 40 c3 02
>cdd8	00 2f c0 18 68 01 c1 85 8e 82 45 57 2a 4b 40 cf
>cde8	21 4e 57 cf 2e 40 c3 02 00 2f c0 16 72 01 c1 85
>cdf8	8e 82 45 57 24 46 cf 21 45 cf 2e 40 c3 02 00 1f
>ce08	c0 18 7c 01 c1 85 8e 82 45 57 25 46 cf 21 45 57
>ce18	40 cf 2e 40 c3 02 04 4f c0 24 86 01 c1 85 8e 82
>ce28	4b 4e c3 02 56 ff 20 21 4a 78 c3 02 55 ff cf 21
>ce38	56 c3 02 01 ff cf 2e 40 c3 02 00 1f c0 25 90 01
>ce48	c1 85 8e 82 4b 4e c3 02 56 ff 21 21 4a 78 c3 02
>ce58	55 ff cf 21 56 47 c3 02 11 ff cf 2e 40 c3 02 00
>ce68	3f c0 2a 9a 01 c1 85 8e 82 4b 4e c3 02 56 ff 22
>ce78	21 4a 78 c3 02 55 ff cf 21 21 41 7a 4c 60 c3 02
>ce88	96 8f cf 2e 41 4e 4d c3 02 13 ff c0 26 a4 01 c1
>ce98	85 8e 82 4b 4e c3 02 56 ff 23 21 4a 78 c3 02 55
>cea8	ff cf 21 21 41 c3 03 03 16 ff cf 2e 40 c3 02 02
>ceb8	1f c0 20 ae 01 c1 85 8e 82 4b 4e c3 02 56 ff 2d
>cec8	21 4a 78 c3 02 55 ff cf 21 40 cf 2e 40 c3 02 00
>ced8	1f c0 20 b8 01 c1 85 8e 82 4b 4e c3 02 56 ff 2e
>cee8	21 4a 78 c3 02 55 ff cf 21 40 cf 2e 40 c3 02 00
>cef8	1f c0 20 c2 01 c1 85 8e 82 4b 4e c3 02 56 ff 30
>cf08	21 4a 78 c3 02 55 ff cf 21 40 cf 2e 40 c3 02 00
>cf18	1f c0 21 cc 01 c1 85 8e 82 4b 4e c3 02 56 ff 2b
>cf28	21 4a 78 c3 02 55 ff cf 21 21 41 cf 2e 40 c3 02
>cf38	00 1f c0 21 d6 01 c1 85 8e 82 4b 4e c3 02 56 ff
>cf48	2c 21 4a 78 c3 02 55 ff cf 21 21 41 cf 2e 40 c3
>cf58	02 00 1f c0 21 e0 01 c1 85 8e 82 4b 4e c3 02 56
>cf68	ff 2f 21 4a 78 c3 02 55 ff cf 21 21 41 cf 2e 40
>cf78	c3 02 00 1f c0 18 ea 01 c1 85 8e 82 4c 5c 28 4f
>cf88	4f cf 21 4c 4c cf 2e 40 c3 02 00 2f c0 18 f4 01
>cf98	c1 85 8e 82 4c 5c 29 4f 4f cf 21 4f 5f cf 2e 40
>cfa8	c3 02 00 2f c0 18 fe 01 c1 85 8e 82 4c 5c 2a 4f
>cfb8	4f cf 21 43 53 cf 2e 40 c3 02 00 1f c0 17 08 02
>cfc8	c1 85 8e 82 4c 5c 24 43 cf 21 41 63 cf 2e 40 c3
>cfd8	02 00 1f c0 18 12 02 c1 85 8e 82 4c 5c 25 43 cf
>cfe8	21 41 63 60 cf 2e 40 c3 02 01 3f c0 20 1c 02 c1
>cff8	85 8e 82 21 4b 78 20 21 43 c3 01 4f cf 21 21 4b
>d008	7b c3 01 4f cf 2e 40 c3 02 00 2f c0 20 26 02 c1
>d018	85 8e 82 21 4b 78 21 21 43 c3 01 4f cf 21 21 4b
>d028	74 c3 01 6f cf 2e 40 c3 02 00 2f c0 1f 30 02 c1
>d038	85 8e 82 21 4b 78 22 21 43 c3 01 4f cf 21 68 58
>d048	c3 01 0f cf 2e 59 c3 02 84 ff c0 21 3a 02 c1 85
>d058	8e 82 21 4b 78 23 21 43 c3 01 4f cf 21 43 5f c3
>d068	03 52 94 ff cf 2e 44 c3 02 47 1f c0 1c 44 02 c1
>d078	85 8e 82 21 4b 78 2d 21 43 c3 01 4f cf 21 21 41
>d088	cf 2e 40 c3 02 00 1f c0 1c 4e 02 c1 85 8e 82 21
>d098	4b 78 2e 21 43 c3 01 4f cf 21 21 41 cf 2e 40 c3
>d0a8	02 00 1f c0 1b 58 02 c1 85 8e 82 21 4b 78 30 21
>d0b8	43 c3 01 4f cf 21 40 cf 2e 40 c3 02 00 1f c0 1b
>d0c8	62 02 c1 85 8e 82 21 4b 78 2b 21 43 c3 01 4f cf
>d0d8	21 40 cf 2e 40 c3 02 00 1f c0 1b 6c 02 c1 85 8e
>d0e8	82 21 4b 78 2c 21 43 c3 01 4f cf 21 40 cf 2e 40
>d0f8	c3 02 00 1f c0 1c 76 02 c1 85 8e 82 21 4b 78 2f
>d108	21 43 c3 01 4f cf 21 21 41 cf 2e 40 c3 02 00 1f
>d118	c0 18 80 02 c1 85 8e 82 47 67 28 4d 64 cf 21 45
>d128	64 cf 2e 40 c3 02 00 1f c0 18 8a 02 c1 85 8e 82
>d138	47 67 29 4d 64 cf 21 4f 67 cf 2e 40 c3 02 00 2f
>d148	c0 18 94 02 c1 85 8e 82 47 67 2a 4d 64 cf 21 4a
>d158	43 cf 2e 40 c3 02 00 1f c0 16 9e 02 c1 85 8e 82
>d168	47 67 24 47 cf 21 43 cf 2e 40 c3 02 00 1f c0 18
>d178	a8 02 c1 85 8e 82 47 67 25 47 cf 21 4f 4e 40 cf
>d188	2e 40 c3 02 12 5f c0 22 b2 02 c1 85 8e 82 21 4a
>d198	50 20 46 6c c3 02 42 ff cf 21 21 43 63 c3 02 58
>d1a8	ff cf 2e 40 c3 02 00 1f c0 22 bc 02 c1 85 8e 82
>d1b8	21 4a 50 21 46 6c c3 02 42 ff cf 21 21 50 7c c3
>d1c8	02 42 ff cf 2e 40 c3 02 00 2f c0 25 c6 02 c1 85
>d1d8	8e 82 21 4a 50 22 46 6c c3 02 42 ff cf 21 21 41
>d1e8	44 67 53 c3 02 52 ff cf 2e 6b 7a c3 02 43 5f c0
>d1f8	22 d0 02 c1 85 8e 82 21 4a 50 23 46 6c c3 02 42
>d208	ff cf 21 21 41 c3 03 53 12 ff cf 2e 40 c3 02 03
>d218	1f c0 1d da 02 c1 85 8e 82 21 4a 50 2d 46 6c c3
>d228	02 42 ff cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1d
>d238	e4 02 c1 85 8e 82 21 4a 50 2e 46 6c c3 02 42 ff
>d248	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1c ee 02 c1
>d258	85 8e 82 21 4a 50 30 46 6c c3 02 42 ff cf 21 40
>d268	cf 2e 40 c3 02 00 1f c0 1c f8 02 c1 85 8e 82 21
>d278	4a 50 2b 46 6c c3 02 42 ff cf 21 40 cf 2e 40 c3
>d288	02 00 1f c0 1c 02 03 c1 85 8e 82 21 4a 50 2c 46
>d298	6c c3 02 42 ff cf 21 40 cf 2e 40 c3 02 00 1f c0
>d2a8	1d 0c 03 c1 85 8e 82 21 4a 50 2f 46 6c c3 02 42
>d2b8	ff cf 21 21 41 cf 2e 40 c3 02 00 1f c0 18 16 03
>d2c8	c1 85 8e 82 4b 69 28 4c 4d cf 21 48 49 cf 2e 40
>d2d8	c3 02 00 1f c0 18 20 03 c1 85 8e 82 4b 69 29 4c
>d2e8	4d cf 21 4f 6d cf 2e 40 c3 02 00 2f c0 18 2a 03
>d2f8	c1 85 8e 82 4b 69 2a 4c 4d cf 21 47 64 cf 2e 40
>d308	c3 02 00 1f c0 16 34 03 c1 85 8e 82 4b 69 24 4c
>d318	cf 21 40 cf 2e 40 c3 02 00 1f c0 19 3e 03 c1 85
>d328	8e 82 4b 69 25 4c cf 21 4b 69 40 40 cf 2e 46 c3
>d338	02 10 3f c0 25 48 03 c1 85 8e 82 21 4d 68 c3 02
>d348	92 ff 20 45 75 c3 02 02 ff cf 21 21 47 73 c3 01
>d358	9f cf 2e 40 c3 02 00 1f c0 26 52 03 c1 85 8e 82
>d368	21 4d 68 c3 02 92 ff 21 45 75 c3 02 02 ff cf 21
>d378	21 53 5d c3 02 94 ff cf 2e 40 c3 02 00 2f c0 2a
>d388	5c 03 c1 85 8e 82 21 4d 68 c3 02 92 ff 22 45 75
>d398	c3 02 02 ff cf 21 21 41 4f 5f 70 c3 03 61 84 ff
>d3a8	cf 2e 72 78 c3 02 16 6f c0 26 66 03 c1 85 8e 82
>d3b8	21 4d 68 c3 02 92 ff 23 45 75 c3 02 02 ff cf 21
>d3c8	21 42 c3 03 34 01 ff cf 2e 40 c3 02 04 7f c0 21
>d3d8	70 03 c1 85 8e 82 21 4d 68 c3 02 92 ff 2d 45 75
>d3e8	c3 02 02 ff cf 21 21 41 cf 2e 40 c3 02 00 1f c0
>d3f8	21 7a 03 c1 85 8e 82 21 4d 68 c3 02 92 ff 2e 45
>d408	75 c3 02 02 ff cf 21 21 41 cf 2e 40 c3 02 00 1f
>d418	c0 20 84 03 c1 85 8e 82 21 4d 68 c3 02 92 ff 30
>d428	45 75 c3 02 02 ff cf 21 40 cf 2e 40 c3 02 00 1f
>d438	c0 20 8e 03 c1 85 8e 82 21 4d 68 c3 02 92 ff 2b
>d448	45 75 c3 02 02 ff cf 21 40 cf 2e 40 c3 02 00 1f
>d458	c0 20 98 03 c1 85 8e 82 21 4d 68 c3 02 92 ff 2c
>d468	45 75 c3 02 02 ff cf 21 40 cf 2e 40 c3 02 00 1f
>d478	c0 21 a2 03 c1 85 8e 82 21 4d 68 c3 02 92 ff 2f
>d488	45 75 c3 02 02 ff cf 21 21 41 cf 2e 40 c3 02 00
>d498	1f c0 17 ac 03 c1 85 8e 82 48 74 28 42 66 cf 21
>d4a8	64 cf 2e 40 c3 02 00 1f c0 18 b6 03 c1 85 8e 82
>d4b8	48 74 29 42 66 cf 21 4a 76 cf 2e 40 c3 02 00 1f
>d4c8	c0 18 c0 03 c1 85 8e 82 48 74 2a 42 66 cf 21 4a
>d4d8	52 cf 2e 40 c3 02 00 1f c0 16 ca 03 c1 85 8e 82
>d4e8	48 74 24 45 cf 21 51 cf 2e 40 c3 02 00 1f c0 18
>d4f8	d4 03 c1 85 8e 82 48 74 25 45 cf 21 44 5a 40 cf
>d508	2e 40 c3 02 03 6f c0 23 de 03 c1 85 8e 82 21 49
>d518	66 20 21 48 40 c3 02 87 ff cf 21 21 51 66 c3 02
>d528	87 ff cf 2e 40 c3 02 00 2f c0 23 e8 03 c1 85 8e
>d538	82 21 49 66 21 21 48 40 c3 02 87 ff cf 21 21 41
>d548	65 c3 02 13 ff cf 2e 40 c3 02 00 1f c0 25 f2 03
>d558	c1 85 8e 82 21 49 66 22 21 48 40 c3 02 87 ff cf
>d568	21 41 4c 78 56 c3 02 18 ff cf 2e 71 4d c3 02 02
>d578	2f c0 22 fc 03 c1 85 8e 82 21 49 66 23 21 48 40
>d588	c3 02 87 ff cf 21 41 c3 03 19 72 ff cf 2e 40 c3
>d598	02 02 4f c0 1e 06 04 c1 85 8e 82 21 49 66 2d 21
>d5a8	48 40 c3 02 87 ff cf 21 21 41 cf 2e 40 c3 02 00
>d5b8	1f c0 1e 10 04 c1 85 8e 82 21 49 66 2e 21 48 40
>d5c8	c3 02 87 ff cf 21 21 41 cf 2e 40 c3 02 00 1f c0
>d5d8	1d 1a 04 c1 85 8e 82 21 49 66 30 21 48 40 c3 02
>d5e8	87 ff cf 21 40 cf 2e 40 c3 02 00 1f c0 1d 24 04
>d5f8	c1 85 8e 82 21 49 66 2b 21 48 40 c3 02 87 ff cf
>d608	21 40 cf 2e 40 c3 02 00 1f c0 1d 2e 04 c1 85 8e
>d618	82 21 49 66 2c 21 48 40 c3 02 87 ff cf 21 40 cf
>d628	2e 40 c3 02 00 1f c0 1e 38 04 c1 85 8e 82 21 49
>d638	66 2f 21 48 40 c3 02 87 ff cf 21 21 41 cf 2e 40
>d648	c3 02 00 1f c0 16 42 04 c1 85 8e 82 60 28 42 45
>d658	cf 21 40 cf 2e 40 c3 02 00 1f c0 17 4c 04 c1 85
>d668	8e 82 60 29 42 45 cf 21 42 65 cf 2e 40 c3 02 00
>d678	1f c0 17 56 04 c1 85 8e 82 60 2a 42 45 cf 21 42
>d688	65 cf 2e 40 c3 02 00 1f c0 15 60 04 c1 85 8e 82
>d698	60 24 4a cf 21 40 cf 2e 40 c3 02 00 1f c0 17 6a
>d6a8	04 c1 85 8e 82 60 25 4a cf 21 48 40 40 cf 2e 40
>d6b8	c3 02 06 6f c0 1b 74 04 c1 85 8e 82 21 46 4e 20
>d6c8	21 49 5d cf 21 21 4f 6b cf 2e 40 c3 02 00 2f c0
>d6d8	1a 7e 04 c1 85 8e 82 21 46 4e 21 21 49 5d cf 21
>d6e8	43 4f cf 2e 40 c3 02 00 1f c0 1b 88 04 c1 85 8e
>d6f8	82 21 46 4e 22 21 49 5d cf 21 7a 72 56 cf 2e 65
>d708	67 c3 01 9f c0 1e 92 04 c1 85 8e 82 21 46 4e 23
>d718	21 49 5d cf 21 40 c3 03 65 79 ff cf 2e 40 c3 02
>d728	01 3f c0 19 9c 04 c1 85 8e 82 21 46 4e 2d 21 49
>d738	5d cf 21 40 cf 2e 40 c3 02 00 1f c0 19 a6 04 c1
>d748	85 8e 82 21 46 4e 2e 21 49 5d cf 21 40 cf 2e 40
>d758	c3 02 00 1f c0 19 b0 04 c1 85 8e 82 21 46 4e 30
>d768	21 49 5d cf 21 40 cf 2e 40 c3 02 00 1f c0 1a ba
>d778	04 c1 85 8e 82 21 46 4e 2b 21 49 5d cf 21 21 41
>d788	cf 2e 40 c3 02 00 1f c0 1a c4 04 c1 85 8e 82 21
>d798	46 4e 2c 21 49 5d cf 21 21 41 cf 2e 40 c3 02 00
>d7a8	1f c0 1a ce 04 c1 85 8e 82 21 46 4e 2f 21 49 5d
>d7b8	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 18 d8 04 c1
>d7c8	85 8e 82 4f 4a 28 4f 64 cf 21 4f 40 cf 2e 40 c3
>d7d8	02 00 2f c0 18 e2 04 c1 85 8e 82 4f 4a 29 4f 64
>d7e8	cf 21 4f 6e cf 2e 40 c3 02 00 2f c0 17 ec 04 c1
>d7f8	85 8e 82 4f 4a 2a 4f 64 cf 21 6e cf 2e 40 c3 02
>d808	00 1f c0 16 f6 04 c1 85 8e 82 4f 4a 24 44 cf 21
>d818	7c cf 2e 40 c3 02 00 1f c0 18 00 05 c1 85 8e 82
>d828	4f 4a 25 44 cf 21 43 72 60 cf 2e 40 c3 02 03 1f
>d838	c0 22 0a 05 c1 85 8e 82 46 72 20 21 4d 6d c3 02
>d848	86 ff cf 21 21 46 7b c3 02 86 ff cf 2e 40 c3 02
>d858	00 1f c0 21 14 05 c1 85 8e 82 46 72 21 21 4d 6d
>d868	c3 02 86 ff cf 21 54 5f c3 02 86 ff cf 2e 40 c3
>d878	02 00 3f c0 25 1e 05 c1 85 8e 82 46 72 22 21 4d
>d888	6d c3 02 86 ff cf 21 21 41 5d 40 7f c3 02 24 ff
>d898	cf 2e 7b 61 c3 02 91 2f c0 22 28 05 c1 85 8e 82
>d8a8	46 72 23 21 4d 6d c3 02 86 ff cf 21 21 40 c3 03
>d8b8	49 44 ff cf 2e 40 c3 02 01 ff c0 1c 32 05 c1 85
>d8c8	8e 82 46 72 2d 21 4d 6d c3 02 86 ff cf 21 40 cf
>d8d8	2e 40 c3 02 00 1f c0 1c 3c 05 c1 85 8e 82 46 72
>d8e8	2e 21 4d 6d c3 02 86 ff cf 21 40 cf 2e 40 c3 02
>d8f8	00 1f c0 1c 46 05 c1 85 8e 82 46 72 30 21 4d 6d
>d908	c3 02 86 ff cf 21 40 cf 2e 40 c3 02 00 1f c0 1d
>d918	50 05 c1 85 8e 82 46 72 2b 21 4d 6d c3 02 86 ff
>d928	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 1d 5a 05 c1
>d938	85 8e 82 46 72 2c 21 4d 6d c3 02 86 ff cf 21 21
>d948	41 cf 2e 40 c3 02 00 1f c0 1d 64 05 c1 85 8e 82
>d958	46 72 2f 21 4d 6d c3 02 86 ff cf 21 21 41 cf 2e
>d968	40 c3 02 00 1f c0 17 6e 05 c1 85 8e 82 4a 6c 28
>d978	45 6d cf 21 6c cf 2e 40 c3 02 00 1f c0 18 78 05
>d988	c1 85 8e 82 4a 6c 29 45 6d cf 21 4f 6d cf 2e 40
>d998	c3 02 00 2f c0 18 82 05 c1 85 8e 82 4a 6c 2a 45
>d9a8	6d cf 21 4f 41 cf 2e 40 c3 02 00 2f c0 16 8c 05
>d9b8	c1 85 8e 82 4a 6c 24 4d cf 21 40 cf 2e 40 c3 02
>d9c8	00 1f c0 22 96 05 c1 85 8e 82 21 47 40 c3 02 28
>d9d8	ff 20 43 70 cf 21 21 43 50 c3 02 28 ff cf 2e 40
>d9e8	c3 02 00 1f c0 22 a0 05 c1 85 8e 82 21 47 40 c3
>d9f8	02 28 ff 21 43 70 cf 21 21 4a 70 c3 02 28 ff cf
>da08	2e 40 c3 02 00 1f c0 23 aa 05 c1 85 8e 82 21 47
>da18	40 c3 02 28 ff 22 43 70 cf 21 21 5a 51 43 c3 01
>da28	2f cf 2e 50 73 c3 02 87 2f c0 22 b4 05 c1 85 8e
>da38	82 21 47 40 c3 02 28 ff 23 43 70 cf 21 21 41 c3
>da48	03 86 78 ff cf 2e 40 c3 02 03 7f c0 1d be 05 c1
>da58	85 8e 82 21 47 40 c3 02 28 ff 2d 43 70 cf 21 21
>da68	41 cf 2e 40 c3 02 00 1f c0 1d c8 05 c1 85 8e 82
>da78	21 47 40 c3 02 28 ff 2e 43 70 cf 21 21 41 cf 2e
>da88	40 c3 02 00 1f c0 1c d2 05 c1 85 8e 82 21 47 40
>da98	c3 02 28 ff 30 43 70 cf 21 40 cf 2e 40 c3 02 00
>daa8	1f c0 1c dc 05 c1 85 8e 82 21 47 40 c3 02 28 ff
>dab8	2b 43 70 cf 21 40 cf 2e 40 c3 02 00 1f c0 1c e6
>dac8	05 c1 85 8e 82 21 47 40 c3 02 28 ff 2c 43 70 cf
>dad8	21 40 cf 2e 40 c3 02 00 1f c0 1d f0 05 c1 85 8e
>dae8	82 21 47 40 c3 02 28 ff 2f 43 70 cf 21 21 41 cf
>daf8	2e 40 c3 02 00 1f c0 18 fa 05 c1 85 8e 82 4a 6f
>db08	28 4e 45 cf 21 4a 45 cf 2e 40 c3 02 00 1f c0 18
>db18	04 06 c1 85 8e 82 4a 6f 29 4e 45 cf 21 4e 6f cf
>db28	2e 40 c3 02 00 2f c0 18 0e 06 c1 85 8e 82 4a 6f
>db38	2a 4e 45 cf 21 44 6a cf 2e 40 c3 02 00 1f c0 16
>db48	18 06 c1 85 8e 82 4a 6f 24 4c cf 21 40 cf 2e 40
>db58	c3 02 00 1f c0 19 22 06 c1 85 8e 82 4a 6f 25 4c
>db68	cf 21 4a 6f 40 40 cf 2e 45 c3 02 62 8f c0 20 2c
>db78	06 c1 85 8e 82 4e 5c c3 02 72 ff 20 4e 5b cf 21
>db88	5c 77 c3 02 72 ff cf 2e 40 c3 02 00 4f c0 1f 36
>db98	06 c1 85 8e 82 4e 5c c3 02 72 ff 21 4e 5b cf 21
>dba8	41 c3 02 72 ff cf 2e 40 c3 02 00 1f c0 24 40 06
>dbb8	c1 85 8e 82 4e 5c c3 02 72 ff 22 4e 5b cf 21 43
>dbc8	50 58 4c c3 02 56 ff cf 2e 42 45 57 c3 02 16 6f
>dbd8	c0 20 4a 06 c1 85 8e 82 4e 5c c3 02 72 ff 23 4e
>dbe8	5b cf 21 41 c3 03 00 19 ff cf 2e 40 c3 02 02 ff
>dbf8	c0 17 54 06 c1 85 8e 82 4e 5b 2d 4e 5b cf 21 40
>dc08	cf 2e 40 c3 02 00 1f c0 18 5e 06 c1 85 8e 82 4e
>dc18	5b 2e 4e 5b cf 21 21 41 cf 2e 40 c3 02 00 1f c0
>dc28	18 68 06 c1 85 8e 82 4e 5b 30 4e 5b cf 21 21 41
>dc38	cf 2e 40 c3 02 00 1f c0 17 72 06 c1 85 8e 82 4e
>dc48	5b 2b 4e 5b cf 21 40 cf 2e 40 c3 02 00 1f c0 18
>dc58	7c 06 c1 85 8e 82 4e 5b 2c 4e 5b cf 21 21 41 cf
>dc68	2e 40 c3 02 00 1f c0 17 86 06 c1 85 8e 82 4e 5b
>dc78	2f 4e 5b cf 21 40 cf 2e 40 c3 02 00 1f c0 16 90
>dc88	06 c1 85 8e 82 48 71 28 7c cf 21 70 cf 2e 40 c3
>dc98	02 00 1f c0 17 9a 06 c1 85 8e 82 48 71 29 7c cf
>dca8	21 48 7d cf 2e 40 c3 02 00 1f c0 17 a4 06 c1 85
>dcb8	8e 82 48 71 2a 7c cf 21 48 4d cf 2e 40 c3 02 00
>dcc8	1f c0 16 ae 06 c1 85 8e 82 48 71 24 49 cf 21 41
>dcd8	cf 2e 40 c3 02 00 1f c0 19 b8 06 c1 85 8e 82 48
>dce8	71 25 49 cf 21 41 46 48 40 cf 2e 40 c3 02 57 4f
>dcf8	c0 27 c2 06 c1 85 8e 82 21 4b 4f c3 02 67 ff 20
>dd08	21 4d 40 c3 02 75 ff cf 21 21 58 50 c3 02 42 ff
>dd18	cf 2e 40 c3 02 00 3f c0 26 cc 06 c1 85 8e 82 21
>dd28	4b 4f c3 02 67 ff 21 21 4d 40 c3 02 75 ff cf 21
>dd38	41 71 c3 02 08 ff cf 2e 40 c3 02 00 1f c0 2b d6
>dd48	06 c1 85 8e 82 21 4b 4f c3 02 67 ff 22 21 4d 40
>dd58	c3 02 75 ff cf 21 42 52 54 49 c3 03 19 25 ff cf
>dd68	2e 41 5d 69 c3 02 05 2f c0 26 e0 06 c1 85 8e 82
>dd78	21 4b 4f c3 02 67 ff 23 21 4d 40 c3 02 75 ff cf
>dd88	21 40 c3 03 86 42 ff cf 2e 40 c3 02 01 7f c0 21
>dd98	ea 06 c1 85 8e 82 21 4b 4f c3 02 67 ff 2d 21 4d
>dda8	40 c3 02 75 ff cf 21 40 cf 2e 40 c3 02 00 1f c0
>ddb8	21 f4 06 c1 85 8e 82 21 4b 4f c3 02 67 ff 2e 21
>ddc8	4d 40 c3 02 75 ff cf 21 40 cf 2e 40 c3 02 00 1f
>ddd8	c0 21 fe 06 c1 85 8e 82 21 4b 4f c3 02 67 ff 30
>dde8	21 4d 40 c3 02 75 ff cf 21 40 cf 2e 40 c3 02 00
>ddf8	1f c0 22 08 07 c1 85 8e 82 21 4b 4f c3 02 67 ff
>de08	2b 21 4d 40 c3 02 75 ff cf 21 21 41 cf 2e 40 c3
>de18	02 00 1f c0 22 12 07 c1 85 8e 82 21 4b 4f c3 02
>de28	67 ff 2c 21 4d 40 c3 02 75 ff cf 21 21 41 cf 2e
>de38	40 c3 02 00 1f c0 22 1c 07 c1 85 8e 82 21 4b 4f
>de48	c3 02 67 ff 2f 21 4d 40 c3 02 75 ff cf 21 21 41
>de58	cf 2e 40 c3 02 00 1f c0 18 26 07 c1 85 8e 82 42
>de68	66 28 4f 41 cf 21 42 40 cf 2e 40 c3 02 00 1f c0
>de78	18 30 07 c1 85 8e 82 42 66 29 4f 41 cf 21 4f 67
>de88	cf 2e 40 c3 02 00 2f c0 18 3a 07 c1 85 8e 82 42
>de98	66 2a 4f 41 cf 21 4d 67 cf 2e 40 c3 02 00 2f c0
>dea8	17 44 07 c1 85 8e 82 42 66 24 40 cf 21 42 66 cf
>deb8	2e 40 c3 02 00 1f c0 17 4e 07 c1 85 8e 82 42 66
>dec8	25 40 cf 21 42 66 cf 2e 40 c3 02 00 1f c0 25 58
>ded8	07 c1 85 8e 82 21 48 6b c3 02 98 ff 20 48 42 c3
>dee8	02 77 ff cf 21 21 69 c3 02 21 ff cf 2e 40 c3 02
>def8	00 1f c0 26 62 07 c1 85 8e 82 21 48 6b c3 02 98
>df08	ff 21 48 42 c3 02 77 ff cf 21 21 50 6e c3 02 75
>df18	ff cf 2e 40 c3 02 00 2f c0 2a 6c 07 c1 85 8e 82
>df28	21 48 6b c3 02 98 ff 22 48 42 c3 02 77 ff cf 21
>df38	21 41 45 77 79 c3 03 82 46 ff cf 2e 6c 6e c3 02
>df48	01 8f c0 26 76 07 c1 85 8e 82 21 48 6b c3 02 98
>df58	ff 23 48 42 c3 02 77 ff cf 21 21 41 c3 03 08 01
>df68	ff cf 2e 40 c3 02 02 2f c0 1f 80 07 c1 85 8e 82
>df78	48 42 c3 02 77 ff 2d 48 42 c3 02 77 ff cf 21 40
>df88	cf 2e 40 c3 02 00 1f c0 20 8a 07 c1 85 8e 82 48
>df98	42 c3 02 77 ff 2e 48 42 c3 02 77 ff cf 21 21 41
>dfa8	cf 2e 40 c3 02 00 1f c0 20 94 07 c1 85 8e 82 48
>dfb8	42 c3 02 77 ff 30 48 42 c3 02 77 ff cf 21 21 41
>dfc8	cf 2e 40 c3 02 00 1f c0 1f 9e 07 c1 85 8e 82 48
>dfd8	42 c3 02 77 ff 2b 48 42 c3 02 77 ff cf 21 40 cf
>dfe8	2e 40 c3 02 00 1f c0 20 a8 07 c1 85 8e 82 48 42
>dff8	c3 02 77 ff 2c 48 42 c3 02 77 ff cf 21 21 41 cf
>e008	2e 40 c3 02 00 1f c0 1f b2 07 c1 85 8e 82 48 42
>e018	c3 02 77 ff 2f 48 42 c3 02 77 ff cf 21 40 cf 2e
>e028	40 c3 02 00 1f c0 18 bc 07 c1 85 8e 82 46 79 28
>e038	47 6d cf 21 46 69 cf 2e 40 c3 02 00 1f c0 18 c6
>e048	07 c1 85 8e 82 46 79 29 47 6d cf 21 47 7d cf 2e
>e058	40 c3 02 00 1f c0 18 d0 07 c1 85 8e 82 46 79 2a
>e068	47 6d cf 21 41 54 cf 2e 40 c3 02 00 1f c0 16 da
>e078	07 c1 85 8e 82 46 79 24 4c cf 21 40 cf 2e 40 c3
>e088	02 00 1f c0 19 e4 07 c1 85 8e 82 46 79 25 4c cf
>e098	21 46 79 40 40 cf 2e 43 c3 02 61 3f c0 18 ee 07
>e0a8	c1 85 8e 82 21 7c 20 4d 5d cf 21 4c 61 cf 2e 40
>e0b8	c3 02 00 2f c0 19 f8 07 c1 85 8e 82 21 7c 21 4d
>e0c8	5d cf 21 21 4e 59 cf 2e 40 c3 02 00 2f c0 1a 02
>e0d8	08 c1 85 8e 82 21 7c 22 4d 5d cf 21 21 4c 67 4c
>e0e8	cf 2e 48 44 c3 01 6f c0 1d 0c 08 c1 85 8e 82 21
>e0f8	7c 23 4d 5d cf 21 21 40 c3 03 06 97 ff cf 2e 40
>e108	c3 02 00 1f c0 17 16 08 c1 85 8e 82 4d 5d 2d 4d
>e118	5d cf 21 40 cf 2e 40 c3 02 00 1f c0 18 20 08 c1
>e128	85 8e 82 4d 5d 2e 4d 5d cf 21 21 41 cf 2e 40 c3
>e138	02 00 1f c0 18 2a 08 c1 85 8e 82 4d 5d 30 4d 5d
>e148	cf 21 21 41 cf 2e 40 c3 02 00 1f c0 17 34 08 c1
>e158	85 8e 82 4d 5d 2b 4d 5d cf 21 40 cf 2e 40 c3 02
>e168	00 1f c0 18 3e 08 c1 85 8e 82 4d 5d 2c 4d 5d cf
>e178	21 21 41 cf 2e 40 c3 02 00 1f c0 17 48 08 c1 85
>e188	8e 82 4d 5d 2f 4d 5d cf 21 40 cf 2e 40 c3 02 00
>e198	1f c0 16 52 08 c1 85 8e 82 53 28 49 73 cf 21 53
>e1a8	cf 2e 40 c3 02 00 1f c0 17 5c 08 c1 85 8e 82 53
>e1b8	29 49 73 cf 21 49 73 cf 2e 40 c3 02 00 1f c0 17
>e1c8	66 08 c1 85 8e 82 53 2a 49 73 cf 21 49 60 cf 2e
>e1d8	40 c3 02 00 1f c0 15 70 08 c1 85 8e 82 53 24 41
>e1e8	cf 21 49 cf 2e 40 c3 02 00 1f c0 15 7a 08 c1 85
>e1f8	8e 82 53 25 41 cf 21 66 cf 2e 40 c3 02 00 1f c0
>e208	1f 84 08 c1 85 8e 82 65 c3 02 32 ff 20 47 49 cf
>e218	21 47 6e c3 02 32 ff cf 2e 40 c3 02 00 1f c0 20
>e228	8e 08 c1 85 8e 82 65 c3 02 32 ff 21 47 49 cf 21
>e238	21 46 63 c3 02 68 ff cf 2e 40 c3 02 00 1f c0 21
>e248	98 08 c1 85 8e 82 65 c3 02 32 ff 22 47 49 cf 21
>e258	44 4a 5f c3 02 24 ff cf 2e 42 6a c3 02 55 2f c0
>e268	1f a2 08 c1 85 8e 82 65 c3 02 32 ff 23 47 49 cf
>e278	21 40 c3 03 08 17 ff cf 2e 40 c3 02 00 2f c0 17
>e288	ac 08 c1 85 8e 82 47 49 2d 47 49 cf 21 40 cf 2e
>e298	40 c3 02 00 1f c0 18 b6 08 c1 85 8e 82 47 49 2e
>e2a8	47 49 cf 21 21 41 cf 2e 40 c3 02 00 1f c0 18 c0
>e2b8	08 c1 85 8e 82 47 49 30 47 49 cf 21 21 41 cf 2e
>e2c8	40 c3 02 00 1f c0 17 ca 08 c1 85 8e 82 47 49 2b
>e2d8	47 49 cf 21 40 cf 2e 40 c3 02 00 1f c0 18 d4 08
>e2e8	c1 85 8e 82 47 49 2c 47 49 cf 21 21 41 cf 2e 40
>e2f8	c3 02 00 1f c0 17 de 08 c1 85 8e 82 47 49 2f 47
>e308	49 cf 21 40 cf 2e 40 c3 02 00 1f c0 18 e8 08 c1
>e318	85 8e 82 4e 68 28 4e 4a cf 21 4e 48 cf 2e 40 c3
>e328	02 00 2f c0 18 f2 08 c1 85 8e 82 4e 68 29 4e 4a
>e338	cf 21 4e 6a cf 2e 40 c3 02 00 2f c0 17 fc 08 c1
>e348	85 8e 82 4e 68 2a 4e 4a cf 21 62 cf 2e 40 c3 02
>e358	00 1f c0 16 06 09 c1 85 8e 82 4e 68 24 4c cf 21
>e368	40 cf 2e 40 c3 02 00 1f c0 19 10 09 c1 85 8e 82
>e378	4e 68 25 4c cf 21 4e 68 40 40 cf 2e 47 c3 02 66
>e388	8f c0 21 1a 09 c1 85 8e 82 21 43 77 20 44 7d c3
>e398	02 61 ff cf 21 41 46 c3 02 61 ff cf 2e 40 c3 02
>e3a8	00 1f c0 22 24 09 c1 85 8e 82 21 43 77 21 44 7d
>e3b8	c3 02 61 ff cf 21 21 48 74 c3 02 61 ff cf 2e 40
>e3c8	c3 02 00 1f c0 24 2e 09 c1 85 8e 82 21 43 77 22
>e3d8	44 7d c3 02 61 ff cf 21 21 53 49 71 c3 02 67 ff
>e3e8	cf 2e 4c 50 c3 02 49 7f c0 22 38 09 c1 85 8e 82
>e3f8	21 43 77 23 44 7d c3 02 61 ff cf 21 21 40 c3 03
>e408	77 77 ff cf 2e 40 c3 02 01 6f c0 1d 42 09 c1 85
>e418	8e 82 21 43 77 2d 44 7d c3 02 61 ff cf 21 21 41
>e428	cf 2e 40 c3 02 00 1f c0 1d 4c 09 c1 85 8e 82 21
>e438	43 77 2e 44 7d c3 02 61 ff cf 21 21 41 cf 2e 40
>e448	c3 02 00 1f c0 1c 56 09 c1 85 8e 82 21 43 77 30
>e458	44 7d c3 02 61 ff cf 21 40 cf 2e 40 c3 02 00 1f
>e468	c0 1c 60 09 c1 85 8e 82 21 43 77 2b 44 7d c3 02
>e478	61 ff cf 21 40 cf 2e 40 c3 02 00 1f c0 1c 6a 09
>e488	c1 85 8e 82 21 43 77 2c 44 7d c3 02 61 ff cf 21
>e498	40 cf 2e 40 c3 02 00 1f c0 1d 74 09 c1 85 8e 82
>e4a8	21 43 77 2f 44 7d c3 02 61 ff cf 21 21 41 cf 2e
>e4b8	40 c3 02 00 1f c0 18 7e 09 c1 85 8e 82 47 57 28
>e4c8	4a 7d cf 21 42 55 cf 2e 40 c3 02 00 1f c0 18 88
>e4d8	09 c1 85 8e 82 47 57 29 4a 7d cf 21 4f 7f cf 2e
>e4e8	40 c3 02 00 2f c0 18 92 09 c1 85 8e 82 47 57 2a
>e4f8	4a 7d cf 21 4d 6a cf 2e 40 c3 02 00 2f c0 16 9c
>e508	09 c1 85 8e 82 47 57 24 4b cf 21 40 cf 2e 40 c3
>e518	02 00 1f c0 19 a6 09 c1 85 8e 82 47 57 25 4b cf
>e528	21 43 6b 60 40 cf 2e 41 c3 02 92 9f c0 23 b0 09
>e538	c1 85 8e 82 21 42 59 20 21 4a 7a c3 02 92 ff cf
>e548	21 21 4d 53 c3 02 92 ff cf 2e 40 c3 02 00 2f c0
>e558	22 ba 09 c1 85 8e 82 21 42 59 21 21 4a 7a c3 02
>e568	92 ff cf 21 48 61 c3 02 92 ff cf 2e 40 c3 02 00
>e578	1f c0 24 c4 09 c1 85 8e 82 21 42 59 22 21 4a 7a
>e588	c3 02 92 ff cf 21 5a 46 76 c3 02 76 ff cf 2e 50
>e598	6d c3 02 34 8f c0 22 ce 09 c1 85 8e 82 21 42 59
>e5a8	23 21 4a 7a c3 02 92 ff cf 21 40 c3 03 21 89 ff
>e5b8	cf 2e 40 c3 02 00 4f c0 21 d8 09 c1 85 8e 82 21
>e5c8	4a 7a c3 02 92 ff 2d 21 4a 7a c3 02 92 ff cf 21
>e5d8	40 cf 2e 40 c3 02 00 1f c0 22 e2 09 c1 85 8e 82
>e5e8	21 4a 7a c3 02 92 ff 2e 21 4a 7a c3 02 92 ff cf
>e5f8	21 21 41 cf 2e 40 c3 02 00 1f c0 22 ec 09 c1 85
>e608	8e 82 21 4a 7a c3 02 92 ff 30 21 4a 7a c3 02 92
>e618	ff cf 21 21 41 cf 2e 40 c3 02 00 1f c0 21 f6 09
>e628	c1 85 8e 82 21 4a 7a c3 02 92 ff 2b 21 4a 7a c3
>e638	02 92 ff cf 21 40 cf 2e 40 c3 02 00 1f c0 22 00
>e648	0a c1 85 8e 82 21 4a 7a c3 02 92 ff 2c 21 4a 7a
>e658	c3 02 92 ff cf 21 21 41 cf 2e 40 c3 02 00 1f c0
>e668	21 0a 0a c1 85 8e 82 21 4a 7a c3 02 92 ff 2f 21
>e678	4a 7a c3 02 92 ff cf 21 40 cf 2e 40 c3 02 00 1f
>e688	c0 18 14 0a c1 85 8e 82 46 6a 28 4f 4f cf 21 46
>e698	4a cf 2e 40 c3 02 00 1f c0 18 1e 0a c1 85 8e 82
>e6a8	46 6a 29 4f 4f cf 21 4f 6f cf 2e 40 c3 02 00 2f
>e6b8	c0 18 28 0a c1 85 8e 82 46 6a 2a 4f 4f cf 21 49
>e6c8	65 cf 2e 40 c3 02 00 1f c0 16 32 0a c1 85 8e 82
>e6d8	46 6a 24 43 cf 21 75 cf 2e 40 c3 02 00 1f c0 17
>e6e8	3c 0a c1 85 8e 82 46 6a 25 43 cf 21 75 50 cf 2e
>e6f8	40 c3 02 00 7f c0 20 46 0a c1 85 8e 82 41 62 20
>e708	42 7c c3 02 42 ff cf 21 44 5e c3 02 42 ff cf 2e
>e718	40 c3 02 00 1f c0 21 50 0a c1 85 8e 82 41 62 21
>e728	42 7c c3 02 42 ff cf 21 21 41 5a c3 02 42 ff cf
>e738	2e 40 c3 02 00 1f c0 22 5a 0a c1 85 8e 82 41 62
>e748	22 42 7c c3 02 42 ff cf 21 44 60 61 c3 02 16 ff
>e758	cf 2e 42 78 c3 02 65 2f c0 20 64 0a c1 85 8e 82
>e768	41 62 23 42 7c c3 02 42 ff cf 21 40 c3 03 52 01
>e778	ff cf 2e 40 c3 02 01 ff c0 1c 6e 0a c1 85 8e 82
>e788	41 62 2d 42 7c c3 02 42 ff cf 21 21 41 cf 2e 40
>e798	c3 02 00 1f c0 1c 78 0a c1 85 8e 82 41 62 2e 42
>e7a8	7c c3 02 42 ff cf 21 21 41 cf 2e 40 c3 02 00 1f
>e7b8	c0 1b 82 0a c1 85 8e 82 41 62 30 42 7c c3 02 42
>e7c8	ff cf 21 40 cf 2e 40 c3 02 00 1f c0 1b 8c 0a c1
>e7d8	85 8e 82 41 62 2b 42 7c c3 02 42 ff cf 21 40 cf
>e7e8	2e 40 c3 02 00 1f c0 1b 96 0a c1 85 8e 82 41 62
>e7f8	2c 42 7c c3 02 42 ff cf 21 40 cf 2e 40 c3 02 00
>e808	1f c0 1c a0 0a c1 85 8e 82 41 62 2f 42 7c c3 02
>e818	42 ff cf 21 21 41 cf 2e 40 c3 02 00 1f c0 16 aa
>e828	0a c1 85 8e 82 4c 64 28 44 cf 21 44 cf 2e 40 c3
>e838	02 00 1f c0 17 b4 0a c1 85 8e 82 4c 64 29 44 cf
>e848	21 4c 64 cf 2e 40 c3 02 00 2f c0 17 be 0a c1 85
>e858	8e 82 4c 64 2a 44 cf 21 4c 60 cf 2e 40 c3 02 00
>e868	2f c0 16 c8 0a c1 85 8e 82 4c 64 24 4d cf 21 40
>e878	cf 2e 40 c3 02 00 1f c0 24 d2 0a c1 85 8e 82 4e
>e888	5a c3 02 27 ff 20 21 44 59 c3 01 1f cf 21 4a 41
>e898	c3 02 17 ff cf 2e 40 c3 02 00 1f c0 24 dc 0a c1
>e8a8	85 8e 82 4e 5a c3 02 27 ff 21 21 44 59 c3 01 1f
>e8b8	cf 21 52 73 c3 02 37 ff cf 2e 40 c3 02 00 2f c0
>e8c8	27 e6 0a c1 85 8e 82 4e 5a c3 02 27 ff 22 21 44
>e8d8	59 c3 01 1f cf 21 21 7f 52 72 c3 02 09 7f cf 2e
>e8e8	68 60 c3 02 50 1f c0 25 f0 0a c1 85 8e 82 4e 5a
>e8f8	c3 02 27 ff 23 21 44 59 c3 01 1f cf 21 21 43 c3
>e908	03 28 09 ff cf 2e 40 c3 02 06 6f c0 1f fa 0a c1
>e918	85 8e 82 4e 5a c3 02 27 ff 2d 21 44 59 c3 01 1f
>e928	cf 21 40 cf 2e 40 c3 02 00 1f c0 1f 04 0b c1 85
>e938	8e 82 4e 5a c3 02 27 ff 2e 21 44 59 c3 01 1f cf
>e948	21 40 cf 2e 40 c3 02 00 1f c0 1f 0e 0b c1 85 8e
>e958	82 4e 5a c3 02 27 ff 30 21 44 59 c3 01 1f cf 21
>e968	40 cf 2e 40 c3 02 00 1f c0 20 18 0b c1 85 8e 82
>e978	4e 5a c3 02 27 ff 2b 21 44 59 c3 01 1f cf 21 21
>e988	41 cf 2e 40 c3 02 00 1f c0 20 22 0b c1 85 8e 82
>e998	4e 5a c3 02 27 ff 2c 21 44 59 c3 01 1f cf 21 21
>e9a8	41 cf 2e 40 c3 02 00 1f c0 20 2c 0b c1 85 8e 82
>e9b8	4e 5a c3 02 27 ff 2f 21 44 59 c3 01 1f cf 21 21
>e9c8	41 cf 2e 40 c3 02 00 1f c0 18 36 0b c1 85 8e 82
>e9d8	48 45 28 49 42 cf 21 48 40 cf 2e 40 c3 02 00 1f
>e9e8	c0 18 40 0b c1 85 8e 82 48 45 29 49 42 cf 21 49
>e9f8	47 cf 2e 40 c3 02 00 1f c0 18 4a 0b c1 85 8e 82
>ea08	48 45 2a 49 42 cf 21 41 47 cf 2e 40 c3 02 00 1f
>ea18	c0 17 54 0b c1 85 8e 82 48 45 24 42 cf 21 42 41
>ea28	cf 2e 40 c3 02 00 1f c0 17 5e 0b c1 85 8e 82 48
>ea38	45 25 42 cf 21 60 54 cf 2e 40 c3 02 00 4f c0 25
>ea48	68 0b c1 85 8e 82 21 4e 54 c3 01 1f 20 44 7d c3
>ea58	02 13 ff cf 21 21 49 56 c3 02 97 ff cf 2e 40 c3
>ea68	02 00 1f c0 25 72 0b c1 85 8e 82 21 4e 54 c3 01
>ea78	1f 21 44 7d c3 02 13 ff cf 21 21 53 51 c3 02 23
>ea88	ff cf 2e 40 c3 02 00 2f c0 28 7c 0b c1 85 8e 82
>ea98	21 4e 54 c3 01 1f 22 44 7d c3 02 13 ff cf 21 21
>eaa8	41 46 7b 5a c3 02 79 3f cf 2e 6d 59 c3 02 22 8f
>eab8	c0 25 86 0b c1 85 8e 82 21 4e 54 c3 01 1f 23 44
>eac8	7d c3 02 13 ff cf 21 21 42 c3 03 88 87 ff cf 2e
>ead8	40 c3 02 05 8f c0 1f 90 0b c1 85 8e 82 44 7d c3
>eae8	02 13 ff 2d 44 7d c3 02 13 ff cf 21 40 cf 2e 40
>eaf8	c3 02 00 1f c0 20 9a 0b c1 85 8e 82 44 7d c3 02
>eb08	13 ff 2e 44 7d c3 02 13 ff cf 21 21 41 cf 2e 40
>eb18	c3 02 00 1f c0 20 a4 0b c1 85 8e 82 44 7d c3 02
>eb28	13 ff 30 44 7d c3 02 13 ff cf 21 21 41 cf 2e 40
>eb38	c3 02 00 1f c0 1f ae 0b c1 85 8e 82 44 7d c3 02
>eb48	13 ff 2b 44 7d c3 02 13 ff cf 21 40 cf 2e 40 c3
>eb58	02 00 1f c0 20 b8 0b c1 85 8e 82 44 7d c3 02 13
>eb68	ff 2c 44 7d c3 02 13 ff cf 21 21 41 cf 2e 40 c3
>eb78	02 00 1f c0 1f c2 0b c1 85 8e 82 44 7d c3 02 13
>eb88	ff 2f 44 7d c3 02 13 ff cf 21 40 cf 2e 40 c3 02
>eb98	00 1f c0 18 cc 0b c1 85 8e 82 4c 44 28 47 7b cf
>eba8	21 44 40 cf 2e 40 c3 02 00 1f c0 18 d6 0b c1 85
>ebb8	8e 82 4c 44 29 47 7b cf 21 4f 7f cf 2e 40 c3 02
>ebc8	00 2f c0 18 e0 0b c1 85 8e 82 4c 44 2a 47 7b cf
>ebd8	21 4b 7f cf 2e 40 c3 02 00 2f c0 16 ea 0b c1 85
>ebe8	8e 82 4c 44 24 45 cf 21 58 cf 2e 40 c3 02 00 1f
>ebf8	c0 18 f4 0b c1 85 8e 82 4c 44 25 45 cf 21 46 42
>ec08	40 cf 2e 40 c3 02 04 9f c0 08 fe 0b c9 4f 7f 7f
>ec18	c0 00

;******  End of listing
