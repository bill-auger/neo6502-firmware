// ***************************************************************************************
// ***************************************************************************************
//
//      Name :      dispatch.config
//      Authors :   Paul Robson (paul@robsons.org.uk)
//      Date :      22nd November 2023
//      Reviewed :  No
//      Purpose :   Dispatched for commands
//
// ***************************************************************************************
// ***************************************************************************************

// ***************************************************************************************
//
//									Group 1 (System)
//
// ***************************************************************************************

group 1
	function 0 										// Function 0 resets the interface
		DSPReset();

	function 1 										// Function 1 copies the 32 bit system timer
		*((uint32_t *)DPARAMS) = TMRRead(); 		// (assumes littleendian)

	function 2 										// Function 2 status reads the keyboard state.
		i1 = *DPARAMS;
		*DPARAMS = (i1 < KBD_MAX_KEYCODE) ? KBDGetStateArray()[i1] : 0;
	
	function 3 										// Function 3 loads BASIC into memory
		MEMLoadBasic();

	function 4 	  									// Function 4 contributor list.
		CONWriteString((char *)whoList);

// ***************************************************************************************
//
//									Group 2 (Console)
//
// ***************************************************************************************

group 2
	function 0 										// Function 0 is console out
		CONWrite(*DPARAMS);
	function 1 										// Function 1 is console in
		*(DPARAMS) = KBDGetKey();
	function 2 										// Function 2 is key available in queue
		*(DPARAMS) = KBDIsKeyAvailable() ? 0xFF: 0;
	function 3 										// Function 3 is line input
		CONGetScreenLine(DSPGetInt16(DCOMMAND,4));
	function 4  									// Function 4 is define function key.
		*DERROR = KBDSetFunctionKey(*(DCOMMAND+4),DSPGetString(DCOMMAND,6));

// ***************************************************************************************
//
//									Group 3 (File I/O)
//
// ***************************************************************************************

group 3
	function 1 										// Function 1 is directory listing
		FIODirectory();
		
	function 2 										// Function 2 is load file
		*DERROR = FIOReadFile(DSPGetString(DCOMMAND,4),DSPGetInt16(DCOMMAND,6));

	function 3 										// Function 3 is save file
		*DERROR = FIOWriteFile(DSPGetString(DCOMMAND,4),DSPGetInt16(DCOMMAND,6),DSPGetInt16(DCOMMAND,8));

// ***************************************************************************************
//
//									Group 4 (Mathematics)
//
// ***************************************************************************************

group 4
	include 	maths_binary.config
	include 	maths_unary.config
	include 	maths_other.config

// ***************************************************************************************
//
//									Group 5 (Graphics)
//
// ***************************************************************************************

group 5
	function 	1 									// Function 1, set defaults
		GFXSetDefaults(DCOMMAND);
	function 	2 									// Function 2, line draw
		GFXGraphicsCommand(2,DCOMMAND);
	function 	3 									// Function 3, rectangle draw
		GFXGraphicsCommand(3,DCOMMAND);
	function 	4 									// Function 4, ellipse draw
		GFXGraphicsCommand(4,DCOMMAND);
	function 	5 									// Function 5, pixel draw
		GFXGraphicsCommand(5,DCOMMAND);
	function 	6 									// Function 6, text draw.
		GFXGraphicsCommand(6,DCOMMAND);

	function 	32 									// Function 32, set palette.
		gMode.setPalette(DPARAMS[0],DPARAMS[1],DPARAMS[2],DPARAMS[3]);