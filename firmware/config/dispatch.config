// ***************************************************************************************
// ***************************************************************************************
//
//      Name :      dispatch.config
//      Authors :   Paul Robson (paul@robsons.org.uk)
//      Date :      22nd November 2023
//      Reviewed :  No
//      Purpose :   Dispatched for commands
//
// ***************************************************************************************
// ***************************************************************************************

// ***************************************************************************************
//
//									Group 1 (System)
//
// ***************************************************************************************

group 1
	function 0 										// Function 0 resets the interface
		DSPReset();

	function 1 										// Function 1 copies the 32 bit system timer
		*((uint32_t *)DPARAMS) = TMRRead(); 		// (assumes littleendian)

// ***************************************************************************************
//
//									Group 0 (Console)
//
// ***************************************************************************************

group 2
	function 0 										// Function 0 is console out
		CONWrite(*DPARAMS);
	function 1 										// Function 1 is console in
		*(DPARAMS) = KBDGetKey();
	function 2 										// Function 2 is key available in queue
		*(DPARAMS) = KBDIsKeyAvailable() ? 0xFF: 0;

// ***************************************************************************************
//
//									Group 2 (File I/O)
//
// ***************************************************************************************

group 3

// ***************************************************************************************
//
//									Group 3 (Mathematics)
//
// ***************************************************************************************

group 4
	function 16
		if (MATHIsFloatUnary()) {
			MATHWriteFloat(-MATHReadFloat(MATH_REG1),MATH_REG1);
		} else {
			MATHWriteInt(-MATHReadInt(MATH_REG1),MATH_REG1);
		}
	function 32
		MATHProcessDecimal(DCOMMAND);

		
// 0 	add
// 1  	subtract
// 2 	multiply
// 3 	divide
// 4 	integer divide
// 5 	integer modulus
// 6 	compare

// 16 	negate
// 17 	random.float
// 18  random.int
// 19 	abs
// 20 	int
// 21 	frac
// 22 	sqr
// 23 	sin
// 24 	cos
// 25 	tan
// 26 	atan
// 27 	log
// 28 	exp

// 32 	decimal expand		