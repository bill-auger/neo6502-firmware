# ***************************************************************************************
# ***************************************************************************************
#
#      Name :      triangle.py
#      Authors :   Paul Robson (paul@robsons.org.uk)
#      Date :      23rd Jan 2024
#      Reviewed :  No
#      Purpose :   Generates bitmaps for angles 0..359, 16x16 bits each
#
# ***************************************************************************************
# ***************************************************************************************

import math 
from PIL import Image,ImageDraw

class Triangle(object):
	def __init__(self,angle = 45):
		self.image = Image.new(mode='RGB',size=(16,16),color="red")
		draw = ImageDraw.Draw(self.image)
		draw.polygon((8,0,13,14,3,14),fill=(255,255,255))
		if angle != 0:
			self.image = self.image.rotate(-angle,fillcolor="red")
		#self.image.save("triangle.png")

	def convert(self):
		bitPattern = [ 0 ] * 16
		for x in range(0,16):
			for y in range(0,16):
				c = self.image.getpixel((x,y))[2]
				if c >= 128:
					bitPattern[y] |= (0x8000 >> x)
		return bitPattern

triangleBits = []
for angle in range(0,360):
	t = Triangle(angle)
	triangleBits += t.convert()
assert len(triangleBits) == 360 * 16

print("//\n//\tThis file is automatically generated.\n//\n")
print("static const uint16_t triangleBitData[] = {")
print(",".join(["0x{0:04x}".format(b) for b in triangleBits]))
print("};")