// ***************************************************************************************
// ***************************************************************************************
//
//      Name :      maths_unary.config
//      Authors :   Paul Robson (paul@robsons.org.uk)
//      Date :      1st December 2023
//      Reviewed :  No
//      Purpose :   Maths "co-processor" unary ops
//
// ***************************************************************************************
// ***************************************************************************************

	#define FROMRADIANS(n) 	((n) * 180.0 / M_PI)		
	#define TORADIANS(n) ((n) * M_PI / 180.0)


	function 16  									// Unary negate 
		if (MATHIsFloatUnary()) {
			MATHWriteFloat(-MATHReadFloat(MATH_REG1),MATH_REG1);
		} else {
			MATHWriteInt(-MATHReadInt(MATH_REG1),MATH_REG1);
		}

	function 17  									// Integer part
		if (MATHIsFloatBinary()) {
			f1 = floor(MATHReadFloat(MATH_REG1));
			MATHWriteInt((uint32_t)f1,MATH_REG1);
		}

	function 18 									// Sqrt
		f1 = MATHReadFloat(MATH_REG1);
		if (f1 >= 0) {
			MATHWriteFloat(sqrt(f1),MATH_REG1);
		} else {
			*DERROR = 1;
		}

	function 19 									// Sine
		f1 = MATHReadFloat(MATH_REG1);
		MATHWriteFloat(sin(TORADIANS(f1)),MATH_REG1);

	function 20 									// Cosine
		f1 = MATHReadFloat(MATH_REG1);
		MATHWriteFloat(cos(TORADIANS(f1)),MATH_REG1);

	function 21 									// Tangent
		f1 = MATHReadFloat(MATH_REG1);
		MATHWriteFloat(tan(TORADIANS(f1)),MATH_REG1);

	function 22 									// Arc Tangent
		f1 = MATHReadFloat(MATH_REG1);
		MATHWriteFloat(FROMRADIANS(atan(f1)),MATH_REG1);

	function 23 									// Exponent
		f1 = MATHReadFloat(MATH_REG1);
		MATHWriteFloat(exp(f1),MATH_REG1);

	function 24 									// Logarithm (e)
		f1 = MATHReadFloat(MATH_REG1);
		if (f1 >= 0) {
			MATHWriteFloat(log(f1),MATH_REG1);
		} else {
			*DERROR = 1;
		}

	function 25 									// Absolute value
		if (MATHIsFloatUnary()) {
			MATHWriteFloat(fabs(MATHReadFloat(MATH_REG1)),MATH_REG1);
		} else {
			u1 = MATHReadInt(MATH_REG1);
			if (u1 & 0x80000000) {
				MATHWriteInt(-u1,MATH_REG1);
			}
		}

	function 26 									// Sign
		u1 = 0;
		if (MATHIsFloatUnary()) {
			f1 = MATHReadFloat(MATH_REG1);
			if (f1 != 0.0) u1 = (f1 < 0) ? -1 : 1;
		} else {
			i1 = MATHReadInt(MATH_REG1);
			if (i1 != 0) u1 = (i1 < 0) ? -1 : 1;
		}
		MATHWriteInt(u1,MATH_REG1);

	function 27 									// Random (float)
		f1 = (rand() % 100000) / 100000.0;
		MATHWriteFloat(f1,MATH_REG1);

	function 28  									// Random (int, range)
		u1 = MATHReadInt(MATH_REG1);
		if (u1 > 0) {
			MATHWriteInt(rand() % u1,MATH_REG1);
		}
		
