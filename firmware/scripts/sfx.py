# ***************************************************************************************
# ***************************************************************************************
#
#      Name :      sfx.py
#      Authors :   Paul Robson (paul@robsons.org.uk)
#				   Turi Scandurra
#      Date :      10th January 2024
#      Reviewed :  No
#      Purpose :   Create the sound effect data.
#
# ***************************************************************************************
# ***************************************************************************************

import sys,os,re,random

class Translator(object):
	def __init__(self):
		self.tempo = 600
		self.pitches8 = { "C":4186.009, "CS":4435.922, "D":4698.636, "DS":4978.032, "E":5274.041, "F":5587.652, "FS":5919.911, 
																"G":6271.927, "GS":6644.875, "A":7040.000, "AS":7458.620, "B":7902.133 }
	#
	#		Translate to constant list.
	#									
	def translate(self,sfx):							
		if sfx[0].startswith("EXPL"):
			tSample = 1
			xlat = []
			for i in range(0,int(sfx[0][4:]) // (tSample+1)):
				xlat.append(random.randint(0,500)+200)
				xlat.append(tSample)
				
		elif sfx[0].startswith("LAS"):
			tSample = 1
			xlat = []
			length = int(sfx[0][3:]) // (tSample+1)
			for i in range(0,length):
				xlat.append(600-400*i // length)
				xlat.append(tSample)
		else:
			sfx = sfx[1:]
			xlat = []
			while len(sfx) != 0:
				xlat.append(self.pitch(sfx[0]))
				time = sfx[1]
				time = time if time > 0 else -time * 3//2
				xlat.append(max(1,self.tempo // time))
				sfx = sfx[2:]
		return xlat + [ 0xFFFF]
	#
	# 		Pitch to frequency, handles REST and CM1
	#
	def pitch(self,s):
		if s == "REST":
			return 0
		if s == "CM1":
			return 8
		return round(self.pitches8[s[:-1]] * pow(2,int(s[-1])-8))

# ***************************************************************************************
#
#							Sound effect data. 
#
# ***************************************************************************************

sfxData = [
    ["POSITIVE","C4",16,"AS4",16,"C5",16,"REST",8],
    ["NEGATIVE","C5",16,"AS4",16,"C4",16,"REST",8],
    ["ERROR","C6",32,"REST",64,"C6",32,"REST",64,"C4",32,"REST",64,"C4",32,"REST",64,"REST",8],
    ["CONFIRM","C7",128,"REST",128,"C7",128,"REST",128,"C7",128,"REST",128,"C7",128,"REST",128,"REST",8],

    ["REJECT","CM1",128,"REST",128,"CM1",128,"REST",128,"CM1",128,"REST",128,"CM1",128,"REST",128,"REST",8],
    ["SWEEP","CM1",128,"C0",128,"C1",128,"C2",128,"C3",128,"C4",128,"C5",128,"C6",128,"C7",128,"C8",128,"C9",128,"REST",8],
    ["COIN","C6",32,"C7",16,"REST",8],
    ["LAS70"],
    
    ["POWERUP","C5",128,"CS5",128,"D5",128,"DS5",128,"E5",128,"F5",128,"FS5",128,"G5",128,"REST",8],
    ["VICTORY","G4",8,"G4",16,"G4",16,"D5",4,"REST",8],
    ["DEFEAT","C4",16,"AS3",16,"G3",16,"E3",16,"C3",16,"REST",8],
    ["FANFARE","C4",-4,"E4",8,"G4",8,"C5",2,"REST",8],
    
    ["ALARM_1","C7",8,"A6",8,"REST",4],
    ["ALARM_2","C8",8,"REST",32,"C8",8,"REST",4],
    ["ALARM_3","C7",32,"REST",-32,"C7",32,"REST",-32,"C7",32,"REST",-32,"C7",32,"REST",-32,"REST",4],
    ["RINGTONE_1","A7",64,"A6",64,"A7",64,"A6",64,"A7",64,"A6",64,"A7",64,"A6",64,"A7",64,"A6",64,"A7",64,"A6",64,"A7",64,"A6",64,"A7",64,"A6",64],
    
    ["RINGTONE_2","D7",128,"E6",128,"D7",128,"E6",128,"D7",128,"E6",128,"D7",128,"E6",128,"D7",128,"E6",128,"D7",128,"E6",128,"D7",128,"E6",128,"D7",128,"E6",128],
    ["RINGTONE_3","E8",128,"C8",128,"E8",128,"C8",128,"E8",128,"C8",128,"E8",128,"C8",128,"E8",128,"C8",128,"E8",128,"C8",128,"E8",128,"C8",128,"E8",128,"C8",128],
    ["DANGER","FS5",8,"REST",-8,"FS5",8,"REST",-8,"FS5",8,"REST",-8,"FS5",8,"REST",-8],
    ["EXPL100"],
    ["EXPL50"],
    ["EXPL20"],    
    ["LAS30"],
    ["LAS10"]
]

tx = Translator()
sfxCount = 0
print("//\n//\tThis file is automatically generated.\n//")
for s in sfxData:
	print("// {0} {1}".format(sfxCount,s[0].lower()))
	print("static const uint16_t sfxData{0}[] = {{".format(sfxCount))
	dat = tx.translate(s)
	print("{0} }};".format(",".join([str(x) for x in dat])))
	sfxCount += 1

print("static const uint16_t *sfxData[] = {")
for i in range(0,sfxCount):
	print("\tsfxData{0},".format(i))
print("};")

print("#define SFX_COUNT ({0})".format(sfxCount))