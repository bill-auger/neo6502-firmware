;
; File generated by cc65 v 2.18 - Git ece63f0
;
	.fopt		compiler,"cc65 v 2.18 - Git ece63f0"
	.setcpu		"65C02"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_cmd
	.export		_write
	.export		_drawLine
	.export		_main

.segment	"DATA"

_cmd:
	.word	$FF00

.segment	"RODATA"

L0049:
	.byte	$68,$65,$6C,$6C,$6F,$20,$77,$6F,$72,$6C,$64,$0A,$00
L0045	:=	L0049+0

; ---------------------------------------------------------------
; int __near__ write (__near__ unsigned char *, unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_write: near

.segment	"CODE"

	jsr     pushax
	bra     L0005
L0007:	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	lda     (ptr1)
	bne     L0007
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	lda     #$00
	ldy     #$01
	sta     (ptr1),y
	lda     _cmd
	ldx     _cmd+1
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	sta     regsave
	stx     regsave+1
	ina
	bne     L0012
	inx
L0012:	ldy     #$04
	jsr     staxysp
	lda     (regsave)
	ldy     #$04
	jsr     staspidx
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	lda     #$02
	sta     (ptr1)
L0005:	jsr     ldax0sp
	sta     regsave
	stx     regsave+1
	jsr     decax1
	jsr     stax0sp
	lda     regsave
	ora     regsave+1
	bne     L0007
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ drawLine (int, int, int, int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawLine: near

.segment	"CODE"

	jsr     pushax
L0017:	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	lda     (ptr1)
	bne     L0017
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	ldy     #$06
	lda     (sp),y
	ldy     #$04
	sta     (ptr1),y
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	ldy     #$07
	lda     (sp),y
	ldy     #$05
	sta     (ptr1),y
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	dey
	lda     (sp),y
	ldy     #$06
	sta     (ptr1),y
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	dey
	lda     (sp),y
	ldy     #$07
	sta     (ptr1),y
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	ldy     #$08
	sta     (ptr1),y
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	ldy     #$03
	lda     (sp),y
	ldy     #$09
	sta     (ptr1),y
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	lda     (sp)
	iny
	sta     (ptr1),y
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	ldy     #$01
	lda     (sp),y
	ldy     #$0B
	sta     (ptr1),y
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	lda     #$02
	ldy     #$01
	sta     (ptr1),y
	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	lda     #$05
	dey
	sta     (ptr1)
L003E:	lda     _cmd+1
	sta     ptr1+1
	lda     _cmd
	sta     ptr1
	lda     (ptr1),y
	bne     L003E
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	lda     #<(L0045)
	ldx     #>(L0045)
	jsr     pushax
	ldx     #$00
	lda     #$0C
	jsr     _write
	lda     #<(L0049)
	ldx     #>(L0049)
	jsr     pushax
	ldx     #$00
	lda     #$0C
	jsr     _write
	lda     #$0A
	jsr     pusha0
	jsr     pusha0
	lda     #$64
	jsr     pusha0
	jsr     _drawLine
	ldx     #$00
	txa
	rts

.endproc

