
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass -b --mr65c02 -Wall -D NEO=1 -o build/a1basic.bin -L build/a1basic.lst build/neo6502.inc a1basic.asm
; Thu Nov 23 16:33:52 2023

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=1					NEO=1

;******  Processing input file: build/neo6502.inc

=$ffee					ReadCharacter = $ffee
=$fff1					WriteCharacter = $fff1
=$fff4					WaitMessage = $fff4
=$fff7					SendMessage = $fff7

;******  Processing input file: a1basic.asm

=$1d					Z1d     =       $1D
=$24					ch      =       $24     ; horizontal cursor location
=$48					var     =       $48
=$4a					lomem   =       $4A     ; lower limit of memory used by BASIC (2 bytes)
=$4c					himem   =       $4C     ; upper limit of memory used by BASIC (2 bytes)
=$4e					rnd     =       $4E     ; random number (2 bytes)
=$50					noun_stk_l =    $50
=$58					syn_stk_h =     $58     ; through $77
=$78					noun_stk_h_str = $78
=$80					syn_stk_l  =    $80     ; through $9F
=$a0					noun_stk_h_int = $A0
=$a8					txtndxstk  =    $A8     ; through $C7
=$c8					text_index =    $C8     ; index into text being tokenized (in buffer at $0200)
=$c9					leadbl  =       $C9     ; leading blanks
=$ca					pp      =       $CA     ; pointer to end of program (2 bytes)
=$cc					pv      =       $CC     ; pointer to end of variable storage (2 bytes)
=$ce					acc     =       $CE     ; (2 bytes)
=$d0					srch    =       $D0
=$d1					tokndxstk =     $D1
=$d2					srch2   =       $D2
=$d4					if_flag =       $D4
=$d5					cr_flag =       $D5
=$d6					current_verb =  $D6
=$d7					precedence =    $D7
=$d8					x_save  =       $D8
=$d9					run_flag =      $D9
=$da					aux     =       $DA
=$dc					pline   =       $DC     ; pointer to current program line (2 bytes)
=$e0					pverb   =       $E0     ; pointer to current verb (2 bytes)
=$e2					p1      =       $E2
=$e4					p2      =       $E4
=$e6					p3      =       $E6
=$f1					token_index =   $F1    ; pointer used to write tokens into buffer  2 bytes)
=$f2					pcon    =       $F2    ; temp used in decimal output (2 bytes)
=$f4					auto_inc =      $F4
=$f6					auto_ln =       $F6
=$f8					auto_flag =     $F8
=$f9					cchar   =       $F9
=$fa					leadzr  =       $FA
=$fb					for_nest_count = $FB    ; count of active (nested) FOR loops
=$fc					gosub_nest_count = $FC  ; count of active (nested) subroutines calls (GOSUB)
=$fd					synstkdx =      $FD
=$fe					synpag  =       $FE
=$0100					gstk_pverbl     =       $0100    ; saved pverb
=$0108					gstk_pverbh     =       $0108
=$0110					gstk_plinel     =       $0110    ; saved pline
=$0118					gstk_plineh     =       $0118
=$0120					fstk_varl       =       $0120   ; pointer to index variable
=$0128					fstk_varh       =       $0128
=$0130					fstk_stepl      =       $0130   ; step value
=$0138					fstk_steph      =       $0138
=$0140					fstk_plinel     =       $0140   ; saved pline
=$0148					fstk_plineh     =       $0148
=$0150					fstk_pverbl     =       $0150   ; saved pverb
=$0158					fstk_pverbh     =       $0158
=$0160					fstk_tol        =       $0160   ; "to" (limit) value
=$0168					fstk_toh        =       $0168
=$0200					buffer  =       $0200
.e000	4c b0 e2	jmp $e2b0	START:  JMP     cold            ; BASIC cold start entry point

;******  Processing file: hardware/keyboard.asm

.e003	20 ee ff	jsr $ffee	rdkey:  jsr     ReadCharacter
.e006	20 00 f0	jsr $f000	        jsr     FlipCharacterCase
.e009	09 80		ora #$80	        ora     #$80
.e00b	60		rts		        rts

;******  Return to file: a1basic.asm

.e00c	8a		txa		Se00c:  TXA
.e00d	29 20		and #$20	        AND     #$20
.e00f	f0 23		beq $e034	        BEQ     Le034
.e011	a9 a0		lda #$a0	Se011:  LDA     #$A0
.e013	85 e4		sta $e4		        STA     p2
.e015	4c c9 e3	jmp $e3c9	        JMP     cout
.e018	a9 20		lda #$20	Se018:  LDA     #$20
.e01a	c5 24		cmp $24		Se01a:  CMP     ch
.e01c	b0 0c		bcs $e02a	        BCS     nextbyte
.e01e	a9 8d		lda #$8d	        LDA     #$8D
.e020	a0 07		ldy #$07	        LDY     #$07
.e022	20 c9 e3	jsr $e3c9	Le022:  JSR     cout
.e025	a9 a0		lda #$a0	        LDA     #$A0
.e027	88		dey		        DEY
.e028	d0 f8		bne $e022	        BNE     Le022
.e02a	a0 00		ldy #$00	nextbyte:       LDY     #$00
.e02c	b1 e2		lda ($e2),y	        LDA     (p1),Y
.e02e	e6 e2		inc $e2		        INC     p1
.e030	d0 02		bne $e034	        BNE     Le034
.e032	e6 e3		inc $e3		        INC     p1+1
.e034	60		rts		Le034:  RTS
.e035	20 15 e7	jsr $e715	list_comman:    JSR     get16bit
.e038	20 76 e5	jsr $e576	        JSR     find_line2
.e03b	a5 e2		lda $e2		Le03b:  LDA     p1
.e03d	c5 e6		cmp $e6		        CMP     p3
.e03f	a5 e3		lda $e3		        LDA     p1+1
.e041	e5 e7		sbc $e7		        SBC     p3+1
.e043	b0 ef		bcs $e034	        BCS     Le034
.e045	20 6d e0	jsr $e06d	        JSR     list_line
.e048	4c 3b e0	jmp $e03b	        JMP     Le03b
.e04b	a5 ca		lda $ca		list_all:       LDA     pp
.e04d	85 e2		sta $e2		        STA     p1
.e04f	a5 cb		lda $cb		        LDA     pp+1
.e051	85 e3		sta $e3		        STA     p1+1
.e053	a5 4c		lda $4c		        LDA     himem
.e055	85 e6		sta $e6		        STA     p3
.e057	a5 4d		lda $4d		        LDA     himem+1
.e059	85 e7		sta $e7		        STA     p3+1
.e05b	d0 de		bne $e03b	        BNE     Le03b
.e05d	20 15 e7	jsr $e715	list_cmd:       JSR     get16bit
.e060	20 6d e5	jsr $e56d	        JSR     find_line
.e063	a5 e4		lda $e4		        LDA     p2
.e065	85 e2		sta $e2		        STA     p1
.e067	a5 e5		lda $e5		        LDA     p2+1
.e069	85 e3		sta $e3		        STA     p1+1
.e06b	b0 c7		bcs $e034	        BCS     Le034
.e06d	86 d8		stx $d8		list_line:      STX     x_save
.e06f	a9 a0		lda #$a0	        LDA     #$A0
.e071	85 fa		sta $fa		        STA     leadzr
.e073	20 2a e0	jsr $e02a	        JSR     nextbyte
.e076	98		tya		        TYA
.e077	85 e4		sta $e4		list_int:       STA     p2
.e079	20 2a e0	jsr $e02a	        JSR     nextbyte
.e07c	aa		tax		        TAX
.e07d	20 2a e0	jsr $e02a	        JSR     nextbyte
.e080	20 1b e5	jsr $e51b	        JSR     prdec
.e083	20 18 e0	jsr $e018	Le083:  JSR     Se018
.e086	84 fa		sty $fa		        STY     leadzr
.e088	aa		tax		        TAX
.e089	10 18		bpl $e0a3	        BPL     list_token
.e08b	0a		asl a		        ASL     A
.e08c	10 e9		bpl $e077	        BPL     list_int
.e08e	a5 e4		lda $e4		        LDA     p2
.e090	d0 03		bne $e095	        BNE     Le095
.e092	20 11 e0	jsr $e011	        JSR     Se011
.e095	8a		txa		Le095:  TXA
.e096	20 c9 e3	jsr $e3c9	Le096:  JSR     cout
.e099	a9 25		lda #$25	Le099:  LDA     #$25
.e09b	20 1a e0	jsr $e01a	        JSR     Se01a
.e09e	aa		tax		        TAX
.e09f	30 f5		bmi $e096	        BMI     Le096
.e0a1	85 e4		sta $e4		        STA     p2
.e0a3	c9 01		cmp #$01	list_token:     CMP     #$01
.e0a5	d0 05		bne $e0ac	        BNE     Le0ac
.e0a7	a6 d8		ldx $d8		        LDX     x_save
.e0a9	4c cd e3	jmp $e3cd	        JMP     crout
.e0ac	48		pha		Le0ac:  PHA
.e0ad	84 ce		sty $ce		        STY     acc
.e0af	a2 ed		ldx #$ed	        LDX     #>syntabl2
.e0b1	86 cf		stx $cf		        STX     acc+1
.e0b3	c9 51		cmp #$51	        CMP     #$51
.e0b5	90 04		bcc $e0bb	        BCC     Le0bb
.e0b7	c6 cf		dec $cf		        DEC     acc+1
.e0b9	e9 50		sbc #$50	        SBC     #$50
.e0bb	48		pha		Le0bb:  PHA
.e0bc	b1 ce		lda ($ce),y	        LDA     (acc),Y
.e0be	aa		tax		Le0be:  TAX
.e0bf	88		dey		        DEY
.e0c0	b1 ce		lda ($ce),y	        LDA     (acc),Y
.e0c2	10 fa		bpl $e0be	        BPL     Le0be
.e0c4	e0 c0		cpx #$c0	        CPX     #$C0
.e0c6	b0 04		bcs $e0cc	        BCS     Le0cc
.e0c8	e0 00		cpx #$00	        CPX     #$00
.e0ca	30 f2		bmi $e0be	        BMI     Le0be
.e0cc	aa		tax		Le0cc:  TAX
.e0cd	68		pla		        PLA
.e0ce	e9 01		sbc #$01	        SBC     #$01
.e0d0	d0 e9		bne $e0bb	        BNE     Le0bb
.e0d2	24 e4		bit $e4		        BIT     p2
.e0d4	30 03		bmi $e0d9	        BMI     Le0d9
.e0d6	20 f8 ef	jsr $eff8	        JSR     Seff8
.e0d9	b1 ce		lda ($ce),y	Le0d9:  LDA     (acc),Y
.e0db	10 10		bpl $e0ed	        BPL     Le0ed
.e0dd	aa		tax		        TAX
.e0de	29 3f		and #$3f	        AND     #$3F
.e0e0	85 e4		sta $e4		        STA     p2
.e0e2	18		clc		        CLC
.e0e3	69 a0		adc #$a0	        ADC     #$A0
.e0e5	20 c9 e3	jsr $e3c9	        JSR     cout
.e0e8	88		dey		        DEY
.e0e9	e0 c0		cpx #$c0	        CPX     #$C0
.e0eb	90 ec		bcc $e0d9	        BCC     Le0d9
.e0ed	20 0c e0	jsr $e00c	Le0ed:  JSR     Se00c
.e0f0	68		pla		        PLA
.e0f1	c9 5d		cmp #$5d	        CMP     #$5D
.e0f3	f0 a4		beq $e099	        BEQ     Le099
.e0f5	c9 28		cmp #$28	        CMP     #$28
.e0f7	d0 8a		bne $e083	        BNE     Le083
.e0f9	f0 9e		beq $e099	        BEQ     Le099
.e0fb	20 18 e1	jsr $e118	paren_substr:   JSR     Se118
.e0fe	95 50		sta $50,x	        STA     noun_stk_l,X
.e100	d5 78		cmp $78,x	        CMP     noun_stk_h_str,X
.e102	90 11		bcc $e115	Le102:  BCC     Le115
.e104	a0 2b		ldy #$2b	string_err:     LDY     #$2B
.e106	4c e0 e3	jmp $e3e0	go_errmess_1:   JMP     print_err_msg
.e109	20 34 ee	jsr $ee34	comma_substr:   JSR     getbyte
.e10c	d5 50		cmp $50,x	        CMP     noun_stk_l,X
.e10e	90 f4		bcc $e104	        BCC     string_err
.e110	20 e4 ef	jsr $efe4	        JSR     Sefe4
.e113	95 78		sta $78,x	        STA     noun_stk_h_str,X
.e115	4c 23 e8	jmp $e823	Le115:  JMP     left_paren
.e118	20 34 ee	jsr $ee34	Se118:  JSR     getbyte
.e11b	f0 e7		beq $e104	        BEQ     string_err
.e11d	38		sec		        SEC
.e11e	e9 01		sbc #$01	        SBC     #$01
.e120	60		rts		        RTS
.e121	20 18 e1	jsr $e118	str_arr_dest:   JSR     Se118
.e124	95 50		sta $50,x	        STA     noun_stk_l,X
.e126	18		clc		        CLC
.e127	f5 78		sbc $78,x	        SBC     noun_stk_h_str,X
.e129	4c 02 e1	jmp $e102	        JMP     Le102
.e12c	a0 14		ldy #$14	Le12c:  LDY     #$14
.e12e	d0 d6		bne $e106	        BNE     go_errmess_1
.e130	20 18 e1	jsr $e118	dim_str:        JSR     Se118
.e133	e8		inx		        INX
.e134	b5 50		lda $50,x	Le134:  LDA     noun_stk_l,X
.e136	85 da		sta $da		        STA     aux
.e138	65 ce		adc $ce		        ADC     acc
.e13a	48		pha		        PHA
.e13b	a8		tay		        TAY
.e13c	b5 78		lda $78,x	        LDA     noun_stk_h_str,X
.e13e	85 db		sta $db		        STA     aux+1
.e140	65 cf		adc $cf		        ADC     acc+1
.e142	48		pha		        PHA
.e143	c4 ca		cpy $ca		        CPY     pp
.e145	e5 cb		sbc $cb		        SBC     pp+1
.e147	b0 e3		bcs $e12c	        BCS     Le12c
.e149	a5 da		lda $da		        LDA     aux
.e14b	69 fe		adc #$fe	        ADC     #$FE
.e14d	85 da		sta $da		        STA     aux
.e14f	a9 ff		lda #$ff	        LDA     #$FF
.e151	a8		tay		        TAY
.e152	65 db		adc $db		        ADC     aux+1
.e154	85 db		sta $db		        STA     aux+1
.e156	c8		iny		Le156:  INY
.e157	b1 da		lda ($da),y	        LDA     (aux),Y
.e159	d9 cc 00	cmp $00cc,y	        CMP     pv,Y
.e15c	d0 0f		bne $e16d	        BNE     Le16d
.e15e	98		tya		        TYA
.e15f	f0 f5		beq $e156	        BEQ     Le156
.e161	68		pla		Le161:  PLA
.e162	91 da		sta ($da),y	        STA     (aux),Y
.e164	99 cc 00	sta $00cc,y	        STA     pv,Y
.e167	88		dey		        DEY
.e168	10 f7		bpl $e161	        BPL     Le161
.e16a	e8		inx		        INX
.e16b	60		rts		        RTS
.e16c	ea		nop		        NOP
.e16d	a0 80		ldy #$80	Le16d:  LDY     #$80
.e16f	d0 95		bne $e106	Le16f:  BNE     go_errmess_1
.e171	a9 00		lda #$00	input_str:      LDA     #$00
.e173	20 0a e7	jsr $e70a	        JSR     push_a_noun_stk
.e176	a0 02		ldy #$02	        LDY     #$02
.e178	94 78		sty $78,x	        STY     noun_stk_h_str,X
.e17a	20 0a e7	jsr $e70a	        JSR     push_a_noun_stk
.e17d	a9 bf		lda #$bf	        LDA     #$BF                    ; '?'
.e17f	20 c9 e3	jsr $e3c9	        JSR     cout
.e182	a0 00		ldy #$00	        LDY     #$00
.e184	20 9e e2	jsr $e29e	        JSR     read_line
.e187	94 78		sty $78,x	        STY     noun_stk_h_str,X
.e189	ea		nop		        NOP
.e18a	ea		nop		        NOP
.e18b	ea		nop		        NOP
.e18c	b5 51		lda $51,x	string_lit:     LDA     noun_stk_l+1,X
.e18e	85 ce		sta $ce		        STA     acc
.e190	b5 79		lda $79,x	        LDA     noun_stk_h_str+1,X
.e192	85 cf		sta $cf		        STA     acc+1
.e194	e8		inx		        INX
.e195	e8		inx		        INX
.e196	20 bc e1	jsr $e1bc	        JSR     Se1bc
.e199	b5 4e		lda $4e,x	Le199:  LDA     rnd,X
.e19b	d5 76		cmp $76,x	        CMP     syn_stk_h+30,X
.e19d	b0 15		bcs $e1b4	        BCS     Le1b4
.e19f	f6 4e		inc $4e,x	        INC     rnd,X
.e1a1	a8		tay		        TAY
.e1a2	b1 ce		lda ($ce),y	        LDA     (acc),Y
.e1a4	b4 50		ldy $50,x	        LDY     noun_stk_l,X
.e1a6	c4 e4		cpy $e4		        CPY     p2
.e1a8	90 04		bcc $e1ae	        BCC     Le1ae
.e1aa	a0 83		ldy #$83	        LDY     #$83
.e1ac	d0 c1		bne $e16f	        BNE     Le16f
.e1ae	91 da		sta ($da),y	Le1ae:  STA     (aux),Y
.e1b0	f6 50		inc $50,x	        INC     noun_stk_l,X
.e1b2	90 e5		bcc $e199	        BCC     Le199
.e1b4	b4 50		ldy $50,x	Le1b4:  LDY     noun_stk_l,X
.e1b6	8a		txa		        TXA
.e1b7	91 da		sta ($da),y	        STA     (aux),Y
.e1b9	e8		inx		        INX
.e1ba	e8		inx		        INX
.e1bb	60		rts		        RTS
.e1bc	b5 51		lda $51,x	Se1bc:  LDA     noun_stk_l+1,X
.e1be	85 da		sta $da		        STA     aux
.e1c0	38		sec		        SEC
.e1c1	e9 02		sbc #$02	        SBC     #$02
.e1c3	85 e4		sta $e4		        STA     p2
.e1c5	b5 79		lda $79,x	        LDA     noun_stk_h_str+1,X
.e1c7	85 db		sta $db		        STA     aux+1
.e1c9	e9 00		sbc #$00	        SBC     #$00
.e1cb	85 e5		sta $e5		        STA     p2+1
.e1cd	a0 00		ldy #$00	        LDY     #$00
.e1cf	b1 e4		lda ($e4),y	        LDA     (p2),Y
.e1d1	18		clc		        CLC
.e1d2	e5 da		sbc $da		        SBC     aux
.e1d4	85 e4		sta $e4		        STA     p2
.e1d6	60		rts		        RTS
.e1d7	b5 53		lda $53,x	string_eq:      LDA     noun_stk_l+3,X
.e1d9	85 ce		sta $ce		        STA     acc
.e1db	b5 7b		lda $7b,x	        LDA     noun_stk_h_str+3,X
.e1dd	85 cf		sta $cf		        STA     acc+1
.e1df	b5 51		lda $51,x	        LDA     noun_stk_l+1,X
.e1e1	85 da		sta $da		        STA     aux
.e1e3	b5 79		lda $79,x	        LDA     noun_stk_h_str+1,X
.e1e5	85 db		sta $db		        STA     aux+1
.e1e7	e8		inx		        INX
.e1e8	e8		inx		        INX
.e1e9	e8		inx		        INX
.e1ea	a0 00		ldy #$00	        LDY     #$00
.e1ec	94 78		sty $78,x	        STY     noun_stk_h_str,X
.e1ee	94 a0		sty $a0,x	        STY     noun_stk_h_int,X
.e1f0	c8		iny		        INY
.e1f1	94 50		sty $50,x	        STY     noun_stk_l,X
.e1f3	b5 4d		lda $4d,x	Le1f3:  LDA     himem+1,X
.e1f5	d5 75		cmp $75,x	        CMP     syn_stk_h+29,X
.e1f7	08		php		        PHP
.e1f8	48		pha		        PHA
.e1f9	b5 4f		lda $4f,x	        LDA     rnd+1,X
.e1fb	d5 77		cmp $77,x	        CMP     syn_stk_h+31,X
.e1fd	90 07		bcc $e206	        BCC     Le206
.e1ff	68		pla		        PLA
.e200	28		plp		        PLP
.e201	b0 02		bcs $e205	        BCS     Le205
.e203	56 50		lsr $50,x	Le203:  LSR     noun_stk_l,X
.e205	60		rts		Le205:  RTS
.e206	a8		tay		Le206:  TAY
.e207	b1 ce		lda ($ce),y	        LDA     (acc),Y
.e209	85 e4		sta $e4		        STA     p2
.e20b	68		pla		        PLA
.e20c	a8		tay		        TAY
.e20d	28		plp		        PLP
.e20e	b0 f3		bcs $e203	        BCS     Le203
.e210	b1 da		lda ($da),y	        LDA     (aux),Y
.e212	c5 e4		cmp $e4		        CMP     p2
.e214	d0 ed		bne $e203	        BNE     Le203
.e216	f6 4f		inc $4f,x	        INC     rnd+1,X
.e218	f6 4d		inc $4d,x	        INC     himem+1,X
.e21a	b0 d7		bcs $e1f3	        BCS     Le1f3
.e21c	20 d7 e1	jsr $e1d7	string_neq:     JSR     string_eq
.e21f	4c 36 e7	jmp $e736	        JMP     not_op
.e222	20 54 e2	jsr $e254	mult_op:        JSR     Se254
.e225	06 ce		asl $ce		Le225:  ASL     acc
.e227	26 cf		rol $cf		        ROL     acc+1
.e229	90 0d		bcc $e238	        BCC     Le238
.e22b	18		clc		        CLC
.e22c	a5 e6		lda $e6		        LDA     p3
.e22e	65 da		adc $da		        ADC     aux
.e230	85 e6		sta $e6		        STA     p3
.e232	a5 e7		lda $e7		        LDA     p3+1
.e234	65 db		adc $db		        ADC     aux+1
.e236	85 e7		sta $e7		        STA     p3+1
.e238	88		dey		Le238:  DEY
.e239	f0 09		beq $e244	        BEQ     Le244
.e23b	06 e6		asl $e6		        ASL     p3
.e23d	26 e7		rol $e7		        ROL     p3+1
.e23f	10 e4		bpl $e225	        BPL     Le225
.e241	4c 7e e7	jmp $e77e	        JMP     Le77e
.e244	a5 e6		lda $e6		Le244:  LDA     p3
.e246	20 08 e7	jsr $e708	        JSR     push_ya_noun_stk
.e249	a5 e7		lda $e7		        LDA     p3+1
.e24b	95 a0		sta $a0,x	        STA     noun_stk_h_int,X
.e24d	06 e5		asl $e5		        ASL     p2+1
.e24f	90 28		bcc $e279	        BCC     Le279
.e251	4c 6f e7	jmp $e76f	        JMP     negate
.e254	a9 55		lda #$55	Se254:  LDA     #$55
.e256	85 e5		sta $e5		        STA     p2+1
.e258	20 5b e2	jsr $e25b	        JSR     Se25b
.e25b	a5 ce		lda $ce		Se25b:  LDA     acc
.e25d	85 da		sta $da		        STA     aux
.e25f	a5 cf		lda $cf		        LDA     acc+1
.e261	85 db		sta $db		        STA     aux+1
.e263	20 15 e7	jsr $e715	        JSR     get16bit
.e266	84 e6		sty $e6		        STY     p3
.e268	84 e7		sty $e7		        STY     p3+1
.e26a	a5 cf		lda $cf		        LDA     acc+1
.e26c	10 09		bpl $e277	        BPL     Le277
.e26e	ca		dex		        DEX
.e26f	06 e5		asl $e5		        ASL     p2+1
.e271	20 6f e7	jsr $e76f	        JSR     negate
.e274	20 15 e7	jsr $e715	        JSR     get16bit
.e277	a0 10		ldy #$10	Le277:  LDY     #$10
.e279	60		rts		Le279:  RTS
.e27a	20 6c ee	jsr $ee6c	mod_op: JSR     See6c
.e27d	f0 c5		beq $e244	        BEQ     Le244
>e27f	ff				        .byte   $FF
.e280	c9 84		cmp #$84	Le280:  CMP     #$84
.e282	d0 02		bne $e286	        BNE     Le286
.e284	46 f8		lsr $f8		        LSR     auto_flag
.e286	c9 df		cmp #$df	Le286:  CMP     #$DF
.e288	f0 11		beq $e29b	        BEQ     Le29b
.e28a	c9 9b		cmp #$9b	        CMP     #$9B
.e28c	f0 06		beq $e294	        BEQ     Le294
.e28e	99 00 02	sta $0200,y	        STA     buffer,Y
.e291	c8		iny		        INY
.e292	10 0a		bpl $e29e	        BPL     read_line
.e294	a0 8b		ldy #$8b	Le294:  LDY     #$8B
.e296	20 c4 e3	jsr $e3c4	        JSR     Se3c4
.e299	a0 01		ldy #$01	Se299:  LDY     #$01
.e29b	88		dey		Le29b:  DEY
.e29c	30 f6		bmi $e294	        BMI     Le294
.e29e	20 03 e0	jsr $e003	read_line:      JSR     rdkey
.e2a1	ea		nop		        NOP
.e2a2	ea		nop		        NOP
.e2a3	20 c9 e3	jsr $e3c9	        JSR     cout
.e2a6	c9 8d		cmp #$8d	        CMP     #$8D
.e2a8	d0 d6		bne $e280	        BNE     Le280
.e2aa	a9 df		lda #$df	        LDA     #$DF
.e2ac	99 00 02	sta $0200,y	        STA     buffer,Y
.e2af	60		rts		        RTS
.e2b0	20 d3 ef	jsr $efd3	cold:   JSR     mem_init_4k
.e2b3	20 cd e3	jsr $e3cd	warm:   JSR     crout           ; BASIC warm start entry point
.e2b6	46 d9		lsr $d9		Le2b6:  LSR     run_flag
.e2b8	a9 be		lda #$be	        LDA     #'>'+$80        ; Prompt character (high bit set)
.e2ba	20 c9 e3	jsr $e3c9	        JSR     cout
.e2bd	a0 00		ldy #$00	        LDY     #$00
.e2bf	84 fa		sty $fa		        STY     leadzr
.e2c1	24 f8		bit $f8		        BIT     auto_flag
.e2c3	10 0c		bpl $e2d1	        BPL     Le2d1
.e2c5	a6 f6		ldx $f6		        LDX     auto_ln
.e2c7	a5 f7		lda $f7		        LDA     auto_ln+1
.e2c9	20 1b e5	jsr $e51b	        JSR     prdec
.e2cc	a9 a0		lda #$a0	        LDA     #$A0
.e2ce	20 c9 e3	jsr $e3c9	        JSR     cout
.e2d1	a2 ff		ldx #$ff	Le2d1:  LDX     #$FF
.e2d3	9a		txs		        TXS
.e2d4	20 9e e2	jsr $e29e	        JSR     read_line
.e2d7	84 f1		sty $f1		        STY     token_index
.e2d9	8a		txa		        TXA
.e2da	85 c8		sta $c8		        STA     text_index
.e2dc	a2 20		ldx #$20	        LDX     #$20
.e2de	20 91 e4	jsr $e491	        JSR     Se491
.e2e1	a5 c8		lda $c8		        LDA     text_index
.e2e3	69 00		adc #$00	        ADC     #$00
.e2e5	85 e0		sta $e0		        STA     pverb
.e2e7	a9 00		lda #$00	        LDA     #$00
.e2e9	aa		tax		        TAX
.e2ea	69 02		adc #$02	        ADC     #$02
.e2ec	85 e1		sta $e1		        STA     pverb+1
.e2ee	a1 e0		lda ($e0,x)	        LDA     (pverb,X)
.e2f0	29 f0		and #$f0	        AND     #$F0
.e2f2	c9 b0		cmp #$b0	        CMP     #$B0
.e2f4	f0 03		beq $e2f9	        BEQ     Le2f9
.e2f6	4c 83 e8	jmp $e883	        JMP     Le883
.e2f9	a0 02		ldy #$02	Le2f9:  LDY     #$02
.e2fb	b1 e0		lda ($e0),y	Le2fb:  LDA     (pverb),Y
.e2fd	99 cd 00	sta $00cd,y	        STA     pv+1,Y
.e300	88		dey		        DEY
.e301	d0 f8		bne $e2fb	        BNE     Le2fb
.e303	20 8a e3	jsr $e38a	        JSR     Se38a
.e306	a5 f1		lda $f1		        LDA     token_index
.e308	e5 c8		sbc $c8		        SBC     text_index
.e30a	c9 04		cmp #$04	        CMP     #$04
.e30c	f0 a8		beq $e2b6	        BEQ     Le2b6
.e30e	91 e0		sta ($e0),y	        STA     (pverb),Y
.e310	a5 ca		lda $ca		        LDA     pp
.e312	f1 e0		sbc ($e0),y	        SBC     (pverb),Y
.e314	85 e4		sta $e4		        STA     p2
.e316	a5 cb		lda $cb		        LDA     pp+1
.e318	e9 00		sbc #$00	        SBC     #$00
.e31a	85 e5		sta $e5		        STA     p2+1
.e31c	a5 e4		lda $e4		        LDA     p2
.e31e	c5 cc		cmp $cc		        CMP     pv
.e320	a5 e5		lda $e5		        LDA     p2+1
.e322	e5 cd		sbc $cd		        SBC     pv+1
.e324	90 45		bcc $e36b	        BCC     Le36b
.e326	a5 ca		lda $ca		Le326:  LDA     pp
.e328	f1 e0		sbc ($e0),y	        SBC     (pverb),Y
.e32a	85 e6		sta $e6		        STA     p3
.e32c	a5 cb		lda $cb		        LDA     pp+1
.e32e	e9 00		sbc #$00	        SBC     #$00
.e330	85 e7		sta $e7		        STA     p3+1
.e332	b1 ca		lda ($ca),y	        LDA     (pp),Y
.e334	91 e6		sta ($e6),y	        STA     (p3),Y
.e336	e6 ca		inc $ca		        INC     pp
.e338	d0 02		bne $e33c	        BNE     Le33c
.e33a	e6 cb		inc $cb		        INC     pp+1
.e33c	a5 e2		lda $e2		Le33c:  LDA     p1
.e33e	c5 ca		cmp $ca		        CMP     pp
.e340	a5 e3		lda $e3		        LDA     p1+1
.e342	e5 cb		sbc $cb		        SBC     pp+1
.e344	b0 e0		bcs $e326	        BCS     Le326
.e346	b5 e4		lda $e4,x	Le346:  LDA     p2,X
.e348	95 ca		sta $ca,x	        STA     pp,X
.e34a	ca		dex		        DEX
.e34b	10 f9		bpl $e346	        BPL     Le346
.e34d	b1 e0		lda ($e0),y	        LDA     (pverb),Y
.e34f	a8		tay		        TAY
.e350	88		dey		Le350:  DEY
.e351	b1 e0		lda ($e0),y	        LDA     (pverb),Y
.e353	91 e6		sta ($e6),y	        STA     (p3),Y
.e355	98		tya		        TYA
.e356	d0 f8		bne $e350	        BNE     Le350
.e358	24 f8		bit $f8		        BIT     auto_flag
.e35a	10 09		bpl $e365	        BPL     Le365
.e35c	b5 f7		lda $f7,x	Le35c:  LDA     auto_ln+1,X
.e35e	75 f5		adc $f5,x	        ADC     auto_inc+1,X
.e360	95 f7		sta $f7,x	        STA     auto_ln+1,X
.e362	e8		inx		        INX
.e363	f0 f7		beq $e35c	        BEQ     Le35c
.e365	10 7e		bpl $e3e5	Le365:  BPL     Le3e5
>e367	00 00 00 00			        .byte   $00,$00,$00,$00
.e36b	a0 14		ldy #$14	Le36b:  LDY     #$14
.e36d	d0 71		bne $e3e0	        BNE     print_err_msg
.e36f	20 15 e7	jsr $e715	del_comma:      JSR     get16bit
.e372	a5 e2		lda $e2		        LDA     p1
.e374	85 e6		sta $e6		        STA     p3
.e376	a5 e3		lda $e3		        LDA     p1+1
.e378	85 e7		sta $e7		        STA     p3+1
.e37a	20 75 e5	jsr $e575	        JSR     find_line1
.e37d	a5 e2		lda $e2		        LDA     p1
.e37f	85 e4		sta $e4		        STA     p2
.e381	a5 e3		lda $e3		        LDA     p1+1
.e383	85 e5		sta $e5		        STA     p2+1
.e385	d0 0e		bne $e395	        BNE     Le395
.e387	20 15 e7	jsr $e715	del_cmd:        JSR     get16bit
.e38a	20 6d e5	jsr $e56d	Se38a:  JSR     find_line
.e38d	a5 e6		lda $e6		        LDA     p3
.e38f	85 e2		sta $e2		        STA     p1
.e391	a5 e7		lda $e7		        LDA     p3+1
.e393	85 e3		sta $e3		        STA     p1+1
.e395	a0 00		ldy #$00	Le395:  LDY     #$00
.e397	a5 ca		lda $ca		Le397:  LDA     pp
.e399	c5 e4		cmp $e4		        CMP     p2
.e39b	a5 cb		lda $cb		        LDA     pp+1
.e39d	e5 e5		sbc $e5		        SBC     p2+1
.e39f	b0 16		bcs $e3b7	        BCS     Le3b7
.e3a1	a5 e4		lda $e4		        LDA     p2
.e3a3	d0 02		bne $e3a7	        BNE     Le3a7
.e3a5	c6 e5		dec $e5		        DEC     p2+1
.e3a7	c6 e4		dec $e4		Le3a7:  DEC     p2
.e3a9	a5 e6		lda $e6		        LDA     p3
.e3ab	d0 02		bne $e3af	        BNE     Le3af
.e3ad	c6 e7		dec $e7		        DEC     p3+1
.e3af	c6 e6		dec $e6		Le3af:  DEC     p3
.e3b1	b1 e4		lda ($e4),y	        LDA     (p2),Y
.e3b3	91 e6		sta ($e6),y	        STA     (p3),Y
.e3b5	90 e0		bcc $e397	        BCC     Le397
.e3b7	a5 e6		lda $e6		Le3b7:  LDA     p3
.e3b9	85 ca		sta $ca		        STA     pp
.e3bb	a5 e7		lda $e7		        LDA     p3+1
.e3bd	85 cb		sta $cb		        STA     pp+1
.e3bf	60		rts		        RTS
.e3c0	20 c9 e3	jsr $e3c9	Le3c0:  JSR     cout
.e3c3	c8		iny		        INY
.e3c4	b9 00 eb	lda $eb00,y	Se3c4:  LDA     error_msg_tbl,Y
.e3c7	30 f7		bmi $e3c0	        BMI     Le3c0
.e3c9	c9 8d		cmp #$8d	cout:   CMP     #$8D
.e3cb	d0 06		bne $e3d3	        BNE     Le3d3
.e3cd	a9 00		lda #$00	crout:  LDA     #$00            ; character output
.e3cf	85 24		sta $24		        STA     ch
.e3d1	a9 8d		lda #$8d	        LDA     #$8D
.e3d3	e6 24		inc $24		Le3d3:  INC     ch

;******  Processing file: hardware/display.asm

.e3d5	48		pha		Le3d5:  pha
.e3d6	29 7f		and #$7f	        and     #$7F
.e3d8	20 f1 ff	jsr $fff1	        jsr     WriteCharacter
.e3db	68		pla		        pla
.e3dc	60		rts		        rts
.e3dd	ea		nop		        nop

;******  Return to file: a1basic.asm

.e3de	a0 06		ldy #$06	too_long_err:   LDY     #$06
.e3e0	20 d3 ee	jsr $eed3	print_err_msg:  JSR     print_err_msg1  ; print error message specified in Y
.e3e3	24 d9		bit $d9		        BIT     run_flag
.e3e5	30 03		bmi $e3ea	Le3e5:  BMI     Le3ea
.e3e7	4c b6 e2	jmp $e2b6	        JMP     Le2b6
.e3ea	4c 9a eb	jmp $eb9a	Le3ea:  JMP     Leb9a
.e3ed	2a		rol a		Le3ed:  ROL     A
.e3ee	69 a0		adc #$a0	        ADC     #$A0
.e3f0	dd 00 02	cmp $0200,x	        CMP     buffer,X
.e3f3	d0 53		bne $e448	        BNE     Le448
.e3f5	b1 fe		lda ($fe),y	        LDA     (synpag),Y
.e3f7	0a		asl a		        ASL     A
.e3f8	30 06		bmi $e400	        BMI     Le400
.e3fa	88		dey		        DEY
.e3fb	b1 fe		lda ($fe),y	        LDA     (synpag),Y
.e3fd	30 29		bmi $e428	        BMI     Le428
.e3ff	c8		iny		        INY
.e400	86 c8		stx $c8		Le400:  STX     text_index
.e402	98		tya		        TYA
.e403	48		pha		        PHA
.e404	a2 00		ldx #$00	        LDX     #$00
.e406	a1 fe		lda ($fe,x)	        LDA     (synpag,X)
.e408	aa		tax		        TAX
.e409	4a		lsr a		Le409:  LSR     A
.e40a	49 48		eor #$48	        EOR     #$48
.e40c	11 fe		ora ($fe),y	        ORA     (synpag),Y
.e40e	c9 c0		cmp #$c0	        CMP     #$C0
.e410	90 01		bcc $e413	        BCC     Le413
.e412	e8		inx		        INX
.e413	c8		iny		Le413:  INY
.e414	d0 f3		bne $e409	        BNE     Le409
.e416	68		pla		        PLA
.e417	a8		tay		        TAY
.e418	8a		txa		        TXA
.e419	4c c0 e4	jmp $e4c0	        JMP     Le4c0
.e41c	e6 f1		inc $f1		put_token:      INC     token_index
.e41e	a6 f1		ldx $f1		        LDX     token_index
.e420	f0 bc		beq $e3de	        BEQ     too_long_err
.e422	9d 00 02	sta $0200,x	        STA     buffer,X
.e425	60		rts		Le425:  RTS
.e426	a6 c8		ldx $c8		Le426:  LDX     text_index
.e428	a9 a0		lda #$a0	Le428:  LDA     #$A0
.e42a	e8		inx		Le42a:  INX
.e42b	dd 00 02	cmp $0200,x	        CMP     buffer,X
.e42e	b0 fa		bcs $e42a	        BCS     Le42a
.e430	b1 fe		lda ($fe),y	        LDA     (synpag),Y
.e432	29 3f		and #$3f	        AND     #$3F
.e434	4a		lsr a		        LSR     A
.e435	d0 b6		bne $e3ed	        BNE     Le3ed
.e437	bd 00 02	lda $0200,x	        LDA     buffer,X
.e43a	b0 06		bcs $e442	        BCS     Le442
.e43c	69 3f		adc #$3f	        ADC     #$3F
.e43e	c9 1a		cmp #$1a	        CMP     #$1A
.e440	90 6f		bcc $e4b1	        BCC     Le4b1
.e442	69 4f		adc #$4f	Le442:  ADC     #$4F
.e444	c9 0a		cmp #$0a	        CMP     #$0A
.e446	90 69		bcc $e4b1	        BCC     Le4b1
.e448	a6 fd		ldx $fd		Le448:  LDX     synstkdx
.e44a	c8		iny		Le44a:  INY
.e44b	b1 fe		lda ($fe),y	        LDA     (synpag),Y
.e44d	29 e0		and #$e0	        AND     #$E0
.e44f	c9 20		cmp #$20	        CMP     #$20
.e451	f0 7a		beq $e4cd	        BEQ     Le4cd
.e453	b5 a8		lda $a8,x	        LDA     txtndxstk,X
.e455	85 c8		sta $c8		        STA     text_index
.e457	b5 d1		lda $d1,x	        LDA     tokndxstk,X
.e459	85 f1		sta $f1		        STA     token_index
.e45b	88		dey		Le45b:  DEY
.e45c	b1 fe		lda ($fe),y	        LDA     (synpag),Y
.e45e	0a		asl a		        ASL     A
.e45f	10 fa		bpl $e45b	        BPL     Le45b
.e461	88		dey		        DEY
.e462	b0 38		bcs $e49c	        BCS     Le49c
.e464	0a		asl a		        ASL     A
.e465	30 35		bmi $e49c	        BMI     Le49c
.e467	b4 58		ldy $58,x	        LDY     syn_stk_h,X
.e469	84 ff		sty $ff		        STY     synpag+1
.e46b	b4 80		ldy $80,x	        LDY     syn_stk_l,X
.e46d	e8		inx		        INX
.e46e	10 da		bpl $e44a	        BPL     Le44a
.e470	f0 b3		beq $e425	Le470:  BEQ     Le425
.e472	c9 7e		cmp #$7e	        CMP     #$7E
.e474	b0 22		bcs $e498	        BCS     Le498
.e476	ca		dex		        DEX
.e477	10 04		bpl $e47d	        BPL     Le47d
.e479	a0 06		ldy #$06	        LDY     #$06
.e47b	10 29		bpl $e4a6	        BPL     go_errmess_2
.e47d	94 80		sty $80,x	Le47d:  STY     syn_stk_l,X
.e47f	a4 ff		ldy $ff		        LDY     synpag+1
.e481	94 58		sty $58,x	        STY     syn_stk_h,X
.e483	a4 c8		ldy $c8		        LDY     text_index
.e485	94 a8		sty $a8,x	        STY     txtndxstk,X
.e487	a4 f1		ldy $f1		        LDY     token_index
.e489	94 d1		sty $d1,x	        STY     tokndxstk,X
.e48b	29 1f		and #$1f	        AND     #$1F
.e48d	a8		tay		        TAY
.e48e	b9 20 ec	lda $ec20,y	        LDA     syntabl_index,Y
.e491	0a		asl a		Se491:  ASL     A
.e492	a8		tay		        TAY
.e493	a9 76		lda #$76	        LDA     #(>syntabl_index)>>1
.e495	2a		rol a		        ROL     A
.e496	85 ff		sta $ff		        STA     synpag+1
.e498	d0 01		bne $e49b	Le498:  BNE     Le49b
.e49a	c8		iny		        INY
.e49b	c8		iny		Le49b:  INY
.e49c	86 fd		stx $fd		Le49c:  STX     synstkdx
.e49e	b1 fe		lda ($fe),y	        LDA     (synpag),Y
.e4a0	30 84		bmi $e426	        BMI     Le426
.e4a2	d0 05		bne $e4a9	        BNE     Le4a9
.e4a4	a0 0e		ldy #$0e	        LDY     #$0E
.e4a6	4c e0 e3	jmp $e3e0	go_errmess_2:   JMP     print_err_msg
.e4a9	c9 03		cmp #$03	Le4a9:  CMP     #$03
.e4ab	b0 c3		bcs $e470	        BCS     Le470
.e4ad	4a		lsr a		        LSR     A
.e4ae	a6 c8		ldx $c8		        LDX     text_index
.e4b0	e8		inx		        INX
.e4b1	bd 00 02	lda $0200,x	Le4b1:  LDA     buffer,X
.e4b4	90 04		bcc $e4ba	        BCC     Le4ba
.e4b6	c9 a2		cmp #$a2	        CMP     #$A2
.e4b8	f0 0a		beq $e4c4	        BEQ     Le4c4
.e4ba	c9 df		cmp #$df	Le4ba:  CMP     #$DF
.e4bc	f0 06		beq $e4c4	        BEQ     Le4c4
.e4be	86 c8		stx $c8		        STX     text_index
.e4c0	20 1c e4	jsr $e41c	Le4c0:  JSR     put_token
.e4c3	c8		iny		        INY
.e4c4	88		dey		Le4c4:  DEY
.e4c5	a6 fd		ldx $fd		        LDX     synstkdx
.e4c7	b1 fe		lda ($fe),y	Le4c7:  LDA     (synpag),Y
.e4c9	88		dey		        DEY
.e4ca	0a		asl a		        ASL     A
.e4cb	10 cf		bpl $e49c	        BPL     Le49c
.e4cd	b4 58		ldy $58,x	Le4cd:  LDY     syn_stk_h,X
.e4cf	84 ff		sty $ff		        STY     synpag+1
.e4d1	b4 80		ldy $80,x	        LDY     syn_stk_l,X
.e4d3	e8		inx		        INX
.e4d4	b1 fe		lda ($fe),y	        LDA     (synpag),Y
.e4d6	29 9f		and #$9f	        AND     #$9F
.e4d8	d0 ed		bne $e4c7	        BNE     Le4c7
.e4da	85 f2		sta $f2		        STA     pcon
.e4dc	85 f3		sta $f3		        STA     pcon+1
.e4de	98		tya		        TYA
.e4df	48		pha		        PHA
.e4e0	86 fd		stx $fd		        STX     synstkdx
.e4e2	b4 d0		ldy $d0,x	        LDY     srch,X
.e4e4	84 c9		sty $c9		        STY     leadbl
.e4e6	18		clc		        CLC
.e4e7	a9 0a		lda #$0a	Le4e7:  LDA     #$0A
.e4e9	85 f9		sta $f9		        STA     cchar
.e4eb	a2 00		ldx #$00	        LDX     #$00
.e4ed	c8		iny		        INY
.e4ee	b9 00 02	lda $0200,y	        LDA     buffer,Y
.e4f1	29 0f		and #$0f	        AND     #$0F
.e4f3	65 f2		adc $f2		Le4f3:  ADC     pcon
.e4f5	48		pha		        PHA
.e4f6	8a		txa		        TXA
.e4f7	65 f3		adc $f3		        ADC     pcon+1
.e4f9	30 1c		bmi $e517	        BMI     Le517
.e4fb	aa		tax		        TAX
.e4fc	68		pla		        PLA
.e4fd	c6 f9		dec $f9		        DEC     cchar
.e4ff	d0 f2		bne $e4f3	        BNE     Le4f3
.e501	85 f2		sta $f2		        STA     pcon
.e503	86 f3		stx $f3		        STX     pcon+1
.e505	c4 f1		cpy $f1		        CPY     token_index
.e507	d0 de		bne $e4e7	        BNE     Le4e7
.e509	a4 c9		ldy $c9		        LDY     leadbl
.e50b	c8		iny		        INY
.e50c	84 f1		sty $f1		        STY     token_index
.e50e	20 1c e4	jsr $e41c	        JSR     put_token
.e511	68		pla		        PLA
.e512	a8		tay		        TAY
.e513	a5 f3		lda $f3		        LDA     pcon+1
.e515	b0 a9		bcs $e4c0	        BCS     Le4c0
.e517	a0 00		ldy #$00	Le517:  LDY     #$00
.e519	10 8b		bpl $e4a6	        BPL     go_errmess_2
.e51b	85 f3		sta $f3		prdec:  STA     pcon+1  ; output A:X in decimal
.e51d	86 f2		stx $f2		        STX     pcon
.e51f	a2 04		ldx #$04	        LDX     #$04
.e521	86 c9		stx $c9		        STX     leadbl
.e523	a9 b0		lda #$b0	Le523:  LDA     #$B0
.e525	85 f9		sta $f9		        STA     cchar
.e527	a5 f2		lda $f2		Le527:  LDA     pcon
.e529	dd 63 e5	cmp $e563,x	        CMP     dectabl,X
.e52c	a5 f3		lda $f3		        LDA     pcon+1
.e52e	fd 68 e5	sbc $e568,x	        SBC     dectabh,X
.e531	90 0d		bcc $e540	        BCC     Le540
.e533	85 f3		sta $f3		        STA     pcon+1
.e535	a5 f2		lda $f2		        LDA     pcon
.e537	fd 63 e5	sbc $e563,x	        SBC     dectabl,X
.e53a	85 f2		sta $f2		        STA     pcon
.e53c	e6 f9		inc $f9		        INC     cchar
.e53e	d0 e7		bne $e527	        BNE     Le527
.e540	a5 f9		lda $f9		Le540:  LDA     cchar
.e542	e8		inx		        INX
.e543	ca		dex		        DEX
.e544	f0 0e		beq $e554	        BEQ     Le554
.e546	c9 b0		cmp #$b0	        CMP     #$B0
.e548	f0 02		beq $e54c	        BEQ     Le54c
.e54a	85 c9		sta $c9		        STA     leadbl
.e54c	24 c9		bit $c9		Le54c:  BIT     leadbl
.e54e	30 04		bmi $e554	        BMI     Le554
.e550	a5 fa		lda $fa		        LDA     leadzr
.e552	f0 0b		beq $e55f	        BEQ     Le55f
.e554	20 c9 e3	jsr $e3c9	Le554:  JSR     cout
.e557	24 f8		bit $f8		        BIT     auto_flag
.e559	10 04		bpl $e55f	        BPL     Le55f
.e55b	99 00 02	sta $0200,y	        STA     buffer,Y
.e55e	c8		iny		        INY
.e55f	ca		dex		Le55f:  DEX
.e560	10 c1		bpl $e523	        BPL     Le523
.e562	60		rts		        RTS
>e563	01 0a 64 e8 10			dectabl:        .byte   $01,$0A,$64,$E8,$10
>e568	00 00 00 03 27			dectabh:        .byte   $00,$00,$00,$03,$27
.e56d	a5 ca		lda $ca		find_line:      LDA     pp
.e56f	85 e6		sta $e6		        STA     p3
.e571	a5 cb		lda $cb		        LDA     pp+1
.e573	85 e7		sta $e7		        STA     p3+1
.e575	e8		inx		find_line1:     INX
.e576	a5 e7		lda $e7		find_line2:     LDA     p3+1
.e578	85 e5		sta $e5		        STA     p2+1
.e57a	a5 e6		lda $e6		        LDA     p3
.e57c	85 e4		sta $e4		        STA     p2
.e57e	c5 4c		cmp $4c		        CMP     himem
.e580	a5 e5		lda $e5		        LDA     p2+1
.e582	e5 4d		sbc $4d		        SBC     himem+1
.e584	b0 26		bcs $e5ac	        BCS     Le5ac
.e586	a0 01		ldy #$01	        LDY     #$01
.e588	b1 e4		lda ($e4),y	        LDA     (p2),Y
.e58a	e5 ce		sbc $ce		        SBC     acc
.e58c	c8		iny		        INY
.e58d	b1 e4		lda ($e4),y	        LDA     (p2),Y
.e58f	e5 cf		sbc $cf		        SBC     acc+1
.e591	b0 19		bcs $e5ac	        BCS     Le5ac
.e593	a0 00		ldy #$00	        LDY     #$00
.e595	a5 e6		lda $e6		        LDA     p3
.e597	71 e4		adc ($e4),y	        ADC     (p2),Y
.e599	85 e6		sta $e6		        STA     p3
.e59b	90 03		bcc $e5a0	        BCC     Le5a0
.e59d	e6 e7		inc $e7		        INC     p3+1
.e59f	18		clc		        CLC
.e5a0	c8		iny		Le5a0:  INY
.e5a1	a5 ce		lda $ce		        LDA     acc
.e5a3	f1 e4		sbc ($e4),y	        SBC     (p2),Y
.e5a5	c8		iny		        INY
.e5a6	a5 cf		lda $cf		        LDA     acc+1
.e5a8	f1 e4		sbc ($e4),y	        SBC     (p2),Y
.e5aa	b0 ca		bcs $e576	        BCS     find_line2
.e5ac	60		rts		Le5ac:  RTS
.e5ad	46 f8		lsr $f8		new_cmd:        LSR     auto_flag
.e5af	a5 4c		lda $4c		        LDA     himem
.e5b1	85 ca		sta $ca		        STA     pp
.e5b3	a5 4d		lda $4d		        LDA     himem+1
.e5b5	85 cb		sta $cb		        STA     pp+1
.e5b7	a5 4a		lda $4a		clr:    LDA     lomem
.e5b9	85 cc		sta $cc		        STA     pv
.e5bb	a5 4b		lda $4b		        LDA     lomem+1
.e5bd	85 cd		sta $cd		        STA     pv+1
.e5bf	a9 00		lda #$00	        LDA     #$00
.e5c1	85 fb		sta $fb		        STA     for_nest_count
.e5c3	85 fc		sta $fc		        STA     gosub_nest_count
.e5c5	85 fe		sta $fe		        STA     synpag
.e5c7	a9 00		lda #$00	        LDA     #$00
.e5c9	85 1d		sta $1d		        STA     Z1d
.e5cb	60		rts		        RTS
.e5cc	a5 d0		lda $d0		Le5cc:  LDA     srch
.e5ce	69 05		adc #$05	        ADC     #$05
.e5d0	85 d2		sta $d2		        STA     srch2
.e5d2	a5 d1		lda $d1		        LDA     tokndxstk
.e5d4	69 00		adc #$00	        ADC     #$00
.e5d6	85 d3		sta $d3		        STA     srch2+1
.e5d8	a5 d2		lda $d2		        LDA     srch2
.e5da	c5 ca		cmp $ca		        CMP     pp
.e5dc	a5 d3		lda $d3		        LDA     srch2+1
.e5de	e5 cb		sbc $cb		        SBC     pp+1
.e5e0	90 03		bcc $e5e5	        BCC     Le5e5
.e5e2	4c 6b e3	jmp $e36b	        JMP     Le36b
.e5e5	a5 ce		lda $ce		Le5e5:  LDA     acc
.e5e7	91 d0		sta ($d0),y	        STA     (srch),Y
.e5e9	a5 cf		lda $cf		        LDA     acc+1
.e5eb	c8		iny		        INY
.e5ec	91 d0		sta ($d0),y	        STA     (srch),Y
.e5ee	a5 d2		lda $d2		        LDA     srch2
.e5f0	c8		iny		        INY
.e5f1	91 d0		sta ($d0),y	        STA     (srch),Y
.e5f3	a5 d3		lda $d3		        LDA     srch2+1
.e5f5	c8		iny		        INY
.e5f6	91 d0		sta ($d0),y	        STA     (srch),Y
.e5f8	a9 00		lda #$00	        LDA     #$00
.e5fa	c8		iny		        INY
.e5fb	91 d0		sta ($d0),y	        STA     (srch),Y
.e5fd	c8		iny		        INY
.e5fe	91 d0		sta ($d0),y	        STA     (srch),Y
.e600	a5 d2		lda $d2		        LDA     srch2
.e602	85 cc		sta $cc		        STA     pv
.e604	a5 d3		lda $d3		        LDA     srch2+1
.e606	85 cd		sta $cd		        STA     pv+1
.e608	a5 d0		lda $d0		        LDA     srch
.e60a	90 43		bcc $e64f	        BCC     Le64f
.e60c	85 ce		sta $ce		execute_var:    STA     acc
.e60e	84 cf		sty $cf		        STY     acc+1
.e610	20 ff e6	jsr $e6ff	        JSR     get_next_prog_byte
.e613	30 0e		bmi $e623	        BMI     Le623
.e615	c9 40		cmp #$40	        CMP     #$40
.e617	f0 0a		beq $e623	        BEQ     Le623
.e619	4c 28 e6	jmp $e628	        JMP     Le628
>e61c	06 c9 49 d0 07 a9 49		        .byte   $06,$C9,$49,$D0,$07,$A9,$49
.e623	85 cf		sta $cf		Le623:  STA     acc+1
.e625	20 ff e6	jsr $e6ff	        JSR     get_next_prog_byte
.e628	a5 4b		lda $4b		Le628:  LDA     lomem+1
.e62a	85 d1		sta $d1		        STA     tokndxstk
.e62c	a5 4a		lda $4a		        LDA     lomem
.e62e	85 d0		sta $d0		Le62e:  STA     srch
.e630	c5 cc		cmp $cc		        CMP     pv
.e632	a5 d1		lda $d1		        LDA     tokndxstk
.e634	e5 cd		sbc $cd		        SBC     pv+1
.e636	b0 94		bcs $e5cc	        BCS     Le5cc
.e638	b1 d0		lda ($d0),y	        LDA     (srch),Y
.e63a	c8		iny		        INY
.e63b	c5 ce		cmp $ce		        CMP     acc
.e63d	d0 06		bne $e645	        BNE     Le645
.e63f	b1 d0		lda ($d0),y	        LDA     (srch),Y
.e641	c5 cf		cmp $cf		        CMP     acc+1
.e643	f0 0e		beq $e653	        BEQ     Le653
.e645	c8		iny		Le645:  INY
.e646	b1 d0		lda ($d0),y	        LDA     (srch),Y
.e648	48		pha		        PHA
.e649	c8		iny		        INY
.e64a	b1 d0		lda ($d0),y	        LDA     (srch),Y
.e64c	85 d1		sta $d1		        STA     tokndxstk
.e64e	68		pla		        PLA
.e64f	a0 00		ldy #$00	Le64f:  LDY     #$00
.e651	f0 db		beq $e62e	        BEQ     Le62e
.e653	a5 d0		lda $d0		Le653:  LDA     srch
.e655	69 03		adc #$03	        ADC     #$03
.e657	20 0a e7	jsr $e70a	        JSR     push_a_noun_stk
.e65a	a5 d1		lda $d1		        LDA     tokndxstk
.e65c	69 00		adc #$00	        ADC     #$00
.e65e	95 78		sta $78,x	        STA     noun_stk_h_str,X
.e660	a5 cf		lda $cf		        LDA     acc+1
.e662	c9 40		cmp #$40	        CMP     #$40
.e664	d0 1c		bne $e682	        BNE     fetch_prog_byte
.e666	88		dey		        DEY
.e667	98		tya		        TYA
.e668	20 0a e7	jsr $e70a	        JSR     push_a_noun_stk
.e66b	88		dey		        DEY
.e66c	94 78		sty $78,x	        STY     noun_stk_h_str,X
.e66e	a0 03		ldy #$03	        LDY     #$03
.e670	f6 78		inc $78,x	Le670:  INC     noun_stk_h_str,X
.e672	c8		iny		        INY
.e673	b1 d0		lda ($d0),y	        LDA     (srch),Y
.e675	30 f9		bmi $e670	        BMI     Le670
.e677	10 09		bpl $e682	        BPL     fetch_prog_byte
.e679	a9 00		lda #$00	execute_stmt:   LDA     #$00
.e67b	85 d4		sta $d4		        STA     if_flag
.e67d	85 d5		sta $d5		        STA     cr_flag
.e67f	a2 20		ldx #$20	        LDX     #$20
.e681	48		pha		push_old_verb:  PHA
.e682	a0 00		ldy #$00	fetch_prog_byte:        LDY     #$00
.e684	b1 e0		lda ($e0),y	        LDA     (pverb),Y
.e686	10 18		bpl $e6a0	Le686:  BPL     execute_token
.e688	0a		asl a		        ASL     A
.e689	30 81		bmi $e60c	        BMI     execute_var
.e68b	20 ff e6	jsr $e6ff	        JSR     get_next_prog_byte
.e68e	20 08 e7	jsr $e708	        JSR     push_ya_noun_stk
.e691	20 ff e6	jsr $e6ff	        JSR     get_next_prog_byte
.e694	95 a0		sta $a0,x	        STA     noun_stk_h_int,X
.e696	24 d4		bit $d4		Le696:  BIT     if_flag
.e698	10 01		bpl $e69b	        BPL     Le69b
.e69a	ca		dex		        DEX
.e69b	20 ff e6	jsr $e6ff	Le69b:  JSR     get_next_prog_byte
.e69e	b0 e6		bcs $e686	        BCS     Le686
.e6a0	c9 28		cmp #$28	execute_token:  CMP     #$28
.e6a2	d0 1f		bne $e6c3	        BNE     execute_verb
.e6a4	a5 e0		lda $e0		        LDA     pverb
.e6a6	20 0a e7	jsr $e70a	        JSR     push_a_noun_stk
.e6a9	a5 e1		lda $e1		        LDA     pverb+1
.e6ab	95 78		sta $78,x	        STA     noun_stk_h_str,X
.e6ad	24 d4		bit $d4		        BIT     if_flag
.e6af	30 0b		bmi $e6bc	        BMI     Le6bc
.e6b1	a9 01		lda #$01	        LDA     #$01
.e6b3	20 0a e7	jsr $e70a	        JSR     push_a_noun_stk
.e6b6	a9 00		lda #$00	        LDA     #$00
.e6b8	95 78		sta $78,x	        STA     noun_stk_h_str,X
.e6ba	f6 78		inc $78,x	Le6ba:  INC     noun_stk_h_str,X
.e6bc	20 ff e6	jsr $e6ff	Le6bc:  JSR     get_next_prog_byte
.e6bf	30 f9		bmi $e6ba	        BMI     Le6ba
.e6c1	b0 d3		bcs $e696	        BCS     Le696
.e6c3	24 d4		bit $d4		execute_verb:   BIT     if_flag
.e6c5	10 06		bpl $e6cd	        BPL     Le6cd
.e6c7	c9 04		cmp #$04	        CMP     #$04
.e6c9	b0 d0		bcs $e69b	        BCS     Le69b
.e6cb	46 d4		lsr $d4		        LSR     if_flag
.e6cd	a8		tay		Le6cd:  TAY
.e6ce	85 d6		sta $d6		        STA     current_verb
.e6d0	b9 98 e9	lda $e998,y	        LDA     verb_prec_tbl,Y
.e6d3	29 55		and #$55	        AND     #$55
.e6d5	0a		asl a		        ASL     A
.e6d6	85 d7		sta $d7		        STA     precedence
.e6d8	68		pla		Le6d8:  PLA
.e6d9	a8		tay		        TAY
.e6da	b9 98 e9	lda $e998,y	        LDA     verb_prec_tbl,Y
.e6dd	29 aa		and #$aa	        AND     #$AA
.e6df	c5 d7		cmp $d7		        CMP     precedence
.e6e1	b0 09		bcs $e6ec	        BCS     do_verb
.e6e3	98		tya		        TYA
.e6e4	48		pha		        PHA
.e6e5	20 ff e6	jsr $e6ff	        JSR     get_next_prog_byte
.e6e8	a5 d6		lda $d6		        LDA     current_verb
.e6ea	90 95		bcc $e681	        BCC     push_old_verb
.e6ec	b9 10 ea	lda $ea10,y	do_verb:        LDA     verb_adr_l,Y
.e6ef	85 ce		sta $ce		        STA     acc
.e6f1	b9 88 ea	lda $ea88,y	        LDA     verb_adr_h,Y
.e6f4	85 cf		sta $cf		        STA     acc+1
.e6f6	20 fc e6	jsr $e6fc	        JSR     Se6fc
.e6f9	4c d8 e6	jmp $e6d8	        JMP     Le6d8
.e6fc	6c ce 00	jmp ($00ce)	Se6fc:  JMP     (acc)
.e6ff	e6 e0		inc $e0		get_next_prog_byte:     INC     pverb
.e701	d0 02		bne $e705	        BNE     Le705
.e703	e6 e1		inc $e1		        INC     pverb+1
.e705	b1 e0		lda ($e0),y	Le705:  LDA     (pverb),Y
.e707	60		rts		        RTS
.e708	94 77		sty $77,x	push_ya_noun_stk:       STY     syn_stk_h+31,X
.e70a	ca		dex		push_a_noun_stk:        DEX
.e70b	30 03		bmi $e710	        BMI     Le710
.e70d	95 50		sta $50,x	        STA     noun_stk_l,X
.e70f	60		rts		        RTS
.e710	a0 66		ldy #$66	Le710:  LDY     #$66
.e712	4c e0 e3	jmp $e3e0	go_errmess_3:   JMP     print_err_msg
.e715	a0 00		ldy #$00	get16bit:       LDY     #$00
.e717	b5 50		lda $50,x	        LDA     noun_stk_l,X
.e719	85 ce		sta $ce		        STA     acc
.e71b	b5 a0		lda $a0,x	        LDA     noun_stk_h_int,X
.e71d	85 cf		sta $cf		        STA     acc+1
.e71f	b5 78		lda $78,x	        LDA     noun_stk_h_str,X
.e721	f0 0e		beq $e731	        BEQ     Le731
.e723	85 cf		sta $cf		        STA     acc+1
.e725	b1 ce		lda ($ce),y	        LDA     (acc),Y
.e727	48		pha		        PHA
.e728	c8		iny		        INY
.e729	b1 ce		lda ($ce),y	        LDA     (acc),Y
.e72b	85 cf		sta $cf		        STA     acc+1
.e72d	68		pla		        PLA
.e72e	85 ce		sta $ce		        STA     acc
.e730	88		dey		        DEY
.e731	e8		inx		Le731:  INX
.e732	60		rts		        RTS
.e733	20 4a e7	jsr $e74a	eq_op:  JSR     neq_op
.e736	20 15 e7	jsr $e715	not_op: JSR     get16bit
.e739	98		tya		        TYA
.e73a	20 08 e7	jsr $e708	        JSR     push_ya_noun_stk
.e73d	95 a0		sta $a0,x	        STA     noun_stk_h_int,X
.e73f	c5 ce		cmp $ce		        CMP     acc
.e741	d0 06		bne $e749	        BNE     Le749
.e743	c5 cf		cmp $cf		        CMP     acc+1
.e745	d0 02		bne $e749	        BNE     Le749
.e747	f6 50		inc $50,x	        INC     noun_stk_l,X
.e749	60		rts		Le749:  RTS
.e74a	20 82 e7	jsr $e782	neq_op: JSR     subtract
.e74d	20 59 e7	jsr $e759	        JSR     sgn_fn
.e750	20 15 e7	jsr $e715	abs_fn: JSR     get16bit
.e753	24 cf		bit $cf		        BIT     acc+1
.e755	30 1b		bmi $e772	        BMI     Se772
.e757	ca		dex		Le757:  DEX
.e758	60		rts		Le758:  RTS
.e759	20 15 e7	jsr $e715	sgn_fn: JSR     get16bit
.e75c	a5 cf		lda $cf		        LDA     acc+1
.e75e	d0 04		bne $e764	        BNE     Le764
.e760	a5 ce		lda $ce		        LDA     acc
.e762	f0 f3		beq $e757	        BEQ     Le757
.e764	a9 ff		lda #$ff	Le764:  LDA     #$FF
.e766	20 08 e7	jsr $e708	        JSR     push_ya_noun_stk
.e769	95 a0		sta $a0,x	        STA     noun_stk_h_int,X
.e76b	24 cf		bit $cf		        BIT     acc+1
.e76d	30 e9		bmi $e758	        BMI     Le758
.e76f	20 15 e7	jsr $e715	negate: JSR     get16bit
.e772	98		tya		Se772:  TYA
.e773	38		sec		        SEC
.e774	e5 ce		sbc $ce		        SBC     acc
.e776	20 08 e7	jsr $e708	        JSR     push_ya_noun_stk
.e779	98		tya		        TYA
.e77a	e5 cf		sbc $cf		        SBC     acc+1
.e77c	50 23		bvc $e7a1	        BVC     Le7a1
.e77e	a0 00		ldy #$00	Le77e:  LDY     #$00
.e780	10 90		bpl $e712	        BPL     go_errmess_3
.e782	20 6f e7	jsr $e76f	subtract:       JSR     negate
.e785	20 15 e7	jsr $e715	add:    JSR     get16bit
.e788	a5 ce		lda $ce		        LDA     acc
.e78a	85 da		sta $da		        STA     aux
.e78c	a5 cf		lda $cf		        LDA     acc+1
.e78e	85 db		sta $db		        STA     aux+1
.e790	20 15 e7	jsr $e715	        JSR     get16bit
.e793	18		clc		Se793:  CLC
.e794	a5 ce		lda $ce		        LDA     acc
.e796	65 da		adc $da		        ADC     aux
.e798	20 08 e7	jsr $e708	        JSR     push_ya_noun_stk
.e79b	a5 cf		lda $cf		        LDA     acc+1
.e79d	65 db		adc $db		        ADC     aux+1
.e79f	70 dd		bvs $e77e	        BVS     Le77e
.e7a1	95 a0		sta $a0,x	Le7a1:  STA     noun_stk_h_int,X
.e7a3	60		rts		unary_pos:      RTS
.e7a4	20 15 e7	jsr $e715	tab_fn: JSR     get16bit
.e7a7	a4 ce		ldy $ce		        LDY     acc
.e7a9	f0 05		beq $e7b0	        BEQ     Le7b0
.e7ab	88		dey		        DEY
.e7ac	a5 cf		lda $cf		        LDA     acc+1
.e7ae	f0 0c		beq $e7bc	        BEQ     Le7bc
.e7b0	60		rts		Le7b0:  RTS
.e7b1	a5 24		lda $24		tabout: LDA     ch
.e7b3	09 07		ora #$07	        ORA     #$07
.e7b5	a8		tay		        TAY
.e7b6	c8		iny		        INY
.e7b7	a9 a0		lda #$a0	Le7b7:  LDA     #$A0
.e7b9	20 c9 e3	jsr $e3c9	        JSR     cout
.e7bc	c4 24		cpy $24		Le7bc:  CPY     ch
.e7be	b0 f7		bcs $e7b7	        BCS     Le7b7
.e7c0	60		rts		        RTS
.e7c1	20 b1 e7	jsr $e7b1	print_com_num:  JSR     tabout
.e7c4	20 15 e7	jsr $e715	print_num:      JSR     get16bit
.e7c7	a5 cf		lda $cf		        LDA     acc+1
.e7c9	10 0a		bpl $e7d5	        BPL     Le7d5
.e7cb	a9 ad		lda #$ad	        LDA     #$AD
.e7cd	20 c9 e3	jsr $e3c9	        JSR     cout
.e7d0	20 72 e7	jsr $e772	        JSR     Se772
.e7d3	50 ef		bvc $e7c4	        BVC     print_num
.e7d5	88		dey		Le7d5:  DEY
.e7d6	84 d5		sty $d5		        STY     cr_flag
.e7d8	86 cf		stx $cf		        STX     acc+1
.e7da	a6 ce		ldx $ce		        LDX     acc
.e7dc	20 1b e5	jsr $e51b	        JSR     prdec
.e7df	a6 cf		ldx $cf		        LDX     acc+1
.e7e1	60		rts		        RTS
.e7e2	20 15 e7	jsr $e715	auto_cmd:       JSR     get16bit
.e7e5	a5 ce		lda $ce		        LDA     acc
.e7e7	85 f6		sta $f6		        STA     auto_ln
.e7e9	a5 cf		lda $cf		        LDA     acc+1
.e7eb	85 f7		sta $f7		        STA     auto_ln+1
.e7ed	88		dey		        DEY
.e7ee	84 f8		sty $f8		        STY     auto_flag
.e7f0	c8		iny		        INY
.e7f1	a9 0a		lda #$0a	        LDA     #$0A
.e7f3	85 f4		sta $f4		Le7f3:  STA     auto_inc
.e7f5	84 f5		sty $f5		        STY     auto_inc+1
.e7f7	60		rts		        RTS
.e7f8	20 15 e7	jsr $e715	auto_com:       JSR     get16bit
.e7fb	a5 ce		lda $ce		        LDA     acc
.e7fd	a4 cf		ldy $cf		        LDY     acc+1
.e7ff	10 f2		bpl $e7f3	        BPL     Le7f3
.e801	20 15 e7	jsr $e715	var_assign:     JSR     get16bit
.e804	b5 50		lda $50,x	        LDA     noun_stk_l,X
.e806	85 da		sta $da		        STA     aux
.e808	b5 78		lda $78,x	        LDA     noun_stk_h_str,X
.e80a	85 db		sta $db		        STA     aux+1
.e80c	a5 ce		lda $ce		        LDA     acc
.e80e	91 da		sta ($da),y	        STA     (aux),Y
.e810	c8		iny		        INY
.e811	a5 cf		lda $cf		        LDA     acc+1
.e813	91 da		sta ($da),y	        STA     (aux),Y
.e815	e8		inx		        INX
.e816	60		rts		Te816:  RTS
.e817					begin_line:
.e817	68		pla		        PLA
.e818	68		pla		        PLA
.e819	24 d5		bit $d5		colon:  BIT     cr_flag
.e81b	10 05		bpl $e822	        BPL     Le822
.e81d	20 cd e3	jsr $e3cd	print_cr:       JSR     crout
.e820	46 d5		lsr $d5		print_semi:     LSR     cr_flag
.e822	60		rts		Le822:  RTS
.e823	a0 ff		ldy #$ff	left_paren:     LDY     #$FF
.e825	84 d7		sty $d7		        STY     precedence
.e827	60		rts		right_paren:    RTS
.e828	20 cd ef	jsr $efcd	if_stmt:        JSR     Sefcd
.e82b	f0 07		beq $e834	        BEQ     Le834
.e82d	a9 25		lda #$25	        LDA     #$25
.e82f	85 d6		sta $d6		        STA     current_verb
.e831	88		dey		        DEY
.e832	84 d4		sty $d4		        STY     if_flag
.e834	e8		inx		Le834:  INX
.e835	60		rts		        RTS
.e836	a5 ca		lda $ca		run_warm:       LDA     pp
.e838	a4 cb		ldy $cb		        LDY     pp+1
.e83a	d0 5a		bne $e896	        BNE     Le896
.e83c	a0 41		ldy #$41	gosub_stmt:     LDY     #$41
.e83e	a5 fc		lda $fc		        LDA     gosub_nest_count
.e840	c9 08		cmp #$08	        CMP     #$08
.e842	b0 5e		bcs $e8a2	        BCS     go_errmess_4
.e844	a8		tay		        TAY
.e845	e6 fc		inc $fc		        INC     gosub_nest_count
.e847	a5 e0		lda $e0		        LDA     pverb
.e849	99 00 01	sta $0100,y	        STA     gstk_pverbl,Y
.e84c	a5 e1		lda $e1		        LDA     pverb+1
.e84e	99 08 01	sta $0108,y	        STA     gstk_pverbh,Y
.e851	a5 dc		lda $dc		        LDA     pline
.e853	99 10 01	sta $0110,y	        STA     gstk_plinel,Y
.e856	a5 dd		lda $dd		        LDA     pline+1
.e858	99 18 01	sta $0118,y	        STA     gstk_plineh,Y
.e85b	20 15 e7	jsr $e715	goto_stmt:      JSR     get16bit
.e85e	20 6d e5	jsr $e56d	        JSR     find_line
.e861	90 04		bcc $e867	        BCC     Le867
.e863	a0 37		ldy #$37	        LDY     #$37
.e865	d0 3b		bne $e8a2	        BNE     go_errmess_4
.e867	a5 e4		lda $e4		Le867:  LDA     p2
.e869	a4 e5		ldy $e5		        LDY     p2+1
.e86b	85 dc		sta $dc		run_loop:       STA     pline
.e86d	84 dd		sty $dd		        STY     pline+1

;******  Processing file: hardware/break.asm

.e86f	ea		nop		        nop
.e870	ea		nop		        nop
.e871	ea		nop		        nop
.e872	ea		nop		        nop
.e873	ea		nop		        nop

;******  Return to file: a1basic.asm

.e874	18		clc		        CLC
.e875	69 03		adc #$03	        ADC     #$03
.e877	90 01		bcc $e87a	        BCC     Le87a
.e879	c8		iny		        INY
.e87a	a2 ff		ldx #$ff	Le87a:  LDX     #$FF
.e87c	86 d9		stx $d9		        STX     run_flag
.e87e	9a		txs		        TXS
.e87f	85 e0		sta $e0		        STA     pverb
.e881	84 e1		sty $e1		        STY     pverb+1
.e883	20 79 e6	jsr $e679	Le883:  JSR     execute_stmt
.e886	24 d9		bit $d9		        BIT     run_flag
.e888	10 49		bpl $e8d3	        BPL     end_stmt
.e88a	18		clc		        CLC
.e88b	a0 00		ldy #$00	        LDY     #$00
.e88d	a5 dc		lda $dc		        LDA     pline
.e88f	71 dc		adc ($dc),y	        ADC     (pline),Y
.e891	a4 dd		ldy $dd		        LDY     pline+1
.e893	90 01		bcc $e896	        BCC     Le896
.e895	c8		iny		        INY
.e896	c5 4c		cmp $4c		Le896:  CMP     himem
.e898	d0 d1		bne $e86b	        BNE     run_loop
.e89a	c4 4d		cpy $4d		        CPY     himem+1
.e89c	d0 cd		bne $e86b	        BNE     run_loop
.e89e	a0 34		ldy #$34	        LDY     #$34
.e8a0	46 d9		lsr $d9		        LSR     run_flag
.e8a2	4c e0 e3	jmp $e3e0	go_errmess_4:   JMP     print_err_msg
.e8a5	a0 4a		ldy #$4a	return_stmt:    LDY     #$4A
.e8a7	a5 fc		lda $fc		        LDA     gosub_nest_count
.e8a9	f0 f7		beq $e8a2	        BEQ     go_errmess_4
.e8ab	c6 fc		dec $fc		        DEC     gosub_nest_count
.e8ad	a8		tay		        TAY
.e8ae	b9 0f 01	lda $010f,y	        LDA     gstk_plinel-1,Y
.e8b1	85 dc		sta $dc		        STA     pline
.e8b3	b9 17 01	lda $0117,y	        LDA     gstk_plineh-1,Y
.e8b6	85 dd		sta $dd		        STA     pline+1
.e8b8	be ff 00	ldx $00ff,y	        LDX     @w synpag+1,Y            ; force absolute addressing mode
.e8bb	b9 07 01	lda $0107,y	        LDA     gstk_pverbh-1,Y
.e8be	a8		tay		Le8be:  TAY
.e8bf	8a		txa		        TXA
.e8c0	4c 7a e8	jmp $e87a	        JMP     Le87a
.e8c3	a0 63		ldy #$63	Le8c3:  LDY     #$63
.e8c5	20 c4 e3	jsr $e3c4	        JSR     Se3c4
.e8c8	a0 01		ldy #$01	        LDY     #$01
.e8ca	b1 dc		lda ($dc),y	        LDA     (pline),Y
.e8cc	aa		tax		        TAX
.e8cd	c8		iny		        INY
.e8ce	b1 dc		lda ($dc),y	        LDA     (pline),Y
.e8d0	20 1b e5	jsr $e51b	        JSR     prdec
.e8d3	4c b3 e2	jmp $e2b3	end_stmt:       JMP     warm
.e8d6	c6 fb		dec $fb		Le8d6:  DEC     for_nest_count
.e8d8	a0 5b		ldy #$5b	next_stmt:      LDY     #$5B
.e8da	a5 fb		lda $fb		        LDA     for_nest_count
.e8dc	f0 c4		beq $e8a2	Le8dc:  BEQ     go_errmess_4
.e8de	a8		tay		        TAY
.e8df	b5 50		lda $50,x	        LDA     noun_stk_l,X
.e8e1	d9 1f 01	cmp $011f,y	        CMP     fstk_varl-1,Y
.e8e4	d0 f0		bne $e8d6	        BNE     Le8d6
.e8e6	b5 78		lda $78,x	        LDA     noun_stk_h_str,X
.e8e8	d9 27 01	cmp $0127,y	        CMP     fstk_varh-1,Y
.e8eb	d0 e9		bne $e8d6	        BNE     Le8d6
.e8ed	b9 2f 01	lda $012f,y	        LDA     fstk_stepl-1,Y
.e8f0	85 da		sta $da		        STA     aux
.e8f2	b9 37 01	lda $0137,y	        LDA     fstk_steph-1,Y
.e8f5	85 db		sta $db		        STA     aux+1
.e8f7	20 15 e7	jsr $e715	        JSR     get16bit
.e8fa	ca		dex		        DEX
.e8fb	20 93 e7	jsr $e793	        JSR     Se793
.e8fe	20 01 e8	jsr $e801	        JSR     var_assign
.e901	ca		dex		        DEX
.e902	a4 fb		ldy $fb		        LDY     for_nest_count
.e904	b9 67 01	lda $0167,y	        LDA     fstk_toh-1,Y
.e907	95 9f		sta $9f,x	        STA     syn_stk_l+31,X
.e909	b9 5f 01	lda $015f,y	        LDA     fstk_tol-1,Y
.e90c	a0 00		ldy #$00	        LDY     #$00
.e90e	20 08 e7	jsr $e708	        JSR     push_ya_noun_stk
.e911	20 82 e7	jsr $e782	        JSR     subtract
.e914	20 59 e7	jsr $e759	        JSR     sgn_fn
.e917	20 15 e7	jsr $e715	        JSR     get16bit
.e91a	a4 fb		ldy $fb		        LDY     for_nest_count
.e91c	a5 ce		lda $ce		        LDA     acc
.e91e	f0 05		beq $e925	        BEQ     Le925
.e920	59 37 01	eor $0137,y	        EOR     fstk_steph-1,Y
.e923	10 12		bpl $e937	        BPL     Le937
.e925	b9 3f 01	lda $013f,y	Le925:  LDA     fstk_plinel-1,Y
.e928	85 dc		sta $dc		        STA     pline
.e92a	b9 47 01	lda $0147,y	        LDA     fstk_plineh-1,Y
.e92d	85 dd		sta $dd		        STA     pline+1
.e92f	be 4f 01	ldx $014f,y	        LDX     fstk_pverbl-1,Y
.e932	b9 57 01	lda $0157,y	        LDA     fstk_pverbh-1,Y
.e935	d0 87		bne $e8be	        BNE     Le8be
.e937	c6 fb		dec $fb		Le937:  DEC     for_nest_count
.e939	60		rts		        RTS
.e93a	a0 54		ldy #$54	for_stmt:       LDY     #$54
.e93c	a5 fb		lda $fb		        LDA     for_nest_count
.e93e	c9 08		cmp #$08	        CMP     #$08
.e940	f0 9a		beq $e8dc	        BEQ     Le8dc
.e942	e6 fb		inc $fb		        INC     for_nest_count
.e944	a8		tay		        TAY
.e945	b5 50		lda $50,x	        LDA     noun_stk_l,X
.e947	99 20 01	sta $0120,y	        STA     fstk_varl,Y
.e94a	b5 78		lda $78,x	        LDA     noun_stk_h_str,X
.e94c	99 28 01	sta $0128,y	        STA     fstk_varh,Y
.e94f	60		rts		        RTS
.e950	20 15 e7	jsr $e715	to_clause:      JSR     get16bit
.e953	a4 fb		ldy $fb		        LDY     for_nest_count
.e955	a5 ce		lda $ce		        LDA     acc
.e957	99 5f 01	sta $015f,y	        STA     fstk_tol-1,Y
.e95a	a5 cf		lda $cf		        LDA     acc+1
.e95c	99 67 01	sta $0167,y	        STA     fstk_toh-1,Y
.e95f	a9 01		lda #$01	        LDA     #$01
.e961	99 2f 01	sta $012f,y	        STA     fstk_stepl-1,Y
.e964	a9 00		lda #$00	        LDA     #$00
.e966	99 37 01	sta $0137,y	Le966:  STA     fstk_steph-1,Y
.e969	a5 dc		lda $dc		        LDA     pline
.e96b	99 3f 01	sta $013f,y	        STA     fstk_plinel-1,Y
.e96e	a5 dd		lda $dd		        LDA     pline+1
.e970	99 47 01	sta $0147,y	        STA     fstk_plineh-1,Y
.e973	a5 e0		lda $e0		        LDA     pverb
.e975	99 4f 01	sta $014f,y	        STA     fstk_pverbl-1,Y
.e978	a5 e1		lda $e1		        LDA     pverb+1
.e97a	99 57 01	sta $0157,y	        STA     fstk_pverbh-1,Y
.e97d	60		rts		        RTS
.e97e	20 15 e7	jsr $e715	Te97e:  JSR     get16bit
.e981	a4 fb		ldy $fb		        LDY     for_nest_count
.e983	a5 ce		lda $ce		        LDA     acc
.e985	99 2f 01	sta $012f,y	        STA     fstk_stepl-1,Y
.e988	a5 cf		lda $cf		        LDA     acc+1
.e98a	4c 66 e9	jmp $e966	        JMP     Le966
>e98d	00 00 00 00 00 00 00 00		        .byte   $00,$00,$00,$00,$00,$00,$00,$00
>e995	00 00 00			        .byte   $00,$00,$00
.e998					verb_prec_tbl:
>e998	00 00 00 ab 03 03 03 03		        .byte   $00,$00,$00,$AB,$03,$03,$03,$03
>e9a0	03 03 03 03 03 03 03 03		        .byte   $03,$03,$03,$03,$03,$03,$03,$03
>e9a8	03 03 3f 3f c0 c0 3c 3c		        .byte   $03,$03,$3F,$3F,$C0,$C0,$3C,$3C
>e9b0	3c 3c 3c 3c 3c 30 0f c0		        .byte   $3C,$3C,$3C,$3C,$3C,$30,$0F,$C0
>e9b8	cc ff 55 00 ab ab 03 03		        .byte   $CC,$FF,$55,$00,$AB,$AB,$03,$03
>e9c0	ff ff 55 ff ff 55 cf cf		        .byte   $FF,$FF,$55,$FF,$FF,$55,$CF,$CF
>e9c8	cf cf cf ff 55 c3 c3 c3		        .byte   $CF,$CF,$CF,$FF,$55,$C3,$C3,$C3
>e9d0	55 f0 f0 cf 56 56 56 55		        .byte   $55,$F0,$F0,$CF,$56,$56,$56,$55
>e9d8	ff ff 55 03 03 03 03 03		        .byte   $FF,$FF,$55,$03,$03,$03,$03,$03
>e9e0	03 03 ff ff ff 03 03 03		        .byte   $03,$03,$FF,$FF,$FF,$03,$03,$03
>e9e8	03 03 03 03 03 03 03 03		        .byte   $03,$03,$03,$03,$03,$03,$03,$03
>e9f0	03 03 03 03 03 00 ab 03		        .byte   $03,$03,$03,$03,$03,$00,$AB,$03
>e9f8	57 03 03 03 03 07 03 03		        .byte   $57,$03,$03,$03,$03,$07,$03,$03
>ea00	03 03 03 03 03 03 03 03		        .byte   $03,$03,$03,$03,$03,$03,$03,$03
>ea08	03 03 aa ff ff ff ff ff		        .byte   $03,$03,$AA,$FF,$FF,$FF,$FF,$FF
.ea10					verb_adr_l:
>ea10	17 ff ff 19 5d 35 4b f2		        .byte   <begin_line,$FF,$FF,<colon,<list_cmd,<list_comman,<list_all,<Teff2
>ea18	ec 87 6f ad b7 e2 f8 54		        .byte   <Tefec,<del_cmd,<del_comma,<new_cmd,<clr,<auto_cmd,<auto_com,<(Tee5e+1)
>ea20	80 96 85 82 22 10 33 4a		        .byte   <Tef80,<Tef96,<add,<subtract,<mult_op,<divide,<eq_op,<neq_op
>ea28	13 06 0b 4a 01 40 47 7a		        .byte   <Tec13,<Tec06,<Tec0b,<neq_op,<Tec01,<Tec40,<Tec47,<mod_op
>ea30	00 ff 23 09 5b 16 b6 cb		        .byte   $00,$FF,<left_paren,<comma_substr,<goto_stmt,<Te816,<string_input,<input_num_comma
>ea38	ff ff fb ff ff 24 f6 4e		        .byte   $FF,$FF,<paren_substr,$FF,$FF,<num_array_subs,<peek_fn,<rnd_fn
>ea40	59 50 00 ff 23 a3 6f 36		        .byte   <sgn_fn,<abs_fn,$00,$FF,<left_paren,<unary_pos,<negate,<not_op
>ea48	23 d7 1c 22 c2 ae ba 23		        .byte   <left_paren,<string_eq,<string_neq,<len_fn,<leec2,<(l1235+2),<(l1237+4),<left_paren
>ea50	ff ff 21 30 1e 03 c4 20		        .byte   $FF,$FF,<str_arr_dest,<dim_str,<dim_num,<print_str,<print_num,<print_semi
>ea58	00 c1 ff ff ff a0 30 1e		        .byte   <print_str_comma,<print_com_num,$FF,$FF,$FF,<call_stmt,<dim_str,<dim_num
>ea60	a4 d3 b6 bc aa 3a 01 50		        .byte   <tab_fn,<end_stmt,<string_input,<input_prompt,<input_num_stmt,<for_stmt,<var_assign,<to_clause
>ea68	7e d8 d8 a5 3c ff 16 5b		        .byte   <Te97e,<next_stmt,<next_stmt,<return_stmt,<gosub_stmt,$FF,<Te816,<goto_stmt
>ea70	28 03 c4 1d 00 0c 4e 00		        .byte   <if_stmt,<print_str,<print_num,<print_cr,<poke_stmt,<Tef0c,<Tee4e,<poke_stmt
>ea78	3e 00 a6 b0 00 bc c6 57		        .byte   <plot_comma,<poke_stmt,<l1233,<(l1235+4),<poke_stmt,<(l1237+6),<(leec2+4),<(l123+1)
>ea80	8c 01 27 ff ff ff ff ff		        .byte   <string_lit,<var_assign,<right_paren,$FF,$FF,$FF,$FF,$FF
.ea88					verb_adr_h:
>ea88	e8 ff ff e8 e0 e0 e0 ef		        .byte   >begin_line,$FF,$FF,>colon,>list_cmd,>list_comman,>list_all,>Teff2
>ea90	ef e3 e3 e5 e5 e7 e7 ee		        .byte   >Tefec,>del_cmd,>del_comma,>new_cmd,>clr,>auto_cmd,>auto_com,>(Tee5e+1)
>ea98	ef ef e7 e7 e2 ef e7 e7		        .byte   >Tef80,>Tef96,>add,>subtract,>mult_op,>divide,>eq_op,>neq_op
>eaa0	ec ec ec e7 ec ec ec e2		        .byte   >Tec13,>Tec06,>Tec0b,>neq_op,>Tec01,>Tec40,>Tec47,>mod_op
>eaa8	00 ff e8 e1 e8 e8 ef eb		        .byte   $00,$FF,>left_paren,>comma_substr,>goto_stmt,>Te816,>string_input,>input_num_comma
>eab0	ff ff e0 ff ff ef ee ef		        .byte   $FF,$FF,>paren_substr,$FF,$FF,>num_array_subs,>peek_fn,>rnd_fn
>eab8	e7 e7 00 ff e8 e7 e7 e7		        .byte   >sgn_fn,>abs_fn,$00,$FF,>left_paren,>unary_pos,>negate,>not_op
>eac0	e8 e1 e2 ee ee ee ee e8		        .byte   >left_paren,>string_eq,>string_neq,>len_fn,>leec2,>(l1235+2),>(l1237+4),>left_paren
>eac8	ff ff e1 e1 ef ee e7 e8		        .byte   $FF,$FF,>str_arr_dest,>dim_str,>dim_num,>print_str,>print_num,>print_semi
>ead0	ee e7 ff ff ff ee e1 ef		        .byte   >print_str_comma,>print_com_num,$FF,$FF,$FF,>call_stmt,>dim_str,>dim_num
>ead8	e7 e8 ef ef eb e9 e8 e9		        .byte   >tab_fn,>end_stmt,>string_input,>input_prompt,>input_num_stmt,>for_stmt,>var_assign,>to_clause
>eae0	e9 e8 e8 e8 e8 ff e8 e8		        .byte   >Te97e,>next_stmt,>next_stmt,>return_stmt,>gosub_stmt,$FF,>Te816,>goto_stmt
>eae8	e8 ee e7 e8 ef ef ee ef		        .byte   >if_stmt,>print_str,>print_num,>print_cr,>poke_stmt,>Tef0c,>Tee4e,>poke_stmt
>eaf0	ee ef ee ee ef ee ee ee		        .byte   >plot_comma,>poke_stmt,>l1233,>(l1235+4),>poke_stmt,>(l1237+6),>(leec2+4),>(l123+1)
>eaf8	e1 e8 e8 ff ff ff ff ff		        .byte   >string_lit,>var_assign,>right_paren,$FF,$FF,$FF,$FF,$FF
.eb00					error_msg_tbl:
>eb00	be b3 b2 b7 b6 37		        .byte   $BE,$B3,$B2,$B7,$B6,$37         ; ">32767"
>eb06	d4 cf cf a0 cc cf ce 47		        .byte   $D4,$CF,$CF,$A0,$CC,$CF,$CE,$47 ; "TOO LONG"
>eb0e	d3 d9 ce d4 c1 58		        .byte   $D3,$D9,$CE,$D4,$C1,$58         ; "SYNTAX"
>eb14	cd c5 cd a0 c6 d5 cc 4c		        .byte   $CD,$C5,$CD,$A0,$C6,$D5,$CC,$4C ; "MEM FULL"
>eb1c	d4 cf cf a0 cd c1 ce d9		        .byte   $D4,$CF,$CF,$A0,$CD,$C1,$CE,$D9,$A0,$D0,$C1,$D2,$C5,$CE,$53 ; "TOO MANY PARENS"
>eb24	a0 d0 c1 d2 c5 ce 53
>eb2b	d3 d4 d2 c9 ce 47		        .byte   $D3,$D4,$D2,$C9,$CE,$47         ; "STRING"
>eb31	ce cf a0 c5 ce 44		        .byte   $CE,$CF,$A0,$C5,$CE,$44         ; "NO END"
>eb37	c2 c1 c4 a0 c2 d2 c1 ce		        .byte   $C2,$C1,$C4,$A0,$C2,$D2,$C1,$CE,$C3,$48 ; "BAD BRANCH"
>eb3f	c3 48
>eb41	be b8 a0 c7 cf d3 d5 c2		        .byte   $BE,$B8,$A0,$C7,$CF,$D3,$D5,$C2,$53     ; ">8 GOSUBS"
>eb49	53
>eb4a	c2 c1 c4 a0 d2 c5 d4 d5		        .byte   $C2,$C1,$C4,$A0,$D2,$C5,$D4,$D5,$D2,$4E ; "BAD RETURN"
>eb52	d2 4e
>eb54	be b8 a0 c6 cf d2 53		        .byte   $BE,$B8,$A0,$C6,$CF,$D2,$53     ; ">8 FORS"
>eb5b	c2 c1 c4 a0 ce c5 d8 54		        .byte   $C2,$C1,$C4,$A0,$CE,$C5,$D8,$54 ; "BAD NEXT"
>eb63	d3 d4 cf d0 d0 c5 c4 a0		        .byte   $D3,$D4,$CF,$D0,$D0,$C5,$C4,$A0,$C1,$D4,$20 ; "STOPPED AT "
>eb6b	c1 d4 20
>eb6e	aa aa aa 20			        .byte   $AA,$AA,$AA,$20                 ; "*** "
>eb72	a0 c5 d2 d2 0d			        .byte   $A0,$C5,$D2,$D2,$0D             ; " ERR.\n"
>eb77	be b2 b5 35			        .byte   $BE,$B2,$B5,$35                 ; ">255"
>eb7b	d2 c1 ce c7 45			        .byte   $D2,$C1,$CE,$C7,$45             ; RANGE"
>eb80	c4 c9 4d			        .byte   $C4,$C9,$4D                     ; "DIM"
>eb83	d3 d4 d2 a0 cf d6 c6 4c		        .byte   $D3,$D4,$D2,$A0,$CF,$D6,$C6,$4C ; "STR OVFL"
>eb8b	dc 0d				        .byte   $DC,$0D                         ; "\\\n"
>eb8d	d2 c5 d4 d9 d0 c5 a0 cc		        .byte   $D2,$C5,$D4,$D9,$D0,$C5,$A0,$CC,$C9,$CE,$C5,$8D ; "RETYPE LINE\n"
>eb95	c9 ce c5 8d
>eb99	3f				        .byte   $3F                             ; "?"
.eb9a	46 d9		lsr $d9		Leb9a:  LSR     run_flag
.eb9c	90 03		bcc $eba1	        BCC     Leba1
.eb9e	4c c3 e8	jmp $e8c3	        JMP     Le8c3
.eba1	a6 cf		ldx $cf		Leba1:  LDX     acc+1
.eba3	9a		txs		        TXS
.eba4	a6 ce		ldx $ce		        LDX     acc
.eba6	a0 8d		ldy #$8d	        LDY     #$8D
.eba8	d0 02		bne $ebac	        BNE     Lebac
.ebaa	a0 99		ldy #$99	input_num_stmt: LDY     #$99
.ebac	20 c4 e3	jsr $e3c4	Lebac:  JSR     Se3c4
.ebaf	86 ce		stx $ce		        STX     acc
.ebb1	ba		tsx		        TSX
.ebb2	86 cf		stx $cf		        STX     acc+1
.ebb4	a0 fe		ldy #$fe	        LDY     #$FE
.ebb6	84 d9		sty $d9		        STY     run_flag
.ebb8	c8		iny		        INY
.ebb9	84 c8		sty $c8		        STY     text_index
.ebbb	20 99 e2	jsr $e299	        JSR     Se299
.ebbe	84 f1		sty $f1		        STY     token_index
.ebc0	a2 20		ldx #$20	        LDX     #$20
.ebc2	a9 30		lda #$30	        LDA     #$30
.ebc4	20 91 e4	jsr $e491	        JSR     Se491
.ebc7	e6 d9		inc $d9		        INC     run_flag
.ebc9	a6 ce		ldx $ce		        LDX     acc
.ebcb	a4 c8		ldy $c8		input_num_comma:        LDY     text_index
.ebcd	0a		asl a		        ASL     A
.ebce	85 ce		sta $ce		Lebce:  STA     acc
.ebd0	c8		iny		        INY
.ebd1	b9 00 02	lda $0200,y	        LDA     buffer,Y
.ebd4	c9 74		cmp #$74	        CMP     #$74
.ebd6	f0 d2		beq $ebaa	        BEQ     input_num_stmt
.ebd8	49 b0		eor #$b0	        EOR     #$B0
.ebda	c9 0a		cmp #$0a	        CMP     #$0A
.ebdc	b0 f0		bcs $ebce	        BCS     Lebce
.ebde	c8		iny		        INY
.ebdf	c8		iny		        INY
.ebe0	84 c8		sty $c8		        STY     text_index
.ebe2	b9 00 02	lda $0200,y	        LDA     buffer,Y
.ebe5	48		pha		        PHA
.ebe6	b9 ff 01	lda $01ff,y	        LDA     buffer-1,Y
.ebe9	a0 00		ldy #$00	        LDY     #$00
.ebeb	20 08 e7	jsr $e708	        JSR     push_ya_noun_stk
.ebee	68		pla		        PLA
.ebef	95 a0		sta $a0,x	        STA     noun_stk_h_int,X
.ebf1	a5 ce		lda $ce		        LDA     acc
.ebf3	c9 c7		cmp #$c7	        CMP     #$C7
.ebf5	d0 03		bne $ebfa	        BNE     Lebfa
.ebf7	20 6f e7	jsr $e76f	        JSR     negate
.ebfa	4c 01 e8	jmp $e801	Lebfa:  JMP     var_assign
>ebfd	ff ff ff 50			        .byte   $FF,$FF,$FF,$50
.ec01	20 13 ec	jsr $ec13	Tec01:  JSR     Tec13
.ec04	d0 15		bne $ec1b	        BNE     Lec1b
.ec06	20 0b ec	jsr $ec0b	Tec06:  JSR     Tec0b
.ec09	d0 10		bne $ec1b	        BNE     Lec1b
.ec0b	20 82 e7	jsr $e782	Tec0b:  JSR     subtract
.ec0e	20 6f e7	jsr $e76f	        JSR     negate
.ec11	50 03		bvc $ec16	        BVC     Lec16
.ec13	20 82 e7	jsr $e782	Tec13:  JSR     subtract
.ec16	20 59 e7	jsr $e759	Lec16:  JSR     sgn_fn
.ec19	56 50		lsr $50,x	        LSR     noun_stk_l,X
.ec1b	4c 36 e7	jmp $e736	Lec1b:  JMP     not_op
>ec1e	ff ff				        .byte   $FF,$FF
.ec20					syntabl_index:
>ec20	c1 ff 7f d1 cc c7 cf ce		        .byte   $C1,$FF,$7F,$D1,$CC,$C7,$CF,$CE
>ec28	c5 9a 98 8b 96 95 93 bf		        .byte   $C5,$9A,$98,$8B,$96,$95,$93,$BF
>ec30	b2 32 2d 2b bc b0 ac be		        .byte   $B2,$32,$2D,$2B,$BC,$B0,$AC,$BE
>ec38	35 8e 61 ff ff ff dd fb		        .byte   $35,$8E,$61,$FF,$FF,$FF,$DD,$FB
.ec40	20 c9 ef	jsr $efc9	Tec40:  JSR     Sefc9
.ec43	15 4f		ora $4f,x	        ORA     rnd+1,X
.ec45	10 05		bpl $ec4c	        BPL     Lec4c
.ec47	20 c9 ef	jsr $efc9	Tec47:  JSR     Sefc9
.ec4a	35 4f		and $4f,x	        AND     rnd+1,X
.ec4c	95 50		sta $50,x	Lec4c:  STA     noun_stk_l,X
.ec4e	10 cb		bpl $ec1b	        BPL     Lec1b
.ec50	4c c9 ef	jmp $efc9	        JMP     Sefc9
>ec53	40 60 8d 60 8b 00 7e 8c		        .byte   $40,$60,$8D,$60,$8B,$00,$7E,$8C
>ec5b	33 00 00 60 03 bf 12 00		        .byte   $33,$00,$00,$60,$03,$BF,$12,$00
>ec63	40 89 c9 47 9d 17 68 9d		        .byte   $40,$89,$C9,$47,$9D,$17,$68,$9D
>ec6b	0a 00 40 60 8d 60 8b 00		        .byte   $0A,$00,$40,$60,$8D,$60,$8B,$00
>ec73	7e 8c 3c 00 00 60 03 bf		        .byte   $7E,$8C,$3C,$00,$00,$60,$03,$BF
>ec7b	1b 4b 67 b4 a1 07 8c 07		        .byte   $1B,$4B,$67,$B4,$A1,$07,$8C,$07
>ec83	ae a9 ac a8 67 8c 07 b4		        .byte   $AE,$A9,$AC,$A8,$67,$8C,$07,$B4
>ec8b	af ac b0 67 9d b2 af ac		        .byte   $AF,$AC,$B0,$67,$9D,$B2,$AF,$AC
>ec93	af a3 67 8c 07 a5 ab af		        .byte   $AF,$A3,$67,$8C,$07,$A5,$AB,$AF
>ec9b	b0 f4 ae a9 b2 b0 7f 0e		        .byte   $B0,$F4,$AE,$A9,$B2,$B0,$7F,$0E
>eca3	27 b4 ae a9 b2 b0 7f 0e		        .byte   $27,$B4,$AE,$A9,$B2,$B0,$7F,$0E
>ecab	28 b4 ae a9 b2 b0 64 07		        .byte   $28,$B4,$AE,$A9,$B2,$B0,$64,$07
>ecb3	a6 a9 67 af b4 af a7 78		        .byte   $A6,$A9,$67,$AF,$B4,$AF,$A7,$78
>ecbb	b4 a5 ac 78 7f 02 ad a5		        .byte   $B4,$A5,$AC,$78,$7F,$02,$AD,$A5
>ecc3	b2 67 a2 b5 b3 af a7 ee		        .byte   $B2,$67,$A2,$B5,$B3,$AF,$A7,$EE
>eccb	b2 b5 b4 a5 b2 7e 8c 39		        .byte   $B2,$B5,$B4,$A5,$B2,$7E,$8C,$39
>ecd3	b4 b8 a5 ae 67 b0 a5 b4		        .byte   $B4,$B8,$A5,$AE,$67,$B0,$A5,$B4
>ecdb	b3 27 af b4 07 9d 19 b2		        .byte   $B3,$27,$AF,$B4,$07,$9D,$19,$B2
>ece3	af a6 7f 05 37 b4 b5 b0		        .byte   $AF,$A6,$7F,$05,$37,$B4,$B5,$B0
>eceb	ae a9 7f 05 28 b4 b5 b0		        .byte   $AE,$A9,$7F,$05,$28,$B4,$B5,$B0
>ecf3	ae a9 7f 05 2a b4 b5 b0		        .byte   $AE,$A9,$7F,$05,$2A,$B4,$B5,$B0
>ecfb	ae a9 e4 ae a5 00 ff ff		        .byte   $AE,$A9,$E4,$AE,$A5,$00,$FF,$FF
.ed03					syntabl2:
>ed03	47 a2 a1 b4 7f 0d 30 ad		        .byte   $47,$A2,$A1,$B4,$7F,$0D,$30,$AD
>ed0b	a9 a4 7f 0d 23 ad a9 a4		        .byte   $A9,$A4,$7F,$0D,$23,$AD,$A9,$A4
>ed13	67 ac ac a1 a3 00 40 80		        .byte   $67,$AC,$AC,$A1,$A3,$00,$40,$80
>ed1b	c0 c1 80 00 47 8c 68 8c		        .byte   $C0,$C1,$80,$00,$47,$8C,$68,$8C
>ed23	db 67 9b 68 9b 50 8c 63		        .byte   $DB,$67,$9B,$68,$9B,$50,$8C,$63
>ed2b	8c 7f 01 51 07 88 29 84		        .byte   $8C,$7F,$01,$51,$07,$88,$29,$84
>ed33	80 c4 80 57 71 07 88 14		        .byte   $80,$C4,$80,$57,$71,$07,$88,$14
>ed3b	ed a5 ad af ac ed a5 ad		        .byte   $ED,$A5,$AD,$AF,$AC,$ED,$A5,$AD
>ed43	a9 a8 f2 af ac af a3 71		        .byte   $A9,$A8,$F2,$AF,$AC,$AF,$A3,$71
>ed4b	08 88 ae a5 ac 68 83 08		        .byte   $08,$88,$AE,$A5,$AC,$68,$83,$08
>ed53	68 9d 08 71 07 88 60 76		        .byte   $68,$9D,$08,$71,$07,$88,$60,$76
>ed5b	b4 af ae 76 8d 76 8b 51		        .byte   $B4,$AF,$AE,$76,$8D,$76,$8B,$51
>ed63	07 88 19 b8 a4 ae b2 f2		        .byte   $07,$88,$19,$B8,$A4,$AE,$B2,$F2
>ed6b	b3 b5 f3 a2 a1 ee a7 b3		        .byte   $B3,$B5,$F3,$A2,$A1,$EE,$A7,$B3
>ed73	e4 ae b2 eb a5 a5 b0 51		        .byte   $E4,$AE,$B2,$EB,$A5,$A5,$B0,$51
>ed7b	07 88 39 81 c1 4f 7f 0f		        .byte   $07,$88,$39,$81,$C1,$4F,$7F,$0F
>ed83	2f 00 51 06 88 29 c2 0c		        .byte   $2F,$00,$51,$06,$88,$29,$C2,$0C
>ed8b	82 57 8c 6a 8c 42 ae a5		        .byte   $82,$57,$8C,$6A,$8C,$42,$AE,$A5
>ed93	a8 b4 60 ae a5 a8 b4 4f		        .byte   $A8,$B4,$60,$AE,$A5,$A8,$B4,$4F
>ed9b	7e 1e 35 8c 27 51 07 88		        .byte   $7E,$1E,$35,$8C,$27,$51,$07,$88
>eda3	09 8b fe e4 af ad f2 af		        .byte   $09,$8B,$FE,$E4,$AF,$AD,$F2,$AF
>edab	e4 ae a1 dc de 9c dd 9c		        .byte   $E4,$AE,$A1,$DC,$DE,$9C,$DD,$9C
>edb3	de dd 9e c3 dd cf ca cd		        .byte   $DE,$DD,$9E,$C3,$DD,$CF,$CA,$CD
>edbb	cb 00 47 9d ad a5 ad af		        .byte   $CB,$00,$47,$9D,$AD,$A5,$AD,$AF
>edc3	ac 76 9d ad a5 ad a9 a8		        .byte   $AC,$76,$9D,$AD,$A5,$AD,$A9,$A8
>edcb	e6 a6 af 60 8c 20 af b4		        .byte   $E6,$A6,$AF,$60,$8C,$20,$AF,$B4
>edd3	b5 a1 f2 ac a3 f2 a3 b3		        .byte   $B5,$A1,$F2,$AC,$A3,$F2,$A3,$B3
>eddb	60 8c 20 ac a5 a4 ee b5		        .byte   $60,$8C,$20,$AC,$A5,$A4,$EE,$B5
>ede3	b2 60 ae b5 b2 f4 b3 a9		        .byte   $B2,$60,$AE,$B5,$B2,$F4,$B3,$A9
>edeb	ac 60 8c 20 b4 b3 a9 ac		        .byte   $AC,$60,$8C,$20,$B4,$B3,$A9,$AC
>edf3	7a 7e 9a 22 20 00 60 03		        .byte   $7A,$7E,$9A,$22,$20,$00,$60,$03
>edfb	bf 60 03 bf 1f			        .byte   $BF,$60,$03,$BF,$1F
.ee00	20 b1 e7	jsr $e7b1	print_str_comma:        JSR     tabout
.ee03	e8		inx		print_str:      INX
.ee04	e8		inx		        INX
.ee05	b5 4f		lda $4f,x	        LDA     rnd+1,X
.ee07	85 da		sta $da		        STA     aux
.ee09	b5 77		lda $77,x	        LDA     syn_stk_h+31,X
.ee0b	85 db		sta $db		        STA     aux+1
.ee0d	b4 4e		ldy $4e,x	        LDY     rnd,X
.ee0f	98		tya		Lee0f:  TYA
.ee10	d5 76		cmp $76,x	        CMP     syn_stk_h+30,X
.ee12	b0 09		bcs $ee1d	        BCS     Lee1d
.ee14	b1 da		lda ($da),y	        LDA     (aux),Y
.ee16	20 c9 e3	jsr $e3c9	        JSR     cout
.ee19	c8		iny		        INY
.ee1a	4c 0f ee	jmp $ee0f	        JMP     Lee0f
.ee1d	a9 ff		lda #$ff	Lee1d:  LDA     #$FF
.ee1f	85 d5		sta $d5		        STA     cr_flag
.ee21	60		rts		        RTS
.ee22	e8		inx		len_fn: INX
.ee23	a9 00		lda #$00	        LDA     #$00
.ee25	95 78		sta $78,x	        STA     noun_stk_h_str,X
.ee27	95 a0		sta $a0,x	        STA     noun_stk_h_int,X
.ee29	b5 77		lda $77,x	        LDA     syn_stk_h+31,X
.ee2b	38		sec		        SEC
.ee2c	f5 4f		sbc $4f,x	        SBC     rnd+1,X
.ee2e	95 50		sta $50,x	        STA     noun_stk_l,X
.ee30	4c 23 e8	jmp $e823	        JMP     left_paren
>ee33	ff				        .byte   $FF
.ee34	20 15 e7	jsr $e715	getbyte:        JSR     get16bit
.ee37	a5 cf		lda $cf		        LDA     acc+1
.ee39	d0 28		bne $ee63	        BNE     gr_255_err
.ee3b	a5 ce		lda $ce		        LDA     acc
.ee3d	60		rts		        RTS
.ee3e	20 34 ee	jsr $ee34	plot_comma:     JSR     getbyte
.ee41	a4 c8		ldy $c8		        LDY     text_index
.ee43	c9 30		cmp #$30	        CMP     #$30
.ee45	b0 21		bcs $ee68	        BCS     range_err
.ee47	c0 28		cpy #$28	        CPY     #$28
.ee49	b0 1d		bcs $ee68	        BCS     range_err
.ee4b	60		rts		        RTS
.ee4c	ea		nop		        NOP
.ee4d	ea		nop		        NOP
.ee4e	20 34 ee	jsr $ee34	Tee4e:  JSR     getbyte
.ee51	60		rts		        RTS
.ee52	ea		nop		        NOP
.ee53	8a		txa		Tee5e:  TXA
.ee54	a2 01		ldx #$01	        LDX     #$01
.ee56	b4 ce		ldy $ce,x	l123:   LDY     acc,X
.ee58	94 4c		sty $4c,x	        STY     himem,X
.ee5a	b4 48		ldy $48,x	        LDY     var,X
.ee5c	94 ca		sty $ca,x	        STY     pp,X
.ee5e	ca		dex		        DEX
.ee5f	f0 f5		beq $ee56	        BEQ     l123
.ee61	aa		tax		        TAX
.ee62	60		rts		        RTS
.ee63	a0 77		ldy #$77	gr_255_err:     LDY     #$77            ; > 255 error
.ee65	4c e0 e3	jmp $e3e0	go_errmess_5:   JMP     print_err_msg
.ee68	a0 7b		ldy #$7b	range_err:      LDY     #$7B            ; range error
.ee6a	d0 f9		bne $ee65	        BNE     go_errmess_5
.ee6c	20 54 e2	jsr $e254	See6c:  JSR     Se254
.ee6f	a5 da		lda $da		        LDA     aux
.ee71	d0 07		bne $ee7a	        BNE     Lee7a
.ee73	a5 db		lda $db		        LDA     aux+1
.ee75	d0 03		bne $ee7a	        BNE     Lee7a
.ee77	4c 7e e7	jmp $e77e	        JMP     Le77e
.ee7a	06 ce		asl $ce		Lee7a:  ASL     acc
.ee7c	26 cf		rol $cf		        ROL     acc+1
.ee7e	26 e6		rol $e6		        ROL     p3
.ee80	26 e7		rol $e7		        ROL     p3+1
.ee82	a5 e6		lda $e6		        LDA     p3
.ee84	c5 da		cmp $da		        CMP     aux
.ee86	a5 e7		lda $e7		        LDA     p3+1
.ee88	e5 db		sbc $db		        SBC     aux+1
.ee8a	90 0a		bcc $ee96	        BCC     Lee96
.ee8c	85 e7		sta $e7		        STA     p3+1
.ee8e	a5 e6		lda $e6		        LDA     p3
.ee90	e5 da		sbc $da		        SBC     aux
.ee92	85 e6		sta $e6		        STA     p3
.ee94	e6 ce		inc $ce		        INC     acc
.ee96	88		dey		Lee96:  DEY
.ee97	d0 e1		bne $ee7a	        BNE     Lee7a
.ee99	60		rts		        RTS
>ee9a	ff ff ff ff ff ff		        .byte   $FF,$FF,$FF,$FF,$FF,$FF
.eea0	20 15 e7	jsr $e715	call_stmt:      JSR     get16bit
.eea3	6c ce 00	jmp ($00ce)	        JMP     (acc)
.eea6	a5 4c		lda $4c		l1233:  LDA     himem
.eea8	d0 02		bne $eeac	        BNE     l1235
.eeaa	c6 4d		dec $4d		        DEC     himem+1
.eeac	c6 4c		dec $4c		l1235:  DEC     himem
.eeae	a5 48		lda $48		        LDA     var
.eeb0	d0 02		bne $eeb4	        BNE     l1236
.eeb2	c6 49		dec $49		        DEC     var+1
.eeb4	c6 48		dec $48		l1236:  DEC     var
.eeb6	a0 00		ldy #$00	l1237:  LDY     #$00
.eeb8	b1 4c		lda ($4c),y	        LDA     (himem),Y
.eeba	91 48		sta ($48),y	        STA     (var),Y
.eebc	a5 ca		lda $ca		        LDA     pp
.eebe	c5 4c		cmp $4c		        CMP     himem
.eec0	a5 cb		lda $cb		        LDA     pp+1
.eec2	e5 4d		sbc $4d		leec2:  SBC     himem+1
.eec4	90 e0		bcc $eea6	        BCC     l1233
.eec6	4c 53 ee	jmp $ee53	        JMP     Tee5e
.eec9	c9 28		cmp #$28	        CMP     #$28
.eecb	b0 9b		bcs $ee68	Leecb:  BCS     range_err
.eecd	a8		tay		        TAY
.eece	a5 c8		lda $c8		        LDA     text_index
.eed0	60		rts		        RTS
.eed1	ea		nop		        NOP
.eed2	ea		nop		        NOP
.eed3					print_err_msg1:
.eed3	98		tya		        TYA
.eed4	aa		tax		        TAX
.eed5	a0 6e		ldy #$6e	        LDY     #$6E
.eed7	20 c4 e3	jsr $e3c4	        JSR     Se3c4
.eeda	8a		txa		        TXA
.eedb	a8		tay		        TAY
.eedc	20 c4 e3	jsr $e3c4	        JSR     Se3c4
.eedf	a0 72		ldy #$72	        LDY     #$72
.eee1	4c c4 e3	jmp $e3c4	        JMP     Se3c4
.eee4	20 15 e7	jsr $e715	Seee4:  JSR     get16bit
.eee7	06 ce		asl $ce		Leee7:  ASL     acc
.eee9	26 cf		rol $cf		        ROL     acc+1
.eeeb	30 fa		bmi $eee7	        BMI     Leee7
.eeed	b0 dc		bcs $eecb	        BCS     Leecb
.eeef	d0 04		bne $eef5	        BNE     Leef5
.eef1	c5 ce		cmp $ce		        CMP     acc
.eef3	b0 d6		bcs $eecb	        BCS     Leecb
.eef5	60		rts		Leef5:  RTS
.eef6	20 15 e7	jsr $e715	peek_fn:        JSR     get16bit
.eef9	b1 ce		lda ($ce),y	        LDA     (acc),Y
.eefb	94 9f		sty $9f,x	        STY     syn_stk_l+31,X
.eefd	4c 08 e7	jmp $e708	        JMP     push_ya_noun_stk
.ef00	20 34 ee	jsr $ee34	poke_stmt:      JSR     getbyte
.ef03	a5 ce		lda $ce		        LDA     acc
.ef05	48		pha		        PHA
.ef06	20 15 e7	jsr $e715	        JSR     get16bit
.ef09	68		pla		        PLA
.ef0a	91 ce		sta ($ce),y	        STA     (acc),Y
.ef0c	60		rts		Tef0c:  RTS
>ef0d	ff ff ff			        .byte   $FF,$FF,$FF
.ef10	20 6c ee	jsr $ee6c	divide: JSR     See6c
.ef13	a5 ce		lda $ce		        LDA     acc
.ef15	85 e6		sta $e6		        STA     p3
.ef17	a5 cf		lda $cf		        LDA     acc+1
.ef19	85 e7		sta $e7		        STA     p3+1
.ef1b	4c 44 e2	jmp $e244	        JMP     Le244
.ef1e	20 e4 ee	jsr $eee4	dim_num:        JSR     Seee4
.ef21	4c 34 e1	jmp $e134	        JMP     Le134
.ef24	20 e4 ee	jsr $eee4	num_array_subs: JSR     Seee4
.ef27	b4 78		ldy $78,x	        LDY     noun_stk_h_str,X
.ef29	b5 50		lda $50,x	        LDA     noun_stk_l,X
.ef2b	69 fe		adc #$fe	        ADC     #$FE
.ef2d	b0 01		bcs $ef30	        BCS     Lef30
.ef2f	88		dey		        DEY
.ef30	85 da		sta $da		Lef30:  STA     aux
.ef32	84 db		sty $db		        STY     aux+1
.ef34	18		clc		        CLC
.ef35	65 ce		adc $ce		        ADC     acc
.ef37	95 50		sta $50,x	        STA     noun_stk_l,X
.ef39	98		tya		        TYA
.ef3a	65 cf		adc $cf		        ADC     acc+1
.ef3c	95 78		sta $78,x	        STA     noun_stk_h_str,X
.ef3e	a0 00		ldy #$00	        LDY     #$00
.ef40	b5 50		lda $50,x	        LDA     noun_stk_l,X
.ef42	d1 da		cmp ($da),y	        CMP     (aux),Y
.ef44	c8		iny		        INY
.ef45	b5 78		lda $78,x	        LDA     noun_stk_h_str,X
.ef47	f1 da		sbc ($da),y	        SBC     (aux),Y
.ef49	b0 80		bcs $eecb	        BCS     Leecb
.ef4b	4c 23 e8	jmp $e823	        JMP     left_paren
.ef4e	20 15 e7	jsr $e715	rnd_fn: JSR     get16bit
.ef51	a5 4e		lda $4e		        LDA     rnd
.ef53	20 08 e7	jsr $e708	        JSR     push_ya_noun_stk
.ef56	a5 4f		lda $4f		        LDA     rnd+1
.ef58	d0 04		bne $ef5e	        BNE     Lef5e
.ef5a	c5 4e		cmp $4e		        CMP     rnd
.ef5c	69 00		adc #$00	        ADC     #$00
.ef5e	29 7f		and #$7f	Lef5e:  AND     #$7F
.ef60	85 4f		sta $4f		        STA     rnd+1
.ef62	95 a0		sta $a0,x	        STA     noun_stk_h_int,X
.ef64	a0 11		ldy #$11	        LDY     #$11
.ef66	a5 4f		lda $4f		Lef66:  LDA     rnd+1
.ef68	0a		asl a		        ASL     A
.ef69	18		clc		        CLC
.ef6a	69 40		adc #$40	        ADC     #$40
.ef6c	0a		asl a		        ASL     A
.ef6d	26 4e		rol $4e		        ROL     rnd
.ef6f	26 4f		rol $4f		        ROL     rnd+1
.ef71	88		dey		        DEY
.ef72	d0 f2		bne $ef66	        BNE     Lef66
.ef74	a5 ce		lda $ce		        LDA     acc
.ef76	20 08 e7	jsr $e708	        JSR     push_ya_noun_stk
.ef79	a5 cf		lda $cf		        LDA     acc+1
.ef7b	95 a0		sta $a0,x	        STA     noun_stk_h_int,X
.ef7d	4c 7a e2	jmp $e27a	        JMP     mod_op
.ef80	20 15 e7	jsr $e715	Tef80:  JSR     get16bit
.ef83	a4 ce		ldy $ce		        LDY     acc
.ef85	c4 4c		cpy $4c		        CPY     himem
.ef87	a5 cf		lda $cf		        LDA     acc+1
.ef89	e5 4d		sbc $4d		        SBC     himem+1
.ef8b	90 1f		bcc $efac	        BCC     Lefab
.ef8d	84 48		sty $48		        STY     var
.ef8f	a5 cf		lda $cf		        LDA     acc+1
.ef91	85 49		sta $49		        STA     var+1
.ef93	4c b6 ee	jmp $eeb6	Lef93:  JMP     l1237
.ef96	20 15 e7	jsr $e715	Tef96:  JSR     get16bit
.ef99	a4 ce		ldy $ce		        LDY     acc
.ef9b	c4 ca		cpy $ca		        CPY     pp
.ef9d	a5 cf		lda $cf		        LDA     acc+1
.ef9f	e5 cb		sbc $cb		        SBC     pp+1
.efa1	b0 09		bcs $efac	        BCS     Lefab
.efa3	84 4a		sty $4a		        STY     lomem
.efa5	a5 cf		lda $cf		        LDA     acc+1
.efa7	85 4b		sta $4b		        STA     lomem+1
.efa9	4c b7 e5	jmp $e5b7	        JMP     clr
.efac	4c cb ee	jmp $eecb	Lefab:  JMP     Leecb
.efaf	ea		nop		        NOP
.efb0	ea		nop		        NOP
.efb1	ea		nop		        NOP
.efb2	ea		nop		        NOP
.efb3	20 c9 ef	jsr $efc9	Lefb3:  JSR     Sefc9
.efb6	20 71 e1	jsr $e171	string_input:   JSR     input_str
.efb9	4c bf ef	jmp $efbf	        JMP     Lefbf
.efbc	20 03 ee	jsr $ee03	input_prompt:   JSR     print_str
.efbf	a9 ff		lda #$ff	Lefbf:  LDA     #$FF
.efc1	85 c8		sta $c8		        STA     text_index
.efc3	a9 74		lda #$74	        LDA     #$74
.efc5	8d 00 02	sta $0200	        STA     buffer
.efc8	60		rts		        RTS
.efc9	20 36 e7	jsr $e736	Sefc9:  JSR     not_op
.efcc	e8		inx		        INX
.efcd	20 36 e7	jsr $e736	Sefcd:  JSR     not_op
.efd0	b5 50		lda $50,x	        LDA     noun_stk_l,X
.efd2	60		rts		        RTS
.efd3	a9 00		lda #$00	mem_init_4k:    LDA     #$00
.efd5	85 4a		sta $4a		        STA     lomem
.efd7	85 4c		sta $4c		        STA     himem
.efd9	a9 08		lda #$08	        LDA     #$08
.efdb	85 4b		sta $4b		        STA     lomem+1         ; LOMEM defaults to $0800
.efdd	a9 10		lda #$10	        LDA     #$10
.efdf	85 4d		sta $4d		        STA     himem+1         ; HIMEM defaults to $1000
.efe1	4c ad e5	jmp $e5ad	        JMP     new_cmd
.efe4	d5 78		cmp $78,x	Sefe4:  CMP     noun_stk_h_str,X
.efe6	d0 01		bne $efe9	        BNE     Lefe9
.efe8	18		clc		        CLC
.efe9	4c 02 e1	jmp $e102	Lefe9:  JMP     Le102
.efec	20 b7 e5	jsr $e5b7	Tefec:  JSR     clr
.efef	4c 36 e8	jmp $e836	        JMP     run_warm
.eff2	20 b7 e5	jsr $e5b7	Teff2:  JSR     clr
.eff5	4c 5b e8	jmp $e85b	        JMP     goto_stmt
.eff8	e0 80		cpx #$80	Seff8:  CPX     #$80
.effa	d0 01		bne $effd	        BNE     Leffd
.effc	88		dey		        DEY
.effd	4c 0c e0	jmp $e00c	Leffd:  JMP     Se00c

;******  Processing file: hardware/reverse.asm

.f000					FlipCharacterCase:
.f000	c9 41		cmp #$41		cmp 	#"A"
.f002	90 0e		bcc $f012		bcc 	_FCCExit
.f004	c9 5b		cmp #$5b		cmp 	#"Z"+1
.f006	90 08		bcc $f010		bcc 	_FCCFlip
.f008	c9 61		cmp #$61		cmp 	#"a"
.f00a	90 06		bcc $f012		bcc 	_FCCExit
.f00c	c9 7b		cmp #$7b		cmp 	#"z"+1
.f00e	b0 02		bcs $f012		bcs 	_FCCExit
.f010					_FCCFlip:
.f010	49 20		eor #$20		eor 	#$20
.f012					_FCCExit:
.f012	60		rts			rts

;******  Return to file: a1basic.asm


;******  End of listing
